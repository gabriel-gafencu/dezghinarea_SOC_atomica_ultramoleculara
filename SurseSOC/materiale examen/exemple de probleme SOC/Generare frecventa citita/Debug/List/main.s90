///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       22/Dec/2014  17:42:56 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\1307B\Generare frecventa citita\main.c               /
//    Command line =  "D:\1307B\Generare frecventa citita\main.c" --cpu=m16   /
//                    -mt -o "D:\1307B\Generare frecventa citita\Debug\Obj\"  /
//                    -lC "D:\1307B\Generare frecventa citita\Debug\List\"    /
//                    -lA "D:\1307B\Generare frecventa citita\Debug\List\"    /
//                    --initializers_in_flash --no_cse --no_inline            /
//                    --no_code_motion --no_cross_call --no_clustering        /
//                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e           /
//                    --eeprom_size 512 --clib -On                            /
//    List file    =  D:\1307B\Generare frecventa citita\Debug\List\main.s90  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "1"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?L_EC_MUL_L03
        EXTERN ?UL_DIVMOD_L03
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: TINY_I>`
        PUBWEAK `?<Segment init: TINY_Z>`
        PUBWEAK `??interrupt_routine_USART_RXC??INTVEC 44`
        PUBLIC DC
        PUBLIC FOsc
        PUBLIC Fx
        PUBLIC N
        PUBWEAK _A_DDRD
        PUBWEAK _A_ICR1
        PUBWEAK _A_OCR1A
        PUBWEAK _A_PORTD
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TIMSK
        PUBWEAK _A_UDR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC flag
        PUBLIC frecv
        PUBLIC fu
        PUBLIC index
        PUBLIC interrupt_routine_USART_RXC
        FUNCTION interrupt_routine_USART_RXC,0233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 18, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC main
        FUNCTION main,021a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC nrCicli
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
interrupt_routine_USART_RXC SYMBOL "interrupt_routine_USART_RXC"
`??interrupt_routine_USART_RXC??INTVEC 44` SYMBOL "??INTVEC 44", interrupt_routine_USART_RXC

        EXTERN USART_initialize
        FUNCTION USART_initialize,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\1307B\Generare frecventa citita\main.c
//    1 #include <inavr.h> //include biblioteca inavr.h
//    2 #include <iom16.h> //include biblioteca iom16.h

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04fH
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04aH
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,046H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,032H
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02cH
// union <unnamed> volatile __io _A_UDR
_A_UDR:
        DS8 1
//    3 #include "usart.h"
//    4 #include "genF.h"

        RSEG TINY_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_Z>`
//    5 unsigned char frecv[10];
frecv:
        DS8 10

        RSEG TINY_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_Z>`
//    6 unsigned long Fx;
Fx:
        DS8 4

        RSEG TINY_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_I>`
//    7 unsigned long FOsc=4015102;
FOsc:
        DS8 4
        REQUIRE `?<Initializer for FOsc>`

        RSEG TINY_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_I>`
//    8 unsigned int fu=50;
fu:
        DS8 2
        REQUIRE `?<Initializer for fu>`

        RSEG TINY_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_Z>`
//    9 unsigned long nrCicli;
nrCicli:
        DS8 4

        RSEG TINY_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_Z>`
//   10 unsigned long DC;
DC:
        DS8 4

        RSEG TINY_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_I>`
//   11 int N=8;
N:
        DS8 2
        REQUIRE `?<Initializer for N>`

        RSEG TINY_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_Z>`
//   12 int index;
index:
        DS8 2

        RSEG TINY_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_Z>`
//   13 int flag;
flag:
        DS8 2
//   14 
//   15 #pragma vector = USART_RXC_vect

        RSEG CODE:CODE:NOROOT(1)
//   16 __interrupt void interrupt_routine_USART_RXC(void)
interrupt_routine_USART_RXC:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function interrupt_routine_USART_RXC
//   17 {
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R3
          CFI R3 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R2
          CFI R2 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -17)
          CFI CFA_Y Y+17
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -18)
          CFI CFA_Y Y+18
        IN      R25, 0x3F
//   18   unsigned char c=UDR;
        IN      R24, 0x0C
//   19   
//   20   if(flag==0)
        LDS     R16, flag
        LDS     R17, (flag + 1)
        OR      R16, R17
        BREQ    $+2+2
        RJMP    ??interrupt_routine_USART_RXC_0
//   21   {
//   22     if(c!='@' && c!='k' && c!='m' && c!='M' && c!='K')
        CPI     R24, 64
        BREQ    ??interrupt_routine_USART_RXC_1
        CPI     R24, 107
        BREQ    ??interrupt_routine_USART_RXC_1
        CPI     R24, 109
        BREQ    ??interrupt_routine_USART_RXC_1
        CPI     R24, 77
        BREQ    ??interrupt_routine_USART_RXC_1
        CPI     R24, 75
        BREQ    ??interrupt_routine_USART_RXC_1
//   23     {
//   24       frecv[index]=c;
        LDS     R16, index
        LDS     R17, (index + 1)
        MOV     R30, R16
        SUBI    R30, (-(frecv) & 0xFF)
        LDI     R31, 0
        ST      Z, R24
//   25       index++;
        LDI     R30, index
        LDI     R31, 0
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
        RJMP    ??interrupt_routine_USART_RXC_0
//   26     }
//   27     else
//   28     {
//   29       
//   30       
//   31       for(int i =0;i<index;++i)
??interrupt_routine_USART_RXC_1:
        LDI     R26, 0
        LDI     R27, 0
??interrupt_routine_USART_RXC_2:
        LDS     R16, index
        LDS     R17, (index + 1)
        CP      R26, R16
        CPC     R27, R17
        BRGE    ??interrupt_routine_USART_RXC_3
//   32       {
//   33         if(frecv[i]>='0' && frecv[i]<='9')
        MOV     R16, R26
        MOV     R30, R16
        SUBI    R30, (-(frecv) & 0xFF)
        LDI     R31, 0
        LD      R16, Z
        CPI     R16, 48
        BRCS    ??interrupt_routine_USART_RXC_4
        MOV     R16, R26
        MOV     R30, R16
        SUBI    R30, (-(frecv) & 0xFF)
        LDI     R31, 0
        LD      R16, Z
        CPI     R16, 58
        BRCC    ??interrupt_routine_USART_RXC_4
//   34         {
//   35           Fx=Fx*10 + (frecv[i]-'0');
        LDI     R20, 10
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, Fx
        LDI     R31, 0
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?L_EC_MUL_L03
        MOV     R20, R26
        MOV     R30, R20
        SUBI    R30, (-(frecv) & 0xFF)
        LDI     R31, 0
        LD      R20, Z
        LDI     R21, 0
        SUBI    R20, 48
        SBCI    R21, 0
        MOV     R22, R21
        LSL     R22
        SBC     R22, R22
        MOV     R23, R22
        ADD     R16, R20
        ADC     R17, R21
        ADC     R18, R22
        ADC     R19, R23
        LDI     R30, Fx
        LDI     R31, 0
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
//   36           
//   37         }
//   38       }
??interrupt_routine_USART_RXC_4:
        ADIW    R27:R26, 1
        RJMP    ??interrupt_routine_USART_RXC_2
//   39       
//   40       
//   41       
//   42       if(c=='k' || c=='K')
??interrupt_routine_USART_RXC_3:
        CPI     R24, 107
        BREQ    ??interrupt_routine_USART_RXC_5
        CPI     R24, 75
        BRNE    ??interrupt_routine_USART_RXC_6
//   43       {
//   44         Fx*=1000; 
??interrupt_routine_USART_RXC_5:
        LDI     R20, 232
        LDI     R21, 3
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, Fx
        LDI     R31, 0
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?L_EC_MUL_L03
        LDI     R30, Fx
        LDI     R31, 0
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        RJMP    ??interrupt_routine_USART_RXC_7
//   45       }
//   46       else
//   47       {
//   48         if(c=='M')
??interrupt_routine_USART_RXC_6:
        CPI     R24, 77
        BRNE    ??interrupt_routine_USART_RXC_8
//   49         {
//   50           Fx*=1000000; 
        LDI     R20, 64
        LDI     R21, 66
        LDI     R22, 15
        LDI     R23, 0
        LDI     R30, Fx
        LDI     R31, 0
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?L_EC_MUL_L03
        LDI     R30, Fx
        LDI     R31, 0
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        RJMP    ??interrupt_routine_USART_RXC_7
//   51         }
//   52         else
//   53         {
//   54           if(c=='m')
??interrupt_routine_USART_RXC_8:
        CPI     R24, 109
        BRNE    ??interrupt_routine_USART_RXC_7
//   55           {
//   56             Fx/=1000; 
        LDI     R20, 232
        LDI     R21, 3
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, Fx
        LDI     R31, 0
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?UL_DIVMOD_L03
        LDI     R30, Fx
        LDI     R31, 0
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
//   57           }
//   58         }
//   59         
//   60       }
//   61        flag=1;
??interrupt_routine_USART_RXC_7:
        LDI     R16, 1
        LDI     R17, 0
        STS     flag, R16
        STS     (flag + 1), R17
//   62     }
//   63   }
//   64    
//   65 }
??interrupt_routine_USART_RXC_0:
        OUT     0x3F, R25
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+17
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+16
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+15
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+14
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+13
        LD      R21, Y+
          CFI R21 SameValue
          CFI CFA_Y Y+12
        LD      R22, Y+
          CFI R22 SameValue
          CFI CFA_Y Y+11
        LD      R23, Y+
          CFI R23 SameValue
          CFI CFA_Y Y+10
        LD      R0, Y+
          CFI R0 SameValue
          CFI CFA_Y Y+9
        LD      R1, Y+
          CFI R1 SameValue
          CFI CFA_Y Y+8
        LD      R2, Y+
          CFI R2 SameValue
          CFI CFA_Y Y+7
        LD      R3, Y+
          CFI R3 SameValue
          CFI CFA_Y Y+6
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+5
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+4
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+3
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+2
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+1
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
        REQUIRE _A_UDR
//   66 
//   67 
//   68 
//   69 

        RSEG CODE:CODE:NOROOT(1)
//   70 void main( void )
main:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function main
//   71 {
//   72   flag=0;
        FUNCALL main, USART_initialize
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R16, 0
        LDI     R17, 0
        STS     flag, R16
        STS     (flag + 1), R17
//   73   Fx=0;
        LDI     R16, 0
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        LDI     R30, Fx
        LDI     R31, 0
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
//   74   USART_initialize(BAUD_RATE);
        LDI     R16, 12
        LDI     R17, 0
        CALL    USART_initialize
//   75   __enable_interrupt();
        SEI
//   76   index=0;
        LDI     R16, 0
        LDI     R17, 0
        STS     index, R16
        STS     (index + 1), R17
//   77   
//   78   
//   79   while(1)
//   80   {
//   81     if(flag==1)
??main_0:
        LDS     R16, flag
        LDS     R17, (flag + 1)
        CPI     R16, 1
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??main_0
//   82     {
//   83       TCCR1A = ( 1<<COM1A1 | 1<<WGM11 );
        LDI     R16, 130
        OUT     0x2F, R16
//   84       TCCR1B = ( 1<<WGM13 | 1<<WGM12 | 1<<CS11) ; // prescaler de 8
        LDI     R16, 26
        OUT     0x2E, R16
//   85       TIMSK|=(1<<TOIE1);
        IN      R16, 0x39
        ORI     R16, 0x04
        OUT     0x39, R16
//   86       DDRD|=(1<<PD5);
        SBI     0x11, 0x05
//   87       PORTD&=(1<<PD5);
        IN      R16, 0x12
        ANDI    R16, 0x20
        OUT     0x12, R16
//   88       nrCicli=FOsc*1000/Fx/N;
        LDI     R20, 232
        LDI     R21, 3
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, FOsc
        LDI     R31, 0
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?L_EC_MUL_L03
        LDI     R30, Fx
        LDI     R31, 0
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        CALL    ?UL_DIVMOD_L03
        LDS     R20, N
        LDS     R21, (N + 1)
        MOV     R22, R21
        LSL     R22
        SBC     R22, R22
        MOV     R23, R22
        CALL    ?UL_DIVMOD_L03
        LDI     R30, nrCicli
        LDI     R31, 0
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
//   89       DC=fu*nrCicli/100000;
        LDS     R20, fu
        LDS     R21, (fu + 1)
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, nrCicli
        LDI     R31, 0
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?L_EC_MUL_L03
        LDI     R20, 160
        LDI     R21, 134
        LDI     R22, 1
        LDI     R23, 0
        CALL    ?UL_DIVMOD_L03
        LDI     R30, DC
        LDI     R31, 0
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
//   90       OCR1A=DC;   
        LDI     R30, DC
        LDI     R31, 0
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        OUT     0x2B, R17
        OUT     0x2A, R16
//   91       ICR1=nrCicli/1000;
        LDI     R20, 232
        LDI     R21, 3
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, nrCicli
        LDI     R31, 0
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?UL_DIVMOD_L03
        OUT     0x27, R17
        OUT     0x26, R16
        RJMP    ??main_0
          CFI EndBlock cfiBlock1
        REQUIRE _A_TCCR1A
        REQUIRE _A_TCCR1B
        REQUIRE _A_TIMSK
        REQUIRE _A_DDRD
        REQUIRE _A_PORTD
        REQUIRE _A_OCR1A
        REQUIRE _A_ICR1
//   92     }
//   93     
//   94     
//   95   }
//   96   
//   97   
//   98 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 44
`??interrupt_routine_USART_RXC??INTVEC 44`:
        JMP     interrupt_routine_USART_RXC

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: TINY_Z>`:
        DC16    SFE(TINY_Z) - SFB(TINY_Z)
        DC16    SFB(TINY_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG TINY_ID:CODE:NOROOT(0)
`?<Initializer for FOsc>`:
        DD 4015102

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: TINY_I>`:
        DC16    SFE(TINY_I) - SFB(TINY_I)
        DC16    SFB(TINY_I)
        DC16    SFB(TINY_ID)
        REQUIRE ?need_segment_init

        RSEG TINY_ID:CODE:NOROOT(0)
`?<Initializer for fu>`:
        DC16 50

        RSEG TINY_ID:CODE:NOROOT(0)
`?<Initializer for N>`:
        DC16 8

        END
// 
//  10 bytes in segment ABSOLUTE
// 668 bytes in segment CODE
//  12 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//   8 bytes in segment TINY_I
//   8 bytes in segment TINY_ID
//  26 bytes in segment TINY_Z
// 
// 676 bytes of CODE memory (+ 16 bytes shared)
//  34 bytes of DATA memory (+ 10 bytes shared)
//
//Errors: none
//Warnings: none

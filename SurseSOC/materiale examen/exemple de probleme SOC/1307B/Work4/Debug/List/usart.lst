###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        13/Dec/2014  13:41:07 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Work4\usart.c                                   #
#    Command line =  D:\1307B\Work4\usart.c --cpu=m16 -ms -o                  #
#                    D:\1307B\Work4\Debug\Obj\ -lC                            #
#                    D:\1307B\Work4\Debug\List\ -lA                           #
#                    D:\1307B\Work4\Debug\List\ --initializers_in_flash       #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\Work4\Debug\List\usart.lst                      #
#    Object file  =  D:\1307B\Work4\Debug\Obj\usart.r90                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Work4\usart.c
      1          #include "usart.h"

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS8 1
      2          typedef unsigned char uint8_t;
      3          extern char aux[20];
      4          

   \                                 In  segment CODE, align 2, keep-with-next
      5          void USART_initialize(unsigned short int baud_rate)
   \                     USART_initialize:
      6          {
      7            /* seteazã baud rate */
      8            UBRRH = (unsigned char)(baud_rate >> 8);
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   2F23               MOV     R18, R19
   \   00000004   E030               LDI     R19, 0
   \   00000006   BD20               OUT     0x20, R18
      9            UBRRL = (unsigned char)(baud_rate & 0xFF);
   \   00000008   2F20               MOV     R18, R16
   \   0000000A   B929               OUT     0x09, R18
     10            UCSRB = (1 << RXEN) | (1 << TXEN); /* activeazã transmisia .i recep.ia la ie.ire */
   \   0000000C   E128               LDI     R18, 24
   \   0000000E   B92A               OUT     0x0A, R18
     11            /* seteazã pinul TXD: ie.ire */
     12            DDRD |= (1 << PD1);
   \   00000010   9A89               SBI     0x11, 0x01
     13            /* seteazã pinul RXD: intrare */
     14            DDRD &= ~(1 << PD0);
   \   00000012   9888               CBI     0x11, 0x00
     15            /* activeazã întreruperea */
     16            //UCSRB |= (1 << RXCIE);
     17            /* Set frame format: 8data, 1stop bit */
     18            UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0);
   \   00000014   E826               LDI     R18, 134
   \   00000016   BD20               OUT     0x20, R18
     19           }
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_UBRRH
   \   0000001A                      REQUIRE _A_UBRRL
   \   0000001A                      REQUIRE _A_UCSRB
   \   0000001A                      REQUIRE _A_DDRD
     20          

   \                                 In  segment CODE, align 2, keep-with-next
     21          void USART_transmit(unsigned char data)
   \                     USART_transmit:
   \                     ??USART_transmit_0:
     22          {
     23            /* a.teaptã pânã ce se terminã de transmis toate datele .i dupã trece la urmãtoarele informa.ii */
     24            while (!( UCSRA & (1 << UDRE)))
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??USART_transmit_0
     25            {
     26            ;
     27            } 
     28            UDR = data;
   \   00000004   B90C               OUT     0x0C, R16
     29          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_UCSRA
   \   00000008                      REQUIRE _A_UDR
     30          

   \                                 In  segment CODE, align 2, keep-with-next
     31          unsigned char USART_Receive( void )
   \                     USART_Receive:
   \                     ??USART_Receive_0:
     32          {
     33            /* A.teaptã recep.ionarea datelor */
     34            while ( !(UCSRA & (1<<RXC)) )
   \   00000000   9B5F               SBIS    0x0B, 0x07
   \   00000002   CFFE               RJMP    ??USART_Receive_0
     35            {
     36            ; 
     37            }
     38            /* Preia .i returneazã datele recep.ionate din buffer */
     39            return UDR;
   \   00000004   B10C               IN      R16, 0x0C
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_UCSRA
   \   00000008                      REQUIRE _A_UDR
     40          }
     41          

   \                                 In  segment CODE, align 2, keep-with-next
     42          void myprint(unsigned int tip, unsigned int nr_car, void * val)
   \                     myprint:
     43          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
     44            switch(tip)
   \   0000000A   018C               MOVW    R17:R16, R25:R24
   \   0000000C   ....               LDI     R30, LOW(`?<Jumptable for myprint>_0`)
   \   0000000E   ....               LDI     R31, (`?<Jumptable for myprint>_0`) >> 8
   \   00000010   ........           JMP     ?SV_SWITCH_L06
     45            {
     46              case 0:
     47                integerTransmit(tip, nr_car, val);
   \                     ??myprint_0:
   \   00000014   01AD               MOVW    R21:R20, R27:R26
   \   00000016   0192               MOVW    R19:R18, R5:R4
   \   00000018   018C               MOVW    R17:R16, R25:R24
   \   0000001A   ....               RCALL   integerTransmit
     48                break;
   \   0000001C   C017               RJMP    ??myprint_1
     49              case 1:
     50                hexadecimalTransmit(tip, nr_car, val);
   \                     ??myprint_2:
   \   0000001E   01AD               MOVW    R21:R20, R27:R26
   \   00000020   0192               MOVW    R19:R18, R5:R4
   \   00000022   018C               MOVW    R17:R16, R25:R24
   \   00000024   ....               RCALL   hexadecimalTransmit
     51                break;
   \   00000026   C012               RJMP    ??myprint_1
     52              case 2:
     53                doubleTransmit(tip, nr_car, val);
   \                     ??myprint_3:
   \   00000028   01AD               MOVW    R21:R20, R27:R26
   \   0000002A   0192               MOVW    R19:R18, R5:R4
   \   0000002C   018C               MOVW    R17:R16, R25:R24
   \   0000002E   ....               RCALL   doubleTransmit
     54                break;
   \   00000030   C00D               RJMP    ??myprint_1
     55              case 3:
     56                floatTransmit(tip, nr_car, val);
   \                     ??myprint_4:
   \   00000032   01AD               MOVW    R21:R20, R27:R26
   \   00000034   0192               MOVW    R19:R18, R5:R4
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   ....               RCALL   floatTransmit
     57                break;      
   \   0000003A   C008               RJMP    ??myprint_1
     58              case 4:
     59                characterTransmit(tip, nr_car, val);
   \                     ??myprint_5:
   \   0000003C   01AD               MOVW    R21:R20, R27:R26
   \   0000003E   0192               MOVW    R19:R18, R5:R4
   \   00000040   018C               MOVW    R17:R16, R25:R24
   \   00000042   ....               RCALL   characterTransmit
     60                
     61              case 5:
     62                longTransmit(tip, nr_car, val);
   \                     ??myprint_6:
   \   00000044   01AD               MOVW    R21:R20, R27:R26
   \   00000046   0192               MOVW    R19:R18, R5:R4
   \   00000048   018C               MOVW    R17:R16, R25:R24
   \   0000004A   ....               RCALL   longTransmit
     63                break;
     64              break;
     65            }  
     66          }
   \                     ??myprint_1:
   \   0000004C   E0E6               LDI     R30, 6
   \   0000004E   ........           JMP     ?EPILOGUE_B6_L09
     67          
     68          //transmiterea unui întreg pe serialã

   \                                 In  segment CODE, align 2, keep-with-next
     69          void integerTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     integerTransmit:
     70          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   0148               MOVW    R9:R8, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
     71            int index=0;
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
     72            //char aux[5];
     73            int x=*((int *)(p3));
   \   0000000E   906D               LD      R6, X+
   \   00000010   907C               LD      R7, X
   \   00000012   9711               SBIW    R27:R26, 1
     74            if(x<0)
   \   00000014   2077               TST     R7
   \   00000016   F442               BRPL    ??integerTransmit_0
     75            {
     76              USART_transmit('-');
   \   00000018   E20D               LDI     R16, 45
   \   0000001A   ....               RCALL   USART_transmit
     77              x*=(-1);
   \   0000001C   EF4F               LDI     R20, 255
   \   0000001E   EF5F               LDI     R21, 255
   \   00000020   0183               MOVW    R17:R16, R7:R6
   \   00000022   ........           CALL    ?S_EC_MUL_L02
   \   00000026   0138               MOVW    R7:R6, R17:R16
     78             }
     79            while(x!=0)
   \                     ??integerTransmit_0:
   \   00000028   2D06               MOV     R16, R6
   \   0000002A   2907               OR      R16, R7
   \   0000002C   F091               BREQ    ??integerTransmit_1
     80            {
     81              aux[index]=x%10+'0';
   \   0000002E   E04A               LDI     R20, 10
   \   00000030   E050               LDI     R21, 0
   \   00000032   0183               MOVW    R17:R16, R7:R6
   \   00000034   ........           CALL    ?SS_DIVMOD_L02
   \   00000038   5D40               SUBI    R20, 208
   \   0000003A   01FC               MOVW    R31:R30, R25:R24
   \   0000003C   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   00000040   8340               ST      Z, R20
     82              index++;
   \   00000042   9601               ADIW    R25:R24, 1
     83              x=x/10;
   \   00000044   E04A               LDI     R20, 10
   \   00000046   E050               LDI     R21, 0
   \   00000048   0183               MOVW    R17:R16, R7:R6
   \   0000004A   ........           CALL    ?SS_DIVMOD_L02
   \   0000004E   0138               MOVW    R7:R6, R17:R16
   \   00000050   CFEB               RJMP    ??integerTransmit_0
     84            }
     85            while(p2 > 0 && index > 0)
   \                     ??integerTransmit_1:
   \   00000052   2D04               MOV     R16, R4
   \   00000054   2905               OR      R16, R5
   \   00000056   F079               BREQ    ??integerTransmit_2
   \   00000058   3081               CPI     R24, 1
   \   0000005A   E000               LDI     R16, 0
   \   0000005C   0790               CPC     R25, R16
   \   0000005E   F05C               BRLT    ??integerTransmit_2
     86            {
     87              USART_transmit(aux[index-1]);
   \   00000060   01FC               MOVW    R31:R30, R25:R24
   \   00000062   ....               SUBI    R30, LOW((-(aux - 1) & 0xFFFF))
   \   00000064   ....               SBCI    R31, HIGH((-(aux - 1) & 0xFFFF))
   \   00000066   8100               LD      R16, Z
   \   00000068   ....               RCALL   USART_transmit
     88              index--;
   \   0000006A   9701               SBIW    R25:R24, 1
     89              p2--;
   \   0000006C   EF0F               LDI     R16, 255
   \   0000006E   0E40               ADD     R4, R16
   \   00000070   EF0F               LDI     R16, 255
   \   00000072   1E50               ADC     R5, R16
   \   00000074   CFEE               RJMP    ??integerTransmit_1
     90            }
     91          }  
   \                     ??integerTransmit_2:
   \   00000076   E0EA               LDI     R30, 10
   \   00000078   ........           JMP     ?EPILOGUE_B10_L09
     92          

   \                                 In  segment CODE, align 2, keep-with-next
     93          void longTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     longTransmit:
     94          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   0148               MOVW    R9:R8, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
     95            int index=0;
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
     96            //char aux[5];
     97            int x=*((int *)(p3));
   \   0000000E   906D               LD      R6, X+
   \   00000010   907C               LD      R7, X
   \   00000012   9711               SBIW    R27:R26, 1
     98            if(x<0)
   \   00000014   2077               TST     R7
   \   00000016   F442               BRPL    ??longTransmit_0
     99            {
    100              USART_transmit('-');
   \   00000018   E20D               LDI     R16, 45
   \   0000001A   ....               RCALL   USART_transmit
    101              x*=(-1);
   \   0000001C   EF4F               LDI     R20, 255
   \   0000001E   EF5F               LDI     R21, 255
   \   00000020   0183               MOVW    R17:R16, R7:R6
   \   00000022   ........           CALL    ?S_EC_MUL_L02
   \   00000026   0138               MOVW    R7:R6, R17:R16
    102             }
    103            while(x!=0)
   \                     ??longTransmit_0:
   \   00000028   2D06               MOV     R16, R6
   \   0000002A   2907               OR      R16, R7
   \   0000002C   F091               BREQ    ??longTransmit_1
    104            {
    105              aux[index]=x%10+'0';
   \   0000002E   E04A               LDI     R20, 10
   \   00000030   E050               LDI     R21, 0
   \   00000032   0183               MOVW    R17:R16, R7:R6
   \   00000034   ........           CALL    ?SS_DIVMOD_L02
   \   00000038   5D40               SUBI    R20, 208
   \   0000003A   01FC               MOVW    R31:R30, R25:R24
   \   0000003C   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   00000040   8340               ST      Z, R20
    106              index++;
   \   00000042   9601               ADIW    R25:R24, 1
    107              x=x/10;
   \   00000044   E04A               LDI     R20, 10
   \   00000046   E050               LDI     R21, 0
   \   00000048   0183               MOVW    R17:R16, R7:R6
   \   0000004A   ........           CALL    ?SS_DIVMOD_L02
   \   0000004E   0138               MOVW    R7:R6, R17:R16
   \   00000050   CFEB               RJMP    ??longTransmit_0
    108            }
    109            while(p2 > 0 && index > 0)
   \                     ??longTransmit_1:
   \   00000052   2D04               MOV     R16, R4
   \   00000054   2905               OR      R16, R5
   \   00000056   F079               BREQ    ??longTransmit_2
   \   00000058   3081               CPI     R24, 1
   \   0000005A   E000               LDI     R16, 0
   \   0000005C   0790               CPC     R25, R16
   \   0000005E   F05C               BRLT    ??longTransmit_2
    110            {
    111              USART_transmit(aux[index-1]);
   \   00000060   01FC               MOVW    R31:R30, R25:R24
   \   00000062   ....               SUBI    R30, LOW((-(aux - 1) & 0xFFFF))
   \   00000064   ....               SBCI    R31, HIGH((-(aux - 1) & 0xFFFF))
   \   00000066   8100               LD      R16, Z
   \   00000068   ....               RCALL   USART_transmit
    112              index--;
   \   0000006A   9701               SBIW    R25:R24, 1
    113              p2--;
   \   0000006C   EF0F               LDI     R16, 255
   \   0000006E   0E40               ADD     R4, R16
   \   00000070   EF0F               LDI     R16, 255
   \   00000072   1E50               ADC     R5, R16
   \   00000074   CFEE               RJMP    ??longTransmit_1
    114            }
    115          }  
   \                     ??longTransmit_2:
   \   00000076   E0EA               LDI     R30, 10
   \   00000078   ........           JMP     ?EPILOGUE_B10_L09
    116          
    117          //transmiterea unui numãr hexazecimal pe serialã

   \                                 In  segment CODE, align 2, keep-with-next
    118          void hexadecimalTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     hexadecimalTransmit:
    119          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   9726               SBIW    R29:R28, 6
   \   00000006   830C               STD     Y+4, R16
   \   00000008   831D               STD     Y+5, R17
   \   0000000A   8328               ST      Y, R18
   \   0000000C   8339               STD     Y+1, R19
   \   0000000E   834A               STD     Y+2, R20
   \   00000010   835B               STD     Y+3, R21
    120            long long x=*((long long *)(p3));
   \   00000012   81EA               LDD     R30, Y+2
   \   00000014   81FB               LDD     R31, Y+3
   \   00000016   8080               LD      R8, Z
   \   00000018   8091               LDD     R9, Z+1
   \   0000001A   80A2               LDD     R10, Z+2
   \   0000001C   80B3               LDD     R11, Z+3
   \   0000001E   80C4               LDD     R12, Z+4
   \   00000020   80D5               LDD     R13, Z+5
   \   00000022   80E6               LDD     R14, Z+6
   \   00000024   80F7               LDD     R15, Z+7
    121            int index=0;
   \   00000026   E0A0               LDI     R26, 0
   \   00000028   E0B0               LDI     R27, 0
    122            USART_transmit('0');
   \   0000002A   E300               LDI     R16, 48
   \   0000002C   ....               RCALL   USART_transmit
    123            USART_transmit('x');
   \   0000002E   E708               LDI     R16, 120
   \   00000030   ....               RCALL   USART_transmit
    124            //char aux[5];
    125            while(x!=0)
   \                     ??hexadecimalTransmit_0:
   \   00000032   0184               MOVW    R17:R16, R9:R8
   \   00000034   0195               MOVW    R19:R18, R11:R10
   \   00000036   01A6               MOVW    R21:R20, R13:R12
   \   00000038   01B7               MOVW    R23:R22, R15:R14
   \   0000003A   0108               MOVW    R1:R0, R17:R16
   \   0000003C   0119               MOVW    R3:R2, R19:R18
   \   0000003E   012A               MOVW    R5:R4, R21:R20
   \   00000040   013B               MOVW    R7:R6, R23:R22
   \   00000042   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000044   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000046   0180               MOVW    R17:R16, R1:R0
   \   00000048   0191               MOVW    R19:R18, R3:R2
   \   0000004A   01A2               MOVW    R21:R20, R5:R4
   \   0000004C   01B3               MOVW    R23:R22, R7:R6
   \   0000004E   ........           CALL    ?LL_CMP_L12
   \   00000052   F141               BREQ    ??hexadecimalTransmit_1
    126            {
    127              aux[index]=x&0x0F;
   \   00000054   0184               MOVW    R17:R16, R9:R8
   \   00000056   0195               MOVW    R19:R18, R11:R10
   \   00000058   700F               ANDI    R16, 0x0F
   \   0000005A   01FD               MOVW    R31:R30, R27:R26
   \   0000005C   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   00000060   8300               ST      Z, R16
    128              if(aux[index]<=9)
   \   00000062   01FD               MOVW    R31:R30, R27:R26
   \   00000064   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   00000068   8100               LD      R16, Z
   \   0000006A   300A               CPI     R16, 10
   \   0000006C   F438               BRCC    ??hexadecimalTransmit_2
    129              {
    130                aux[index]+='0';
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   00000074   8100               LD      R16, Z
   \   00000076   5D00               SUBI    R16, 208
   \   00000078   8300               ST      Z, R16
   \   0000007A   C006               RJMP    ??hexadecimalTransmit_3
    131              }
    132              else
    133              {
    134                aux[index]=aux[index]+'A'-10;
   \                     ??hexadecimalTransmit_2:
   \   0000007C   01FD               MOVW    R31:R30, R27:R26
   \   0000007E   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   00000082   8100               LD      R16, Z
   \   00000084   5C09               SUBI    R16, 201
   \   00000086   8300               ST      Z, R16
    135              }
    136              index++;
   \                     ??hexadecimalTransmit_3:
   \   00000088   9611               ADIW    R27:R26, 1
    137              x>>=4;
   \   0000008A   E0E4               LDI     R30, 4
   \   0000008C   0184               MOVW    R17:R16, R9:R8
   \   0000008E   0195               MOVW    R19:R18, R11:R10
   \   00000090   01A6               MOVW    R21:R20, R13:R12
   \   00000092   01B7               MOVW    R23:R22, R15:R14
   \   00000094   2F8E               MOV     R24, R30
   \   00000096   ........           CALL    ?SLL_SHR_L12
   \   0000009A   0148               MOVW    R9:R8, R17:R16
   \   0000009C   0159               MOVW    R11:R10, R19:R18
   \   0000009E   016A               MOVW    R13:R12, R21:R20
   \   000000A0   017B               MOVW    R15:R14, R23:R22
   \   000000A2   CFC7               RJMP    ??hexadecimalTransmit_0
    138            }
    139            while(p2>0 && index>0)
   \                     ??hexadecimalTransmit_1:
   \   000000A4   8108               LD      R16, Y
   \   000000A6   8119               LDD     R17, Y+1
   \   000000A8   2B01               OR      R16, R17
   \   000000AA   F089               BREQ    ??hexadecimalTransmit_4
   \   000000AC   30A1               CPI     R26, 1
   \   000000AE   E000               LDI     R16, 0
   \   000000B0   07B0               CPC     R27, R16
   \   000000B2   F06C               BRLT    ??hexadecimalTransmit_4
    140            {
    141              USART_transmit(aux[index-1]);
   \   000000B4   01FD               MOVW    R31:R30, R27:R26
   \   000000B6   ....               SUBI    R30, LOW((-(aux - 1) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, HIGH((-(aux - 1) & 0xFFFF))
   \   000000BA   8100               LD      R16, Z
   \   000000BC   ....               RCALL   USART_transmit
    142              index--;
   \   000000BE   9711               SBIW    R27:R26, 1
    143              p2--;
   \   000000C0   8108               LD      R16, Y
   \   000000C2   8119               LDD     R17, Y+1
   \   000000C4   5001               SUBI    R16, 1
   \   000000C6   4010               SBCI    R17, 0
   \   000000C8   8308               ST      Y, R16
   \   000000CA   8319               STD     Y+1, R17
   \   000000CC   CFEB               RJMP    ??hexadecimalTransmit_1
    144            }
    145          }
   \                     ??hexadecimalTransmit_4:
   \   000000CE   9626               ADIW    R29:R28, 6
   \   000000D0   E1E0               LDI     R30, 16
   \   000000D2   ........           JMP     ?EPILOGUE_B16_L09
    146          
    147          //transmiterea unui numãr de tip double pe serialã

   \                                 In  segment CODE, align 2, keep-with-next
    148          void doubleTransmit(unsigned int p1, unsigned int p2, void * p3)
   \                     doubleTransmit:
    149          {
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   0168               MOVW    R13:R12, R17:R16
   \   00000006   0159               MOVW    R11:R10, R19:R18
   \   00000008   014A               MOVW    R9:R8, R21:R20
    150            int index=0;
   \   0000000A   2466               CLR     R6
   \   0000000C   2477               CLR     R7
    151            int dataIntreg;
    152            double x=*((double *)(p3));
   \   0000000E   01F4               MOVW    R31:R30, R9:R8
   \   00000010   8180               LD      R24, Z
   \   00000012   8191               LDD     R25, Z+1
   \   00000014   81A2               LDD     R26, Z+2
   \   00000016   81B3               LDD     R27, Z+3
    153            if(x<0)
   \   00000018   E040               LDI     R20, 0
   \   0000001A   E050               LDI     R21, 0
   \   0000001C   E060               LDI     R22, 0
   \   0000001E   E070               LDI     R23, 0
   \   00000020   018C               MOVW    R17:R16, R25:R24
   \   00000022   019D               MOVW    R19:R18, R27:R26
   \   00000024   ........           CALL    ?F_CMP_LT_L04
   \   00000028   F460               BRCC    ??doubleTransmit_0
    154            { 
    155              USART_transmit('-');
   \   0000002A   E20D               LDI     R16, 45
   \   0000002C   ....               RCALL   USART_transmit
    156              x*=(-1);
   \   0000002E   E040               LDI     R20, 0
   \   00000030   E050               LDI     R21, 0
   \   00000032   E860               LDI     R22, 128
   \   00000034   EB7F               LDI     R23, 191
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   019D               MOVW    R19:R18, R27:R26
   \   0000003A   ........           CALL    ?F_MUL_L04
   \   0000003E   01C8               MOVW    R25:R24, R17:R16
   \   00000040   01D9               MOVW    R27:R26, R19:R18
    157            }
    158            dataIntreg=(int)x;
   \                     ??doubleTransmit_0:
   \   00000042   018C               MOVW    R17:R16, R25:R24
   \   00000044   019D               MOVW    R19:R18, R27:R26
   \   00000046   ........           CALL    ?F2SL_L04
   \   0000004A   0128               MOVW    R5:R4, R17:R16
    159            while((int)dataIntreg!=0)
   \                     ??doubleTransmit_1:
   \   0000004C   2D04               MOV     R16, R4
   \   0000004E   2905               OR      R16, R5
   \   00000050   F0A9               BREQ    ??doubleTransmit_2
    160            {
    161              aux[index]=(int)dataIntreg%10+'0';
   \   00000052   E04A               LDI     R20, 10
   \   00000054   E050               LDI     R21, 0
   \   00000056   0182               MOVW    R17:R16, R5:R4
   \   00000058   ........           CALL    ?SS_DIVMOD_L02
   \   0000005C   5D40               SUBI    R20, 208
   \   0000005E   01F3               MOVW    R31:R30, R7:R6
   \   00000060   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   00000064   8340               ST      Z, R20
    162              index++;
   \   00000066   E001               LDI     R16, 1
   \   00000068   0E60               ADD     R6, R16
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   1E70               ADC     R7, R16
    163              dataIntreg=dataIntreg/10;
   \   0000006E   E04A               LDI     R20, 10
   \   00000070   E050               LDI     R21, 0
   \   00000072   0182               MOVW    R17:R16, R5:R4
   \   00000074   ........           CALL    ?SS_DIVMOD_L02
   \   00000078   0128               MOVW    R5:R4, R17:R16
   \   0000007A   CFE8               RJMP    ??doubleTransmit_1
    164            }
    165            while(index>0 )
   \                     ??doubleTransmit_2:
   \   0000007C   E001               LDI     R16, 1
   \   0000007E   1660               CP      R6, R16
   \   00000080   E000               LDI     R16, 0
   \   00000082   0670               CPC     R7, R16
   \   00000084   F054               BRLT    ??doubleTransmit_3
    166            {
    167              USART_transmit(aux[index-1]);
   \   00000086   01F3               MOVW    R31:R30, R7:R6
   \   00000088   ....               SUBI    R30, LOW((-(aux - 1) & 0xFFFF))
   \   0000008A   ....               SBCI    R31, HIGH((-(aux - 1) & 0xFFFF))
   \   0000008C   8100               LD      R16, Z
   \   0000008E   ....               RCALL   USART_transmit
    168              index--;
   \   00000090   EF0F               LDI     R16, 255
   \   00000092   0E60               ADD     R6, R16
   \   00000094   EF0F               LDI     R16, 255
   \   00000096   1E70               ADC     R7, R16
   \   00000098   CFF1               RJMP    ??doubleTransmit_2
    169            }
    170            dataIntreg=(int)x;
   \                     ??doubleTransmit_3:
   \   0000009A   018C               MOVW    R17:R16, R25:R24
   \   0000009C   019D               MOVW    R19:R18, R27:R26
   \   0000009E   ........           CALL    ?F2SL_L04
   \   000000A2   0128               MOVW    R5:R4, R17:R16
    171            x=x-dataIntreg;
   \   000000A4   0182               MOVW    R17:R16, R5:R4
   \   000000A6   2F21               MOV     R18, R17
   \   000000A8   0F22               LSL     R18
   \   000000AA   0B22               SBC     R18, R18
   \   000000AC   2F32               MOV     R19, R18
   \   000000AE   ........           CALL    ?SL2F_L04
   \   000000B2   01A8               MOVW    R21:R20, R17:R16
   \   000000B4   01B9               MOVW    R23:R22, R19:R18
   \   000000B6   018C               MOVW    R17:R16, R25:R24
   \   000000B8   019D               MOVW    R19:R18, R27:R26
   \   000000BA   ........           CALL    ?F_SUB_L04
   \   000000BE   01C8               MOVW    R25:R24, R17:R16
   \   000000C0   01D9               MOVW    R27:R26, R19:R18
    172            if(x>0)
   \   000000C2   E041               LDI     R20, 1
   \   000000C4   E050               LDI     R21, 0
   \   000000C6   E060               LDI     R22, 0
   \   000000C8   E070               LDI     R23, 0
   \   000000CA   018C               MOVW    R17:R16, R25:R24
   \   000000CC   019D               MOVW    R19:R18, R27:R26
   \   000000CE   ........           CALL    ?F_CMP_GE_L04
   \   000000D2   F410               BRCC    ??doubleTransmit_4
    173            {
    174              USART_transmit('.');
   \   000000D4   E20E               LDI     R16, 46
   \   000000D6   ....               RCALL   USART_transmit
    175            }
    176            while(x>0 && p2>0)
   \                     ??doubleTransmit_4:
   \   000000D8   E041               LDI     R20, 1
   \   000000DA   E050               LDI     R21, 0
   \   000000DC   E060               LDI     R22, 0
   \   000000DE   E070               LDI     R23, 0
   \   000000E0   018C               MOVW    R17:R16, R25:R24
   \   000000E2   019D               MOVW    R19:R18, R27:R26
   \   000000E4   ........           CALL    ?F_CMP_GE_L04
   \   000000E8   F548               BRCC    ??doubleTransmit_5
   \   000000EA   2D0A               MOV     R16, R10
   \   000000EC   290B               OR      R16, R11
   \   000000EE   F131               BREQ    ??doubleTransmit_5
    177            {
    178              x=x*10;
   \   000000F0   E040               LDI     R20, 0
   \   000000F2   E050               LDI     R21, 0
   \   000000F4   E260               LDI     R22, 32
   \   000000F6   E471               LDI     R23, 65
   \   000000F8   018C               MOVW    R17:R16, R25:R24
   \   000000FA   019D               MOVW    R19:R18, R27:R26
   \   000000FC   ........           CALL    ?F_MUL_L04
   \   00000100   01C8               MOVW    R25:R24, R17:R16
   \   00000102   01D9               MOVW    R27:R26, R19:R18
    179              dataIntreg=(int)x;
   \   00000104   018C               MOVW    R17:R16, R25:R24
   \   00000106   019D               MOVW    R19:R18, R27:R26
   \   00000108   ........           CALL    ?F2SL_L04
   \   0000010C   0128               MOVW    R5:R4, R17:R16
    180              USART_transmit(dataIntreg+'0');
   \   0000010E   2D04               MOV     R16, R4
   \   00000110   5D00               SUBI    R16, 208
   \   00000112   ....               RCALL   USART_transmit
    181              x=x-dataIntreg;
   \   00000114   0182               MOVW    R17:R16, R5:R4
   \   00000116   2F21               MOV     R18, R17
   \   00000118   0F22               LSL     R18
   \   0000011A   0B22               SBC     R18, R18
   \   0000011C   2F32               MOV     R19, R18
   \   0000011E   ........           CALL    ?SL2F_L04
   \   00000122   01A8               MOVW    R21:R20, R17:R16
   \   00000124   01B9               MOVW    R23:R22, R19:R18
   \   00000126   018C               MOVW    R17:R16, R25:R24
   \   00000128   019D               MOVW    R19:R18, R27:R26
   \   0000012A   ........           CALL    ?F_SUB_L04
   \   0000012E   01C8               MOVW    R25:R24, R17:R16
   \   00000130   01D9               MOVW    R27:R26, R19:R18
    182              p2--;
   \   00000132   EF0F               LDI     R16, 255
   \   00000134   0EA0               ADD     R10, R16
   \   00000136   EF0F               LDI     R16, 255
   \   00000138   1EB0               ADC     R11, R16
   \   0000013A   CFCE               RJMP    ??doubleTransmit_4
    183            }
    184          }
   \                     ??doubleTransmit_5:
   \   0000013C   E0EE               LDI     R30, 14
   \   0000013E   ........           JMP     ?EPILOGUE_B14_L09
    185          
    186          //transmiterea unui numar de tip float

   \                                 In  segment CODE, align 2, keep-with-next
    187          void floatTransmit(unsigned int p1, unsigned int p2, void * p3)
   \                     floatTransmit:
    188          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   97AA               SBIW    R29:R28, 42
   \   00000006   870A               STD     Y+10, R16
   \   00000008   871B               STD     Y+11, R17
   \   0000000A   8728               STD     Y+8, R18
   \   0000000C   8739               STD     Y+9, R19
   \   0000000E   834E               STD     Y+6, R20
   \   00000010   835F               STD     Y+7, R21
    189            char buff[30]={0};
   \   00000012   018E               MOVW    R17:R16, R29:R28
   \   00000014   5F04               SUBI    R16, 244
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   E020               LDI     R18, 0
   \   0000001C   E18E               LDI     R24, 30
   \                     ??floatTransmit_0:
   \   0000001E   9321               ST      Z+, R18
   \   00000020   958A               DEC     R24
   \   00000022   F7E9               BRNE    ??floatTransmit_0
    190            int j, nrCaract;
    191            long long nr;
    192            char nrNeg;
    193            int i;
    194            float floatNr;
    195            floatNr=*((float *)p3);
   \   00000024   81EE               LDD     R30, Y+6
   \   00000026   81FF               LDD     R31, Y+7
   \   00000028   8100               LD      R16, Z
   \   0000002A   8111               LDD     R17, Z+1
   \   0000002C   8122               LDD     R18, Z+2
   \   0000002E   8133               LDD     R19, Z+3
   \   00000030   0128               MOVW    R5:R4, R17:R16
   \   00000032   0139               MOVW    R7:R6, R19:R18
    196            nrCaract=0;
   \   00000034   E000               LDI     R16, 0
   \   00000036   E010               LDI     R17, 0
   \   00000038   8308               ST      Y, R16
   \   0000003A   8319               STD     Y+1, R17
    197            nr=(long long)floatNr;
   \   0000003C   0182               MOVW    R17:R16, R5:R4
   \   0000003E   0193               MOVW    R19:R18, R7:R6
   \   00000040   ........           CALL    ?F2SLL_L12
   \   00000044   0148               MOVW    R9:R8, R17:R16
   \   00000046   0159               MOVW    R11:R10, R19:R18
   \   00000048   016A               MOVW    R13:R12, R21:R20
   \   0000004A   017B               MOVW    R15:R14, R23:R22
    198            nrNeg=(nr<0);
   \   0000004C   0184               MOVW    R17:R16, R9:R8
   \   0000004E   0195               MOVW    R19:R18, R11:R10
   \   00000050   01A6               MOVW    R21:R20, R13:R12
   \   00000052   01B7               MOVW    R23:R22, R15:R14
   \   00000054   0148               MOVW    R9:R8, R17:R16
   \   00000056   0159               MOVW    R11:R10, R19:R18
   \   00000058   016A               MOVW    R13:R12, R21:R20
   \   0000005A   017B               MOVW    R15:R14, R23:R22
   \   0000005C   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000005E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000060   0184               MOVW    R17:R16, R9:R8
   \   00000062   0195               MOVW    R19:R18, R11:R10
   \   00000064   01A6               MOVW    R21:R20, R13:R12
   \   00000066   01B7               MOVW    R23:R22, R15:R14
   \   00000068   ........           CALL    ?LL_CMP_L12
   \   0000006C   F414               BRGE    ??floatTransmit_1
   \   0000006E   E001               LDI     R16, 1
   \   00000070   C001               RJMP    ??floatTransmit_2
   \                     ??floatTransmit_1:
   \   00000072   E000               LDI     R16, 0
   \                     ??floatTransmit_2:
   \   00000074   2F90               MOV     R25, R16
    199            if (nrNeg)
   \   00000076   2399               TST     R25
   \   00000078   F061               BREQ    ??floatTransmit_3
    200              nr*=-1;
   \   0000007A   0184               MOVW    R17:R16, R9:R8
   \   0000007C   0195               MOVW    R19:R18, R11:R10
   \   0000007E   01A6               MOVW    R21:R20, R13:R12
   \   00000080   01B7               MOVW    R23:R22, R15:R14
   \   00000082   ....               LDI     R26, LOW(__Constant_ffffffff_ffffffff)
   \   00000084   ....               LDI     R27, (__Constant_ffffffff_ffffffff) >> 8
   \   00000086   ........           CALL    ?LL_MUL_L12
   \   0000008A   0148               MOVW    R9:R8, R17:R16
   \   0000008C   0159               MOVW    R11:R10, R19:R18
   \   0000008E   016A               MOVW    R13:R12, R21:R20
   \   00000090   017B               MOVW    R15:R14, R23:R22
    201            while(nr!=0)
   \                     ??floatTransmit_3:
   \   00000092   0184               MOVW    R17:R16, R9:R8
   \   00000094   0195               MOVW    R19:R18, R11:R10
   \   00000096   01A6               MOVW    R21:R20, R13:R12
   \   00000098   01B7               MOVW    R23:R22, R15:R14
   \   0000009A   0148               MOVW    R9:R8, R17:R16
   \   0000009C   0159               MOVW    R11:R10, R19:R18
   \   0000009E   016A               MOVW    R13:R12, R21:R20
   \   000000A0   017B               MOVW    R15:R14, R23:R22
   \   000000A2   ....               LDI     R30, LOW(__Constant_0_0)
   \   000000A4   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000000A6   0184               MOVW    R17:R16, R9:R8
   \   000000A8   0195               MOVW    R19:R18, R11:R10
   \   000000AA   01A6               MOVW    R21:R20, R13:R12
   \   000000AC   01B7               MOVW    R23:R22, R15:R14
   \   000000AE   ........           CALL    ?LL_CMP_L12
   \   000000B2   F179               BREQ    ??floatTransmit_4
    202            {
    203              j=nr%10;
   \   000000B4   0184               MOVW    R17:R16, R9:R8
   \   000000B6   0195               MOVW    R19:R18, R11:R10
   \   000000B8   01A6               MOVW    R21:R20, R13:R12
   \   000000BA   01B7               MOVW    R23:R22, R15:R14
   \   000000BC   0148               MOVW    R9:R8, R17:R16
   \   000000BE   0159               MOVW    R11:R10, R19:R18
   \   000000C0   016A               MOVW    R13:R12, R21:R20
   \   000000C2   017B               MOVW    R15:R14, R23:R22
   \   000000C4   ....               LDI     R26, LOW(__Constant_a_0)
   \   000000C6   ....               LDI     R27, (__Constant_a_0) >> 8
   \   000000C8   0184               MOVW    R17:R16, R9:R8
   \   000000CA   0195               MOVW    R19:R18, R11:R10
   \   000000CC   01A6               MOVW    R21:R20, R13:R12
   \   000000CE   01B7               MOVW    R23:R22, R15:R14
   \   000000D0   ........           CALL    ?SLL_MOD_L12
   \   000000D4   830C               STD     Y+4, R16
   \   000000D6   831D               STD     Y+5, R17
    204              nr=nr/10;
   \   000000D8   0184               MOVW    R17:R16, R9:R8
   \   000000DA   0195               MOVW    R19:R18, R11:R10
   \   000000DC   01A6               MOVW    R21:R20, R13:R12
   \   000000DE   01B7               MOVW    R23:R22, R15:R14
   \   000000E0   ....               LDI     R26, LOW(__Constant_a_0)
   \   000000E2   ....               LDI     R27, (__Constant_a_0) >> 8
   \   000000E4   ........           CALL    ?SLL_DIV_L12
   \   000000E8   0148               MOVW    R9:R8, R17:R16
   \   000000EA   0159               MOVW    R11:R10, R19:R18
   \   000000EC   016A               MOVW    R13:R12, R21:R20
   \   000000EE   017B               MOVW    R15:R14, R23:R22
    205              buff[nrCaract]=j+'0';
   \   000000F0   812C               LDD     R18, Y+4
   \   000000F2   813D               LDD     R19, Y+5
   \   000000F4   5D20               SUBI    R18, 208
   \   000000F6   01FE               MOVW    R31:R30, R29:R28
   \   000000F8   963C               ADIW    R31:R30, 12
   \   000000FA   8108               LD      R16, Y
   \   000000FC   8119               LDD     R17, Y+1
   \   000000FE   0FE0               ADD     R30, R16
   \   00000100   1FF1               ADC     R31, R17
   \   00000102   8320               ST      Z, R18
    206              nrCaract++;
   \   00000104   8108               LD      R16, Y
   \   00000106   8119               LDD     R17, Y+1
   \   00000108   5F0F               SUBI    R16, 255
   \   0000010A   4F1F               SBCI    R17, 255
   \   0000010C   8308               ST      Y, R16
   \   0000010E   8319               STD     Y+1, R17
   \   00000110   CFC0               RJMP    ??floatTransmit_3
    207            }
    208            if(nrCaract ==0)
   \                     ??floatTransmit_4:
   \   00000112   8108               LD      R16, Y
   \   00000114   8119               LDD     R17, Y+1
   \   00000116   2B01               OR      R16, R17
   \   00000118   F431               BRNE    ??floatTransmit_5
    209            {
    210              buff[0]='0';
   \   0000011A   E300               LDI     R16, 48
   \   0000011C   870C               STD     Y+12, R16
    211              nrCaract=1;
   \   0000011E   E001               LDI     R16, 1
   \   00000120   E010               LDI     R17, 0
   \   00000122   8308               ST      Y, R16
   \   00000124   8319               STD     Y+1, R17
    212            }
    213            if(nrNeg)
   \                     ??floatTransmit_5:
   \   00000126   2399               TST     R25
   \   00000128   F071               BREQ    ??floatTransmit_6
    214            {
    215              buff[nrCaract]='-';
   \   0000012A   E21D               LDI     R17, 45
   \   0000012C   01FE               MOVW    R31:R30, R29:R28
   \   0000012E   963C               ADIW    R31:R30, 12
   \   00000130   8128               LD      R18, Y
   \   00000132   8139               LDD     R19, Y+1
   \   00000134   0FE2               ADD     R30, R18
   \   00000136   1FF3               ADC     R31, R19
   \   00000138   8310               ST      Z, R17
    216              nrCaract++;
   \   0000013A   8108               LD      R16, Y
   \   0000013C   8119               LDD     R17, Y+1
   \   0000013E   5F0F               SUBI    R16, 255
   \   00000140   4F1F               SBCI    R17, 255
   \   00000142   8308               ST      Y, R16
   \   00000144   8319               STD     Y+1, R17
    217            }
    218            for(i=nrCaract-1; i>=0; i--)
   \                     ??floatTransmit_6:
   \   00000146   8108               LD      R16, Y
   \   00000148   8119               LDD     R17, Y+1
   \   0000014A   5001               SUBI    R16, 1
   \   0000014C   4010               SBCI    R17, 0
   \   0000014E   830A               STD     Y+2, R16
   \   00000150   831B               STD     Y+3, R17
   \                     ??floatTransmit_7:
   \   00000152   812A               LDD     R18, Y+2
   \   00000154   813B               LDD     R19, Y+3
   \   00000156   2333               TST     R19
   \   00000158   F07A               BRMI    ??floatTransmit_8
    219            {
    220              USART_transmit(buff[i]);
   \   0000015A   01FE               MOVW    R31:R30, R29:R28
   \   0000015C   963C               ADIW    R31:R30, 12
   \   0000015E   810A               LDD     R16, Y+2
   \   00000160   811B               LDD     R17, Y+3
   \   00000162   0FE0               ADD     R30, R16
   \   00000164   1FF1               ADC     R31, R17
   \   00000166   8100               LD      R16, Z
   \   00000168   ....               RCALL   USART_transmit
    221            }
   \   0000016A   810A               LDD     R16, Y+2
   \   0000016C   811B               LDD     R17, Y+3
   \   0000016E   5001               SUBI    R16, 1
   \   00000170   4010               SBCI    R17, 0
   \   00000172   830A               STD     Y+2, R16
   \   00000174   831B               STD     Y+3, R17
   \   00000176   CFED               RJMP    ??floatTransmit_7
    222            USART_transmit('.');
   \                     ??floatTransmit_8:
   \   00000178   E20E               LDI     R16, 46
   \   0000017A   ....               RCALL   USART_transmit
    223            if (floatNr<0)
   \   0000017C   E040               LDI     R20, 0
   \   0000017E   E050               LDI     R21, 0
   \   00000180   E060               LDI     R22, 0
   \   00000182   E070               LDI     R23, 0
   \   00000184   0182               MOVW    R17:R16, R5:R4
   \   00000186   0193               MOVW    R19:R18, R7:R6
   \   00000188   ........           CALL    ?F_CMP_LT_L04
   \   0000018C   F450               BRCC    ??floatTransmit_9
    224              floatNr*=-1;
   \   0000018E   E040               LDI     R20, 0
   \   00000190   E050               LDI     R21, 0
   \   00000192   E860               LDI     R22, 128
   \   00000194   EB7F               LDI     R23, 191
   \   00000196   0182               MOVW    R17:R16, R5:R4
   \   00000198   0193               MOVW    R19:R18, R7:R6
   \   0000019A   ........           CALL    ?F_MUL_L04
   \   0000019E   0128               MOVW    R5:R4, R17:R16
   \   000001A0   0139               MOVW    R7:R6, R19:R18
    225            for (i=0; i<p2; i++)
   \                     ??floatTransmit_9:
   \   000001A2   E000               LDI     R16, 0
   \   000001A4   E010               LDI     R17, 0
   \   000001A6   830A               STD     Y+2, R16
   \   000001A8   831B               STD     Y+3, R17
   \                     ??floatTransmit_10:
   \   000001AA   810A               LDD     R16, Y+2
   \   000001AC   811B               LDD     R17, Y+3
   \   000001AE   8528               LDD     R18, Y+8
   \   000001B0   8539               LDD     R19, Y+9
   \   000001B2   1702               CP      R16, R18
   \   000001B4   0713               CPC     R17, R19
   \   000001B6   F598               BRCC    ??floatTransmit_11
    226            {
    227              floatNr=floatNr-(long long)floatNr;
   \   000001B8   0182               MOVW    R17:R16, R5:R4
   \   000001BA   0193               MOVW    R19:R18, R7:R6
   \   000001BC   ........           CALL    ?F2SLL_L12
   \   000001C0   ........           CALL    ?SLL2F_L12
   \   000001C4   01A8               MOVW    R21:R20, R17:R16
   \   000001C6   01B9               MOVW    R23:R22, R19:R18
   \   000001C8   0182               MOVW    R17:R16, R5:R4
   \   000001CA   0193               MOVW    R19:R18, R7:R6
   \   000001CC   ........           CALL    ?F_SUB_L04
   \   000001D0   0128               MOVW    R5:R4, R17:R16
   \   000001D2   0139               MOVW    R7:R6, R19:R18
    228              floatNr*=10;
   \   000001D4   E040               LDI     R20, 0
   \   000001D6   E050               LDI     R21, 0
   \   000001D8   E260               LDI     R22, 32
   \   000001DA   E471               LDI     R23, 65
   \   000001DC   0182               MOVW    R17:R16, R5:R4
   \   000001DE   0193               MOVW    R19:R18, R7:R6
   \   000001E0   ........           CALL    ?F_MUL_L04
   \   000001E4   0128               MOVW    R5:R4, R17:R16
   \   000001E6   0139               MOVW    R7:R6, R19:R18
    229              nr=(int)floatNr;
   \   000001E8   0182               MOVW    R17:R16, R5:R4
   \   000001EA   0193               MOVW    R19:R18, R7:R6
   \   000001EC   ........           CALL    ?F2SL_L04
   \   000001F0   2F21               MOV     R18, R17
   \   000001F2   0F22               LSL     R18
   \   000001F4   0B22               SBC     R18, R18
   \   000001F6   2F32               MOV     R19, R18
   \   000001F8   2F42               MOV     R20, R18
   \   000001FA   2F52               MOV     R21, R18
   \   000001FC   2F62               MOV     R22, R18
   \   000001FE   2F72               MOV     R23, R18
   \   00000200   0148               MOVW    R9:R8, R17:R16
   \   00000202   0159               MOVW    R11:R10, R19:R18
   \   00000204   016A               MOVW    R13:R12, R21:R20
   \   00000206   017B               MOVW    R15:R14, R23:R22
    230              USART_transmit(nr+'0');
   \   00000208   0184               MOVW    R17:R16, R9:R8
   \   0000020A   0195               MOVW    R19:R18, R11:R10
   \   0000020C   5D00               SUBI    R16, 208
   \   0000020E   ....               RCALL   USART_transmit
    231            }
   \   00000210   810A               LDD     R16, Y+2
   \   00000212   811B               LDD     R17, Y+3
   \   00000214   5F0F               SUBI    R16, 255
   \   00000216   4F1F               SBCI    R17, 255
   \   00000218   830A               STD     Y+2, R16
   \   0000021A   831B               STD     Y+3, R17
   \   0000021C   CFC6               RJMP    ??floatTransmit_10
    232          }
   \                     ??floatTransmit_11:
   \   0000021E   96AA               ADIW    R29:R28, 42
   \   00000220   E1E0               LDI     R30, 16
   \   00000222   ........           JMP     ?EPILOGUE_B16_L09
    233          
    234          //transmiterea unui .ir de caractere pe seriala

   \                                 In  segment CODE, align 2, keep-with-next
    235          void characterTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     characterTransmit:
    236          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
    237            unsigned char *x=(unsigned char *)(p3);
   \   0000000A   0142               MOVW    R9:R8, R5:R4
    238            int index=0;
   \   0000000C   2466               CLR     R6
   \   0000000E   2477               CLR     R7
    239            while(index!=p2)
   \                     ??characterTransmit_0:
   \   00000010   166A               CP      R6, R26
   \   00000012   067B               CPC     R7, R27
   \   00000014   F051               BREQ    ??characterTransmit_1
    240            {
    241              USART_transmit(x[index]);
   \   00000016   01F4               MOVW    R31:R30, R9:R8
   \   00000018   0DE6               ADD     R30, R6
   \   0000001A   1DF7               ADC     R31, R7
   \   0000001C   8100               LD      R16, Z
   \   0000001E   ....               RCALL   USART_transmit
    242              index++;
   \   00000020   E001               LDI     R16, 1
   \   00000022   0E60               ADD     R6, R16
   \   00000024   E000               LDI     R16, 0
   \   00000026   1E70               ADC     R7, R16
   \   00000028   CFF3               RJMP    ??characterTransmit_0
    243            }
    244          }
   \                     ??characterTransmit_1:
   \   0000002A   E0EA               LDI     R30, 10
   \   0000002C   ........           JMP     ?EPILOGUE_B10_L09

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   000000000000       DD 0, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_0_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_1`:
   \   00000000   FFFFFFFFFFFF       DD 4294967295, 4294967295
   \              FFFF        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_ffffffff_ffffffff:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_1`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_2`:
   \   00000000   000A00000000       DD 10, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_a_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_2`

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for myprint>_0`:
   \   00000000   0000               DW      0
   \   00000002   00                 DB      0
   \   00000003   ....               DW      (??myprint_1) /2
   \   00000005   0006               DW      6
   \   00000007   ....               DW      (??myprint_0) /2
   \   00000009   ....               DW      (??myprint_2) /2
   \   0000000B   ....               DW      (??myprint_3) /2
   \   0000000D   ....               DW      (??myprint_4) /2
   \   0000000F   ....               DW      (??myprint_5) /2
   \   00000011   ....               DW      (??myprint_6) /2
   \   00000013   00                 DB      0

   \                                 In  segment NEAR_F, align 1, keep-with-next
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       0      2  USART_Receive
       0      2  USART_initialize
       0      2  USART_transmit
      10      2  characterTransmit
                   10 2 -> USART_transmit
      14      4  doubleTransmit
                   14 2 -> USART_transmit
      58      4  floatTransmit
                   58 2 -> USART_transmit
      22      4  hexadecimalTransmit
                   22 2 -> USART_transmit
      10      4  integerTransmit
                   10 2 -> USART_transmit
      10      4  longTransmit
                   10 2 -> USART_transmit
       6      2  myprint
                    6 2 -> characterTransmit
                    6 2 -> doubleTransmit
                    6 2 -> floatTransmit
                    6 2 -> hexadecimalTransmit
                    6 2 -> integerTransmit
                    6 2 -> longTransmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  ?<Constant {0}>
       8  ?<Initializer for 64 Bit Constant>_0
       8  ?<Initializer for 64 Bit Constant>_1
       8  ?<Initializer for 64 Bit Constant>_2
      20  ?<Jumptable for myprint>_0
       8  USART_Receive
      26  USART_initialize
       8  USART_transmit
       1  _A_DDRD
       1  _A_UBRRH
       1  _A_UBRRL
       1  _A_UCSRA
       1  _A_UCSRB
       1  _A_UDR
       8  __Constant_0_0
       8  __Constant_a_0
       8  __Constant_ffffffff_ffffffff
      48  characterTransmit
     322  doubleTransmit
     550  floatTransmit
     214  hexadecimalTransmit
     124  integerTransmit
     124  longTransmit
      82  myprint
       6  -- Other

 
     6 bytes in segment ABSOLUTE
 1 506 bytes in segment CODE
     6 bytes in segment INITTAB
    30 bytes in segment NEAR_F
    24 bytes in segment NEAR_I
    24 bytes in segment NEAR_ID
    20 bytes in segment SWITCH
 
 1 556 bytes of CODE memory (+ 30 bytes shared)
     0 bytes of DATA memory (+ 30 bytes shared)

Errors: none
Warnings: none

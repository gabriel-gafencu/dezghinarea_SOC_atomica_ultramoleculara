###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        21/Dec/2014  12:30:33 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\wdper\fct.c                                     #
#    Command line =  D:\1307B\wdper\fct.c --cpu=m16 -ms -o                    #
#                    D:\1307B\wdper\Debug\Obj\ -lC                            #
#                    D:\1307B\wdper\Debug\List\ -lA                           #
#                    D:\1307B\wdper\Debug\List\ --initializers_in_flash       #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\wdper\Debug\List\fct.lst                        #
#    Object file  =  D:\1307B\wdper\Debug\Obj\fct.r90                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\wdper\fct.c
      1          #include "usart.h"
      2          #include "fct.h"
      3          

   \                                 In  segment CODE, align 2, keep-with-next
      4          void myprint(unsigned int tip, unsigned int nr_car, void * val)
   \                     myprint:
      5          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
      6          switch(tip)
   \   0000000A   018C               MOVW    R17:R16, R25:R24
   \   0000000C   ....               LDI     R30, LOW(`?<Jumptable for myprint>_0`)
   \   0000000E   ....               LDI     R31, (`?<Jumptable for myprint>_0`) >> 8
   \   00000010   ........           JMP     ?SV_SWITCH_L06
      7          {
      8          case 0:
      9          integerTransmit(tip, nr_car, val);
   \                     ??myprint_0:
   \   00000014   01AD               MOVW    R21:R20, R27:R26
   \   00000016   0192               MOVW    R19:R18, R5:R4
   \   00000018   018C               MOVW    R17:R16, R25:R24
   \   0000001A   ....               RCALL   integerTransmit
     10          break;
   \   0000001C   C00E               RJMP    ??myprint_1
     11          case 1:
     12          hexadecimalTransmit(tip, nr_car, val);
   \                     ??myprint_2:
   \   0000001E   01AD               MOVW    R21:R20, R27:R26
   \   00000020   0192               MOVW    R19:R18, R5:R4
   \   00000022   018C               MOVW    R17:R16, R25:R24
   \   00000024   ....               RCALL   hexadecimalTransmit
     13          break;
   \   00000026   C009               RJMP    ??myprint_1
     14          case 2:
     15          doubleTransmit(tip, nr_car, val);
   \                     ??myprint_3:
   \   00000028   01AD               MOVW    R21:R20, R27:R26
   \   0000002A   0192               MOVW    R19:R18, R5:R4
   \   0000002C   018C               MOVW    R17:R16, R25:R24
   \   0000002E   ....               RCALL   doubleTransmit
     16          break;
   \   00000030   C004               RJMP    ??myprint_1
     17          case 3:
     18          characterTransmit(tip, nr_car, val);
   \                     ??myprint_4:
   \   00000032   01AD               MOVW    R21:R20, R27:R26
   \   00000034   0192               MOVW    R19:R18, R5:R4
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   ....               RCALL   characterTransmit
     19          break;
     20          }
     21          }
   \                     ??myprint_1:
   \   0000003A   E0E6               LDI     R30, 6
   \   0000003C   ........           JMP     ?EPILOGUE_B6_L09
     22          //transmiterea unui întreg pe serialã

   \                                 In  segment CODE, align 2, keep-with-next
     23          void integerTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     integerTransmit:
     24          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   0148               MOVW    R9:R8, R17:R16
   \   00000008   0129               MOVW    R5:R4, R19:R18
   \   0000000A   01DA               MOVW    R27:R26, R21:R20
     25          int index=0;
   \   0000000C   E080               LDI     R24, 0
   \   0000000E   E090               LDI     R25, 0
     26          char aux[5];
     27          int x=*((int *)(p3));
   \   00000010   906D               LD      R6, X+
   \   00000012   907C               LD      R7, X
   \   00000014   9711               SBIW    R27:R26, 1
     28          if(x<0)
   \   00000016   2077               TST     R7
   \   00000018   F44A               BRPL    ??integerTransmit_0
     29          {
     30          USART_transmit('-');
   \   0000001A   E20D               LDI     R16, 45
   \   0000001C   ........           CALL    USART_transmit
     31          x*=(-1);
   \   00000020   EF4F               LDI     R20, 255
   \   00000022   EF5F               LDI     R21, 255
   \   00000024   0183               MOVW    R17:R16, R7:R6
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   0138               MOVW    R7:R6, R17:R16
     32          }
     33          while(x!=0)
   \                     ??integerTransmit_0:
   \   0000002C   2D06               MOV     R16, R6
   \   0000002E   2907               OR      R16, R7
   \   00000030   F091               BREQ    ??integerTransmit_1
     34          {
     35           /* switch(aux[index])
     36            {
     37            case "+*/
     38          aux[index]=x%10+'0';
   \   00000032   E04A               LDI     R20, 10
   \   00000034   E050               LDI     R21, 0
   \   00000036   0183               MOVW    R17:R16, R7:R6
   \   00000038   ........           CALL    ?SS_DIVMOD_L02
   \   0000003C   5D40               SUBI    R20, 208
   \   0000003E   01FE               MOVW    R31:R30, R29:R28
   \   00000040   0FE8               ADD     R30, R24
   \   00000042   1FF9               ADC     R31, R25
   \   00000044   8340               ST      Z, R20
     39          index++;
   \   00000046   9601               ADIW    R25:R24, 1
     40          x=x/10;
   \   00000048   E04A               LDI     R20, 10
   \   0000004A   E050               LDI     R21, 0
   \   0000004C   0183               MOVW    R17:R16, R7:R6
   \   0000004E   ........           CALL    ?SS_DIVMOD_L02
   \   00000052   0138               MOVW    R7:R6, R17:R16
   \   00000054   CFEB               RJMP    ??integerTransmit_0
     41          }
     42          while(p2>0 )
   \                     ??integerTransmit_1:
   \   00000056   2D04               MOV     R16, R4
   \   00000058   2905               OR      R16, R5
   \   0000005A   F069               BREQ    ??integerTransmit_2
     43          {
     44          USART_transmit(aux[index-1]);
   \   0000005C   01FE               MOVW    R31:R30, R29:R28
   \   0000005E   0FE8               ADD     R30, R24
   \   00000060   1FF9               ADC     R31, R25
   \   00000062   9731               SBIW    R31:R30, 1
   \   00000064   8100               LD      R16, Z
   \   00000066   ........           CALL    USART_transmit
     45          index--;
   \   0000006A   9701               SBIW    R25:R24, 1
     46          p2--;
   \   0000006C   EF0F               LDI     R16, 255
   \   0000006E   0E40               ADD     R4, R16
   \   00000070   EF0F               LDI     R16, 255
   \   00000072   1E50               ADC     R5, R16
   \   00000074   CFF0               RJMP    ??integerTransmit_1
     47          }
     48          }
   \                     ??integerTransmit_2:
   \   00000076   9625               ADIW    R29:R28, 5
   \   00000078   E0EA               LDI     R30, 10
   \   0000007A   ........           JMP     ?EPILOGUE_B10_L09
     49          //transmiterea unui numãr hexazecimal pe serialã

   \                                 In  segment CODE, align 2, keep-with-next
     50          void hexadecimalTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     hexadecimalTransmit:
     51          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   972B               SBIW    R29:R28, 11
   \   00000006   8709               STD     Y+9, R16
   \   00000008   871A               STD     Y+10, R17
   \   0000000A   8328               ST      Y, R18
   \   0000000C   8339               STD     Y+1, R19
   \   0000000E   834F               STD     Y+7, R20
   \   00000010   8758               STD     Y+8, R21
     52            long long x=*((long long *)(p3));
   \   00000012   81EF               LDD     R30, Y+7
   \   00000014   85F8               LDD     R31, Y+8
   \   00000016   8080               LD      R8, Z
   \   00000018   8091               LDD     R9, Z+1
   \   0000001A   80A2               LDD     R10, Z+2
   \   0000001C   80B3               LDD     R11, Z+3
   \   0000001E   80C4               LDD     R12, Z+4
   \   00000020   80D5               LDD     R13, Z+5
   \   00000022   80E6               LDD     R14, Z+6
   \   00000024   80F7               LDD     R15, Z+7
     53            char aux[5];
     54            int index=0;
   \   00000026   E0A0               LDI     R26, 0
   \   00000028   E0B0               LDI     R27, 0
     55            USART_transmit('0');
   \   0000002A   E300               LDI     R16, 48
   \   0000002C   ........           CALL    USART_transmit
     56            USART_transmit('x');
   \   00000030   E708               LDI     R16, 120
   \   00000032   ........           CALL    USART_transmit
     57            while(x!=0)
   \                     ??hexadecimalTransmit_0:
   \   00000036   0184               MOVW    R17:R16, R9:R8
   \   00000038   0195               MOVW    R19:R18, R11:R10
   \   0000003A   01A6               MOVW    R21:R20, R13:R12
   \   0000003C   01B7               MOVW    R23:R22, R15:R14
   \   0000003E   0108               MOVW    R1:R0, R17:R16
   \   00000040   0119               MOVW    R3:R2, R19:R18
   \   00000042   012A               MOVW    R5:R4, R21:R20
   \   00000044   013B               MOVW    R7:R6, R23:R22
   \   00000046   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000048   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000004A   0180               MOVW    R17:R16, R1:R0
   \   0000004C   0191               MOVW    R19:R18, R3:R2
   \   0000004E   01A2               MOVW    R21:R20, R5:R4
   \   00000050   01B3               MOVW    R23:R22, R7:R6
   \   00000052   ........           CALL    ?LL_CMP_L12
   \   00000056   F161               BREQ    ??hexadecimalTransmit_1
     58            {
     59              aux[index]=x&0x0F;
   \   00000058   0184               MOVW    R17:R16, R9:R8
   \   0000005A   0195               MOVW    R19:R18, R11:R10
   \   0000005C   700F               ANDI    R16, 0x0F
   \   0000005E   01FE               MOVW    R31:R30, R29:R28
   \   00000060   9632               ADIW    R31:R30, 2
   \   00000062   0FEA               ADD     R30, R26
   \   00000064   1FFB               ADC     R31, R27
   \   00000066   8300               ST      Z, R16
     60              if(aux[index]<=9)
   \   00000068   01FE               MOVW    R31:R30, R29:R28
   \   0000006A   9632               ADIW    R31:R30, 2
   \   0000006C   0FEA               ADD     R30, R26
   \   0000006E   1FFB               ADC     R31, R27
   \   00000070   8100               LD      R16, Z
   \   00000072   300A               CPI     R16, 10
   \   00000074   F440               BRCC    ??hexadecimalTransmit_2
     61              {
     62                aux[index]+='0';
   \   00000076   01FE               MOVW    R31:R30, R29:R28
   \   00000078   9632               ADIW    R31:R30, 2
   \   0000007A   0FEA               ADD     R30, R26
   \   0000007C   1FFB               ADC     R31, R27
   \   0000007E   8100               LD      R16, Z
   \   00000080   5D00               SUBI    R16, 208
   \   00000082   8300               ST      Z, R16
   \   00000084   C007               RJMP    ??hexadecimalTransmit_3
     63              }
     64              else
     65              {
     66                aux[index]=aux[index]+'A'-10;
   \                     ??hexadecimalTransmit_2:
   \   00000086   01FE               MOVW    R31:R30, R29:R28
   \   00000088   9632               ADIW    R31:R30, 2
   \   0000008A   0FEA               ADD     R30, R26
   \   0000008C   1FFB               ADC     R31, R27
   \   0000008E   8100               LD      R16, Z
   \   00000090   5C09               SUBI    R16, 201
   \   00000092   8300               ST      Z, R16
     67              }
     68              index++;
   \                     ??hexadecimalTransmit_3:
   \   00000094   9611               ADIW    R27:R26, 1
     69              x>>=4;
   \   00000096   E0E4               LDI     R30, 4
   \   00000098   0184               MOVW    R17:R16, R9:R8
   \   0000009A   0195               MOVW    R19:R18, R11:R10
   \   0000009C   01A6               MOVW    R21:R20, R13:R12
   \   0000009E   01B7               MOVW    R23:R22, R15:R14
   \   000000A0   2F8E               MOV     R24, R30
   \   000000A2   ........           CALL    ?SLL_SHR_L12
   \   000000A6   0148               MOVW    R9:R8, R17:R16
   \   000000A8   0159               MOVW    R11:R10, R19:R18
   \   000000AA   016A               MOVW    R13:R12, R21:R20
   \   000000AC   017B               MOVW    R15:R14, R23:R22
   \   000000AE   CFC3               RJMP    ??hexadecimalTransmit_0
     70            }
     71            while(p2>0 && index>0)
   \                     ??hexadecimalTransmit_1:
   \   000000B0   8108               LD      R16, Y
   \   000000B2   8119               LDD     R17, Y+1
   \   000000B4   2B01               OR      R16, R17
   \   000000B6   F0A1               BREQ    ??hexadecimalTransmit_4
   \   000000B8   30A1               CPI     R26, 1
   \   000000BA   E000               LDI     R16, 0
   \   000000BC   07B0               CPC     R27, R16
   \   000000BE   F084               BRLT    ??hexadecimalTransmit_4
     72            {
     73              USART_transmit(aux[index-1]);
   \   000000C0   01FE               MOVW    R31:R30, R29:R28
   \   000000C2   9632               ADIW    R31:R30, 2
   \   000000C4   0FEA               ADD     R30, R26
   \   000000C6   1FFB               ADC     R31, R27
   \   000000C8   9731               SBIW    R31:R30, 1
   \   000000CA   8100               LD      R16, Z
   \   000000CC   ........           CALL    USART_transmit
     74              index--;
   \   000000D0   9711               SBIW    R27:R26, 1
     75              p2--;
   \   000000D2   8108               LD      R16, Y
   \   000000D4   8119               LDD     R17, Y+1
   \   000000D6   5001               SUBI    R16, 1
   \   000000D8   4010               SBCI    R17, 0
   \   000000DA   8308               ST      Y, R16
   \   000000DC   8319               STD     Y+1, R17
   \   000000DE   CFE8               RJMP    ??hexadecimalTransmit_1
     76            }
     77          }
   \                     ??hexadecimalTransmit_4:
   \   000000E0   962B               ADIW    R29:R28, 11
   \   000000E2   E1E0               LDI     R30, 16
   \   000000E4   ........           JMP     ?EPILOGUE_B16_L09
     78          
     79          //transmiterea unui numãr de tip double pe serialã

   \                                 In  segment CODE, align 2, keep-with-next
     80          void doubleTransmit(unsigned int p1, unsigned int p2, void * p3)
   \                     doubleTransmit:
     81          {
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   0168               MOVW    R13:R12, R17:R16
   \   00000008   0159               MOVW    R11:R10, R19:R18
   \   0000000A   014A               MOVW    R9:R8, R21:R20
     82          int index=0;
   \   0000000C   2466               CLR     R6
   \   0000000E   2477               CLR     R7
     83          int dataIntreg;
     84          char aux[5];
     85          double x=*((double *)(p3));
   \   00000010   01F4               MOVW    R31:R30, R9:R8
   \   00000012   8180               LD      R24, Z
   \   00000014   8191               LDD     R25, Z+1
   \   00000016   81A2               LDD     R26, Z+2
   \   00000018   81B3               LDD     R27, Z+3
     86          if(x<0)
   \   0000001A   E040               LDI     R20, 0
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   E060               LDI     R22, 0
   \   00000020   E070               LDI     R23, 0
   \   00000022   018C               MOVW    R17:R16, R25:R24
   \   00000024   019D               MOVW    R19:R18, R27:R26
   \   00000026   ........           CALL    ?F_CMP_LT_L04
   \   0000002A   F468               BRCC    ??doubleTransmit_0
     87          {
     88            USART_transmit('-');
   \   0000002C   E20D               LDI     R16, 45
   \   0000002E   ........           CALL    USART_transmit
     89          x*=(-1.0);
   \   00000032   E040               LDI     R20, 0
   \   00000034   E050               LDI     R21, 0
   \   00000036   E860               LDI     R22, 128
   \   00000038   EB7F               LDI     R23, 191
   \   0000003A   018C               MOVW    R17:R16, R25:R24
   \   0000003C   019D               MOVW    R19:R18, R27:R26
   \   0000003E   ........           CALL    ?F_MUL_L04
   \   00000042   01C8               MOVW    R25:R24, R17:R16
   \   00000044   01D9               MOVW    R27:R26, R19:R18
     90          }
     91          dataIntreg=(int)x;
   \                     ??doubleTransmit_0:
   \   00000046   018C               MOVW    R17:R16, R25:R24
   \   00000048   019D               MOVW    R19:R18, R27:R26
   \   0000004A   ........           CALL    ?F2SL_L04
   \   0000004E   0128               MOVW    R5:R4, R17:R16
     92          while((int)dataIntreg!=0)
   \                     ??doubleTransmit_1:
   \   00000050   2D04               MOV     R16, R4
   \   00000052   2905               OR      R16, R5
   \   00000054   F0A9               BREQ    ??doubleTransmit_2
     93          {
     94          aux[index]=(int)dataIntreg%10+'0';
   \   00000056   E04A               LDI     R20, 10
   \   00000058   E050               LDI     R21, 0
   \   0000005A   0182               MOVW    R17:R16, R5:R4
   \   0000005C   ........           CALL    ?SS_DIVMOD_L02
   \   00000060   5D40               SUBI    R20, 208
   \   00000062   01FE               MOVW    R31:R30, R29:R28
   \   00000064   0DE6               ADD     R30, R6
   \   00000066   1DF7               ADC     R31, R7
   \   00000068   8340               ST      Z, R20
     95          index++;
   \   0000006A   E001               LDI     R16, 1
   \   0000006C   0E60               ADD     R6, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   1E70               ADC     R7, R16
     96          dataIntreg=dataIntreg/10;
   \   00000072   E04A               LDI     R20, 10
   \   00000074   E050               LDI     R21, 0
   \   00000076   0182               MOVW    R17:R16, R5:R4
   \   00000078   ........           CALL    ?SS_DIVMOD_L02
   \   0000007C   0128               MOVW    R5:R4, R17:R16
   \   0000007E   CFE8               RJMP    ??doubleTransmit_1
     97          }
     98          while(index>0 )
   \                     ??doubleTransmit_2:
   \   00000080   E001               LDI     R16, 1
   \   00000082   1660               CP      R6, R16
   \   00000084   E000               LDI     R16, 0
   \   00000086   0670               CPC     R7, R16
   \   00000088   F064               BRLT    ??doubleTransmit_3
     99          {
    100          USART_transmit(aux[index-1]);
   \   0000008A   01FE               MOVW    R31:R30, R29:R28
   \   0000008C   0DE6               ADD     R30, R6
   \   0000008E   1DF7               ADC     R31, R7
   \   00000090   9731               SBIW    R31:R30, 1
   \   00000092   8100               LD      R16, Z
   \   00000094   ........           CALL    USART_transmit
    101          index--;
   \   00000098   EF0F               LDI     R16, 255
   \   0000009A   0E60               ADD     R6, R16
   \   0000009C   EF0F               LDI     R16, 255
   \   0000009E   1E70               ADC     R7, R16
   \   000000A0   CFEF               RJMP    ??doubleTransmit_2
    102          }
    103          dataIntreg=(int)x;
   \                     ??doubleTransmit_3:
   \   000000A2   018C               MOVW    R17:R16, R25:R24
   \   000000A4   019D               MOVW    R19:R18, R27:R26
   \   000000A6   ........           CALL    ?F2SL_L04
   \   000000AA   0128               MOVW    R5:R4, R17:R16
    104          x=x-dataIntreg;
   \   000000AC   0182               MOVW    R17:R16, R5:R4
   \   000000AE   2F21               MOV     R18, R17
   \   000000B0   0F22               LSL     R18
   \   000000B2   0B22               SBC     R18, R18
   \   000000B4   2F32               MOV     R19, R18
   \   000000B6   ........           CALL    ?SL2F_L04
   \   000000BA   01A8               MOVW    R21:R20, R17:R16
   \   000000BC   01B9               MOVW    R23:R22, R19:R18
   \   000000BE   018C               MOVW    R17:R16, R25:R24
   \   000000C0   019D               MOVW    R19:R18, R27:R26
   \   000000C2   ........           CALL    ?F_SUB_L04
   \   000000C6   01C8               MOVW    R25:R24, R17:R16
   \   000000C8   01D9               MOVW    R27:R26, R19:R18
    105          if(x>0)
   \   000000CA   E041               LDI     R20, 1
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   E060               LDI     R22, 0
   \   000000D0   E070               LDI     R23, 0
   \   000000D2   018C               MOVW    R17:R16, R25:R24
   \   000000D4   019D               MOVW    R19:R18, R27:R26
   \   000000D6   ........           CALL    ?F_CMP_GE_L04
   \   000000DA   F418               BRCC    ??doubleTransmit_4
    106          {
    107          USART_transmit('.');
   \   000000DC   E20E               LDI     R16, 46
   \   000000DE   ........           CALL    USART_transmit
    108          }
    109          while(x>0 && p2>0)
   \                     ??doubleTransmit_4:
   \   000000E2   E041               LDI     R20, 1
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   E060               LDI     R22, 0
   \   000000E8   E070               LDI     R23, 0
   \   000000EA   018C               MOVW    R17:R16, R25:R24
   \   000000EC   019D               MOVW    R19:R18, R27:R26
   \   000000EE   ........           CALL    ?F_CMP_GE_L04
   \   000000F2   F550               BRCC    ??doubleTransmit_5
   \   000000F4   2D0A               MOV     R16, R10
   \   000000F6   290B               OR      R16, R11
   \   000000F8   F139               BREQ    ??doubleTransmit_5
    110          {
    111          x=x*10;
   \   000000FA   E040               LDI     R20, 0
   \   000000FC   E050               LDI     R21, 0
   \   000000FE   E260               LDI     R22, 32
   \   00000100   E471               LDI     R23, 65
   \   00000102   018C               MOVW    R17:R16, R25:R24
   \   00000104   019D               MOVW    R19:R18, R27:R26
   \   00000106   ........           CALL    ?F_MUL_L04
   \   0000010A   01C8               MOVW    R25:R24, R17:R16
   \   0000010C   01D9               MOVW    R27:R26, R19:R18
    112          dataIntreg=(int)x;
   \   0000010E   018C               MOVW    R17:R16, R25:R24
   \   00000110   019D               MOVW    R19:R18, R27:R26
   \   00000112   ........           CALL    ?F2SL_L04
   \   00000116   0128               MOVW    R5:R4, R17:R16
    113          USART_transmit(dataIntreg+'0');
   \   00000118   2D04               MOV     R16, R4
   \   0000011A   5D00               SUBI    R16, 208
   \   0000011C   ........           CALL    USART_transmit
    114          x=x-dataIntreg;
   \   00000120   0182               MOVW    R17:R16, R5:R4
   \   00000122   2F21               MOV     R18, R17
   \   00000124   0F22               LSL     R18
   \   00000126   0B22               SBC     R18, R18
   \   00000128   2F32               MOV     R19, R18
   \   0000012A   ........           CALL    ?SL2F_L04
   \   0000012E   01A8               MOVW    R21:R20, R17:R16
   \   00000130   01B9               MOVW    R23:R22, R19:R18
   \   00000132   018C               MOVW    R17:R16, R25:R24
   \   00000134   019D               MOVW    R19:R18, R27:R26
   \   00000136   ........           CALL    ?F_SUB_L04
   \   0000013A   01C8               MOVW    R25:R24, R17:R16
   \   0000013C   01D9               MOVW    R27:R26, R19:R18
    115          p2--;
   \   0000013E   EF0F               LDI     R16, 255
   \   00000140   0EA0               ADD     R10, R16
   \   00000142   EF0F               LDI     R16, 255
   \   00000144   1EB0               ADC     R11, R16
   \   00000146   CFCD               RJMP    ??doubleTransmit_4
    116          }
    117          }
   \                     ??doubleTransmit_5:
   \   00000148   9625               ADIW    R29:R28, 5
   \   0000014A   E0EE               LDI     R30, 14
   \   0000014C   ........           JMP     ?EPILOGUE_B14_L09
    118          
    119          //transmiterea unui numar de tip float

   \                                 In  segment CODE, align 2, keep-with-next
    120          void floatTransmit(unsigned int p1, unsigned int p2, void * p3)
   \                     floatTransmit:
    121          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   97AA               SBIW    R29:R28, 42
   \   00000006   870A               STD     Y+10, R16
   \   00000008   871B               STD     Y+11, R17
   \   0000000A   8728               STD     Y+8, R18
   \   0000000C   8739               STD     Y+9, R19
   \   0000000E   834E               STD     Y+6, R20
   \   00000010   835F               STD     Y+7, R21
    122          char buff[30]={0};
   \   00000012   018E               MOVW    R17:R16, R29:R28
   \   00000014   5F04               SUBI    R16, 244
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   E020               LDI     R18, 0
   \   0000001C   E18E               LDI     R24, 30
   \                     ??floatTransmit_0:
   \   0000001E   9321               ST      Z+, R18
   \   00000020   958A               DEC     R24
   \   00000022   F7E9               BRNE    ??floatTransmit_0
    123          int j, nrCaract;
    124          long long nr;
    125          char nrNeg;
    126          int i;
    127          float floatNr;
    128          floatNr=*((float *)p3);
   \   00000024   81EE               LDD     R30, Y+6
   \   00000026   81FF               LDD     R31, Y+7
   \   00000028   8100               LD      R16, Z
   \   0000002A   8111               LDD     R17, Z+1
   \   0000002C   8122               LDD     R18, Z+2
   \   0000002E   8133               LDD     R19, Z+3
   \   00000030   0128               MOVW    R5:R4, R17:R16
   \   00000032   0139               MOVW    R7:R6, R19:R18
    129          nrCaract=0;
   \   00000034   E000               LDI     R16, 0
   \   00000036   E010               LDI     R17, 0
   \   00000038   8308               ST      Y, R16
   \   0000003A   8319               STD     Y+1, R17
    130          nr=(long long)floatNr;
   \   0000003C   0182               MOVW    R17:R16, R5:R4
   \   0000003E   0193               MOVW    R19:R18, R7:R6
   \   00000040   ........           CALL    ?F2SLL_L12
   \   00000044   0148               MOVW    R9:R8, R17:R16
   \   00000046   0159               MOVW    R11:R10, R19:R18
   \   00000048   016A               MOVW    R13:R12, R21:R20
   \   0000004A   017B               MOVW    R15:R14, R23:R22
    131          nrNeg=(nr<0);
   \   0000004C   0184               MOVW    R17:R16, R9:R8
   \   0000004E   0195               MOVW    R19:R18, R11:R10
   \   00000050   01A6               MOVW    R21:R20, R13:R12
   \   00000052   01B7               MOVW    R23:R22, R15:R14
   \   00000054   0148               MOVW    R9:R8, R17:R16
   \   00000056   0159               MOVW    R11:R10, R19:R18
   \   00000058   016A               MOVW    R13:R12, R21:R20
   \   0000005A   017B               MOVW    R15:R14, R23:R22
   \   0000005C   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000005E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000060   0184               MOVW    R17:R16, R9:R8
   \   00000062   0195               MOVW    R19:R18, R11:R10
   \   00000064   01A6               MOVW    R21:R20, R13:R12
   \   00000066   01B7               MOVW    R23:R22, R15:R14
   \   00000068   ........           CALL    ?LL_CMP_L12
   \   0000006C   F414               BRGE    ??floatTransmit_1
   \   0000006E   E001               LDI     R16, 1
   \   00000070   C001               RJMP    ??floatTransmit_2
   \                     ??floatTransmit_1:
   \   00000072   E000               LDI     R16, 0
   \                     ??floatTransmit_2:
   \   00000074   2F90               MOV     R25, R16
    132          if (nrNeg)
   \   00000076   2399               TST     R25
   \   00000078   F061               BREQ    ??floatTransmit_3
    133          nr*=-1;
   \   0000007A   0184               MOVW    R17:R16, R9:R8
   \   0000007C   0195               MOVW    R19:R18, R11:R10
   \   0000007E   01A6               MOVW    R21:R20, R13:R12
   \   00000080   01B7               MOVW    R23:R22, R15:R14
   \   00000082   ....               LDI     R26, LOW(__Constant_ffffffff_ffffffff)
   \   00000084   ....               LDI     R27, (__Constant_ffffffff_ffffffff) >> 8
   \   00000086   ........           CALL    ?LL_MUL_L12
   \   0000008A   0148               MOVW    R9:R8, R17:R16
   \   0000008C   0159               MOVW    R11:R10, R19:R18
   \   0000008E   016A               MOVW    R13:R12, R21:R20
   \   00000090   017B               MOVW    R15:R14, R23:R22
    134          while(nr!=0)
   \                     ??floatTransmit_3:
   \   00000092   0184               MOVW    R17:R16, R9:R8
   \   00000094   0195               MOVW    R19:R18, R11:R10
   \   00000096   01A6               MOVW    R21:R20, R13:R12
   \   00000098   01B7               MOVW    R23:R22, R15:R14
   \   0000009A   0148               MOVW    R9:R8, R17:R16
   \   0000009C   0159               MOVW    R11:R10, R19:R18
   \   0000009E   016A               MOVW    R13:R12, R21:R20
   \   000000A0   017B               MOVW    R15:R14, R23:R22
   \   000000A2   ....               LDI     R30, LOW(__Constant_0_0)
   \   000000A4   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000000A6   0184               MOVW    R17:R16, R9:R8
   \   000000A8   0195               MOVW    R19:R18, R11:R10
   \   000000AA   01A6               MOVW    R21:R20, R13:R12
   \   000000AC   01B7               MOVW    R23:R22, R15:R14
   \   000000AE   ........           CALL    ?LL_CMP_L12
   \   000000B2   F179               BREQ    ??floatTransmit_4
    135          {
    136          j=nr%10;
   \   000000B4   0184               MOVW    R17:R16, R9:R8
   \   000000B6   0195               MOVW    R19:R18, R11:R10
   \   000000B8   01A6               MOVW    R21:R20, R13:R12
   \   000000BA   01B7               MOVW    R23:R22, R15:R14
   \   000000BC   0148               MOVW    R9:R8, R17:R16
   \   000000BE   0159               MOVW    R11:R10, R19:R18
   \   000000C0   016A               MOVW    R13:R12, R21:R20
   \   000000C2   017B               MOVW    R15:R14, R23:R22
   \   000000C4   ....               LDI     R26, LOW(__Constant_a_0)
   \   000000C6   ....               LDI     R27, (__Constant_a_0) >> 8
   \   000000C8   0184               MOVW    R17:R16, R9:R8
   \   000000CA   0195               MOVW    R19:R18, R11:R10
   \   000000CC   01A6               MOVW    R21:R20, R13:R12
   \   000000CE   01B7               MOVW    R23:R22, R15:R14
   \   000000D0   ........           CALL    ?SLL_MOD_L12
   \   000000D4   830C               STD     Y+4, R16
   \   000000D6   831D               STD     Y+5, R17
    137          nr=nr/10;
   \   000000D8   0184               MOVW    R17:R16, R9:R8
   \   000000DA   0195               MOVW    R19:R18, R11:R10
   \   000000DC   01A6               MOVW    R21:R20, R13:R12
   \   000000DE   01B7               MOVW    R23:R22, R15:R14
   \   000000E0   ....               LDI     R26, LOW(__Constant_a_0)
   \   000000E2   ....               LDI     R27, (__Constant_a_0) >> 8
   \   000000E4   ........           CALL    ?SLL_DIV_L12
   \   000000E8   0148               MOVW    R9:R8, R17:R16
   \   000000EA   0159               MOVW    R11:R10, R19:R18
   \   000000EC   016A               MOVW    R13:R12, R21:R20
   \   000000EE   017B               MOVW    R15:R14, R23:R22
    138          buff[nrCaract]=j+'0';
   \   000000F0   812C               LDD     R18, Y+4
   \   000000F2   813D               LDD     R19, Y+5
   \   000000F4   5D20               SUBI    R18, 208
   \   000000F6   01FE               MOVW    R31:R30, R29:R28
   \   000000F8   963C               ADIW    R31:R30, 12
   \   000000FA   8108               LD      R16, Y
   \   000000FC   8119               LDD     R17, Y+1
   \   000000FE   0FE0               ADD     R30, R16
   \   00000100   1FF1               ADC     R31, R17
   \   00000102   8320               ST      Z, R18
    139          nrCaract++;
   \   00000104   8108               LD      R16, Y
   \   00000106   8119               LDD     R17, Y+1
   \   00000108   5F0F               SUBI    R16, 255
   \   0000010A   4F1F               SBCI    R17, 255
   \   0000010C   8308               ST      Y, R16
   \   0000010E   8319               STD     Y+1, R17
   \   00000110   CFC0               RJMP    ??floatTransmit_3
    140          }
    141          if(nrCaract ==0)
   \                     ??floatTransmit_4:
   \   00000112   8108               LD      R16, Y
   \   00000114   8119               LDD     R17, Y+1
   \   00000116   2B01               OR      R16, R17
   \   00000118   F431               BRNE    ??floatTransmit_5
    142          {
    143          buff[0]='0';
   \   0000011A   E300               LDI     R16, 48
   \   0000011C   870C               STD     Y+12, R16
    144          nrCaract=1;
   \   0000011E   E001               LDI     R16, 1
   \   00000120   E010               LDI     R17, 0
   \   00000122   8308               ST      Y, R16
   \   00000124   8319               STD     Y+1, R17
    145          }
    146          if(nrNeg)
   \                     ??floatTransmit_5:
   \   00000126   2399               TST     R25
   \   00000128   F071               BREQ    ??floatTransmit_6
    147          {
    148          buff[nrCaract]='-';
   \   0000012A   E21D               LDI     R17, 45
   \   0000012C   01FE               MOVW    R31:R30, R29:R28
   \   0000012E   963C               ADIW    R31:R30, 12
   \   00000130   8128               LD      R18, Y
   \   00000132   8139               LDD     R19, Y+1
   \   00000134   0FE2               ADD     R30, R18
   \   00000136   1FF3               ADC     R31, R19
   \   00000138   8310               ST      Z, R17
    149          nrCaract++;
   \   0000013A   8108               LD      R16, Y
   \   0000013C   8119               LDD     R17, Y+1
   \   0000013E   5F0F               SUBI    R16, 255
   \   00000140   4F1F               SBCI    R17, 255
   \   00000142   8308               ST      Y, R16
   \   00000144   8319               STD     Y+1, R17
    150          }
    151          for(i=nrCaract-1; i>=0; i--)
   \                     ??floatTransmit_6:
   \   00000146   8108               LD      R16, Y
   \   00000148   8119               LDD     R17, Y+1
   \   0000014A   5001               SUBI    R16, 1
   \   0000014C   4010               SBCI    R17, 0
   \   0000014E   830A               STD     Y+2, R16
   \   00000150   831B               STD     Y+3, R17
   \                     ??floatTransmit_7:
   \   00000152   812A               LDD     R18, Y+2
   \   00000154   813B               LDD     R19, Y+3
   \   00000156   2333               TST     R19
   \   00000158   F082               BRMI    ??floatTransmit_8
    152          {
    153          USART_transmit(buff[i]);
   \   0000015A   01FE               MOVW    R31:R30, R29:R28
   \   0000015C   963C               ADIW    R31:R30, 12
   \   0000015E   810A               LDD     R16, Y+2
   \   00000160   811B               LDD     R17, Y+3
   \   00000162   0FE0               ADD     R30, R16
   \   00000164   1FF1               ADC     R31, R17
   \   00000166   8100               LD      R16, Z
   \   00000168   ........           CALL    USART_transmit
    154          }
   \   0000016C   810A               LDD     R16, Y+2
   \   0000016E   811B               LDD     R17, Y+3
   \   00000170   5001               SUBI    R16, 1
   \   00000172   4010               SBCI    R17, 0
   \   00000174   830A               STD     Y+2, R16
   \   00000176   831B               STD     Y+3, R17
   \   00000178   CFEC               RJMP    ??floatTransmit_7
    155          USART_transmit('.');
   \                     ??floatTransmit_8:
   \   0000017A   E20E               LDI     R16, 46
   \   0000017C   ........           CALL    USART_transmit
    156          if (floatNr<0)
   \   00000180   E040               LDI     R20, 0
   \   00000182   E050               LDI     R21, 0
   \   00000184   E060               LDI     R22, 0
   \   00000186   E070               LDI     R23, 0
   \   00000188   0182               MOVW    R17:R16, R5:R4
   \   0000018A   0193               MOVW    R19:R18, R7:R6
   \   0000018C   ........           CALL    ?F_CMP_LT_L04
   \   00000190   F450               BRCC    ??floatTransmit_9
    157          floatNr*=-1;
   \   00000192   E040               LDI     R20, 0
   \   00000194   E050               LDI     R21, 0
   \   00000196   E860               LDI     R22, 128
   \   00000198   EB7F               LDI     R23, 191
   \   0000019A   0182               MOVW    R17:R16, R5:R4
   \   0000019C   0193               MOVW    R19:R18, R7:R6
   \   0000019E   ........           CALL    ?F_MUL_L04
   \   000001A2   0128               MOVW    R5:R4, R17:R16
   \   000001A4   0139               MOVW    R7:R6, R19:R18
    158          for (i=0; i<p2; i++)
   \                     ??floatTransmit_9:
   \   000001A6   E000               LDI     R16, 0
   \   000001A8   E010               LDI     R17, 0
   \   000001AA   830A               STD     Y+2, R16
   \   000001AC   831B               STD     Y+3, R17
   \                     ??floatTransmit_10:
   \   000001AE   810A               LDD     R16, Y+2
   \   000001B0   811B               LDD     R17, Y+3
   \   000001B2   8528               LDD     R18, Y+8
   \   000001B4   8539               LDD     R19, Y+9
   \   000001B6   1702               CP      R16, R18
   \   000001B8   0713               CPC     R17, R19
   \   000001BA   F5A0               BRCC    ??floatTransmit_11
    159          {
    160          floatNr=floatNr-(long long)floatNr;
   \   000001BC   0182               MOVW    R17:R16, R5:R4
   \   000001BE   0193               MOVW    R19:R18, R7:R6
   \   000001C0   ........           CALL    ?F2SLL_L12
   \   000001C4   ........           CALL    ?SLL2F_L12
   \   000001C8   01A8               MOVW    R21:R20, R17:R16
   \   000001CA   01B9               MOVW    R23:R22, R19:R18
   \   000001CC   0182               MOVW    R17:R16, R5:R4
   \   000001CE   0193               MOVW    R19:R18, R7:R6
   \   000001D0   ........           CALL    ?F_SUB_L04
   \   000001D4   0128               MOVW    R5:R4, R17:R16
   \   000001D6   0139               MOVW    R7:R6, R19:R18
    161          floatNr*=10;
   \   000001D8   E040               LDI     R20, 0
   \   000001DA   E050               LDI     R21, 0
   \   000001DC   E260               LDI     R22, 32
   \   000001DE   E471               LDI     R23, 65
   \   000001E0   0182               MOVW    R17:R16, R5:R4
   \   000001E2   0193               MOVW    R19:R18, R7:R6
   \   000001E4   ........           CALL    ?F_MUL_L04
   \   000001E8   0128               MOVW    R5:R4, R17:R16
   \   000001EA   0139               MOVW    R7:R6, R19:R18
    162          nr=(int)floatNr;
   \   000001EC   0182               MOVW    R17:R16, R5:R4
   \   000001EE   0193               MOVW    R19:R18, R7:R6
   \   000001F0   ........           CALL    ?F2SL_L04
   \   000001F4   2F21               MOV     R18, R17
   \   000001F6   0F22               LSL     R18
   \   000001F8   0B22               SBC     R18, R18
   \   000001FA   2F32               MOV     R19, R18
   \   000001FC   2F42               MOV     R20, R18
   \   000001FE   2F52               MOV     R21, R18
   \   00000200   2F62               MOV     R22, R18
   \   00000202   2F72               MOV     R23, R18
   \   00000204   0148               MOVW    R9:R8, R17:R16
   \   00000206   0159               MOVW    R11:R10, R19:R18
   \   00000208   016A               MOVW    R13:R12, R21:R20
   \   0000020A   017B               MOVW    R15:R14, R23:R22
    163          USART_transmit(nr+'0');
   \   0000020C   0184               MOVW    R17:R16, R9:R8
   \   0000020E   0195               MOVW    R19:R18, R11:R10
   \   00000210   5D00               SUBI    R16, 208
   \   00000212   ........           CALL    USART_transmit
    164          }
   \   00000216   810A               LDD     R16, Y+2
   \   00000218   811B               LDD     R17, Y+3
   \   0000021A   5F0F               SUBI    R16, 255
   \   0000021C   4F1F               SBCI    R17, 255
   \   0000021E   830A               STD     Y+2, R16
   \   00000220   831B               STD     Y+3, R17
   \   00000222   CFC5               RJMP    ??floatTransmit_10
    165          }
   \                     ??floatTransmit_11:
   \   00000224   96AA               ADIW    R29:R28, 42
   \   00000226   E1E0               LDI     R30, 16
   \   00000228   ........           JMP     ?EPILOGUE_B16_L09
    166          
    167          //transmiterea unui .ir de caractere pe seriala

   \                                 In  segment CODE, align 2, keep-with-next
    168          void characterTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     characterTransmit:
    169          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
    170          unsigned char *x=(unsigned char *)(p3);
   \   0000000A   0142               MOVW    R9:R8, R5:R4
    171          int index = 0;
   \   0000000C   2466               CLR     R6
   \   0000000E   2477               CLR     R7
    172          
    173          while(index<p2)
   \                     ??characterTransmit_0:
   \   00000010   166A               CP      R6, R26
   \   00000012   067B               CPC     R7, R27
   \   00000014   F458               BRCC    ??characterTransmit_1
    174          {
    175          USART_transmit(x[index]);
   \   00000016   01F4               MOVW    R31:R30, R9:R8
   \   00000018   0DE6               ADD     R30, R6
   \   0000001A   1DF7               ADC     R31, R7
   \   0000001C   8100               LD      R16, Z
   \   0000001E   ........           CALL    USART_transmit
    176          index++;
   \   00000022   E001               LDI     R16, 1
   \   00000024   0E60               ADD     R6, R16
   \   00000026   E000               LDI     R16, 0
   \   00000028   1E70               ADC     R7, R16
   \   0000002A   CFF2               RJMP    ??characterTransmit_0
    177          }
    178          }
   \                     ??characterTransmit_1:
   \   0000002C   E0EA               LDI     R30, 10
   \   0000002E   ........           JMP     ?EPILOGUE_B10_L09

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   000000000000       DD 0, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_0_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_1`:
   \   00000000   FFFFFFFFFFFF       DD 4294967295, 4294967295
   \              FFFF        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_ffffffff_ffffffff:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_1`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_2`:
   \   00000000   000A00000000       DD 10, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_a_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_2`

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for myprint>_0`:
   \   00000000   0000               DW      0
   \   00000002   00                 DB      0
   \   00000003   ....               DW      (??myprint_1) /2
   \   00000005   0004               DW      4
   \   00000007   ....               DW      (??myprint_0) /2
   \   00000009   ....               DW      (??myprint_2) /2
   \   0000000B   ....               DW      (??myprint_3) /2
   \   0000000D   ....               DW      (??myprint_4) /2
   \   0000000F   00                 DB      0

   \                                 In  segment NEAR_F, align 1, keep-with-next
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      10      2  characterTransmit
                   10 2 -> USART_transmit
      19      4  doubleTransmit
                   19 2 -> USART_transmit
      58      4  floatTransmit
                   58 2 -> USART_transmit
      27      4  hexadecimalTransmit
                   27 2 -> USART_transmit
      15      4  integerTransmit
                   15 2 -> USART_transmit
       6      2  myprint
                    6 2 -> characterTransmit
                    6 2 -> doubleTransmit
                    6 2 -> hexadecimalTransmit
                    6 2 -> integerTransmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  ?<Constant {0}>
       8  ?<Initializer for 64 Bit Constant>_0
       8  ?<Initializer for 64 Bit Constant>_1
       8  ?<Initializer for 64 Bit Constant>_2
      16  ?<Jumptable for myprint>_0
       8  __Constant_0_0
       8  __Constant_a_0
       8  __Constant_ffffffff_ffffffff
      50  characterTransmit
     336  doubleTransmit
     556  floatTransmit
     232  hexadecimalTransmit
     126  integerTransmit
      64  myprint
       6  -- Other

 
 1 364 bytes in segment CODE
     6 bytes in segment INITTAB
    30 bytes in segment NEAR_F
    24 bytes in segment NEAR_I
    24 bytes in segment NEAR_ID
    16 bytes in segment SWITCH
 
 1 410 bytes of CODE memory (+ 30 bytes shared)
     0 bytes of DATA memory (+ 24 bytes shared)

Errors: none
Warnings: none

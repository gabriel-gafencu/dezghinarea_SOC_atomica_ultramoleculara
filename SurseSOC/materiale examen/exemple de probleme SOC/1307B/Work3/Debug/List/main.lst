###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        22/Dec/2014  15:26:27 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Work3\main.c                                    #
#    Command line =  D:\1307B\Work3\main.c --cpu=m16 -ms -o                   #
#                    D:\1307B\Work3\Debug\Obj\ -lC                            #
#                    D:\1307B\Work3\Debug\List\ -lA                           #
#                    D:\1307B\Work3\Debug\List\ --initializers_in_flash       #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\Work3\Debug\List\main.lst                       #
#    Object file  =  D:\1307B\Work3\Debug\Obj\main.r90                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Work3\main.c
      1          #include <iom16.h>

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include <inavr.h>
      3          #include "header.h"
      4          #include "usart.h"
      5          

   \                                 In  segment CODE, align 2, keep-with-next
      6          void timer1_INIT()
   \                     timer1_INIT:
      7          {
      8            /*
      9            Modul Normal: WGM13:10=0000;
     10            Cu prescaler: CS12:10=010;
     11            */
     12            TCCR1B|=(1<<CS11);
   \   00000000   B50E               IN      R16, 0x2E
   \   00000002   6002               ORI     R16, 0x02
   \   00000004   BD0E               OUT     0x2E, R16
     13           
     14          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_TCCR1B
     15          
     16          

   \                                 In  segment NEAR_N, align 1, keep-with-next
     17          __no_init unsigned int HI;
   \                     HI:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_N, align 1, keep-with-next
     18          __no_init unsigned int stare;
   \                     stare:
   \   00000000                      DS8 2
     19          

   \                                 In  segment CODE, align 2, keep-with-next
     20          void main()
   \                     main:
     21          {
     22            DDRD|=(1<<PD5);
   \   00000000   9A8D               SBI     0x11, 0x05
     23            
     24            if(HI==0)
   \   00000002   9100....           LDS     R16, HI
   \   00000006   9110....           LDS     R17, (HI + 1)
   \   0000000A   2B01               OR      R16, R17
   \   0000000C   F461               BRNE    ??main_0
     25            {
     26              PORTD&=~(HI<<PD5);
   \   0000000E   9100....           LDS     R16, HI
   \   00000012   9110....           LDS     R17, (HI + 1)
   \   00000016   9502               SWAP    R16
   \   00000018   7F00               ANDI    R16, 0xF0
   \   0000001A   0F00               LSL     R16
   \   0000001C   9500               COM     R16
   \   0000001E   B312               IN      R17, 0x12
   \   00000020   2310               AND     R17, R16
   \   00000022   BB12               OUT     0x12, R17
   \   00000024   C00A               RJMP    ??main_1
     27            }
     28            else
     29            {
     30              PORTD |=(HI<<PD5);
   \                     ??main_0:
   \   00000026   9100....           LDS     R16, HI
   \   0000002A   9110....           LDS     R17, (HI + 1)
   \   0000002E   9502               SWAP    R16
   \   00000030   7F00               ANDI    R16, 0xF0
   \   00000032   0F00               LSL     R16
   \   00000034   B312               IN      R17, 0x12
   \   00000036   2B10               OR      R17, R16
   \   00000038   BB12               OUT     0x12, R17
     31            }
     32            
     33            
     34            
     35            TCNT1=0;
   \                     ??main_1:
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   BD1D               OUT     0x2D, R17
   \   00000040   BD0C               OUT     0x2C, R16
     36            
     37             if((MCUCSR>>WDRF)&1)
   \   00000042   B704               IN      R16, 0x34
   \   00000044   2F10               MOV     R17, R16
   \   00000046   FF13               SBRS    R17, 3
   \   00000048   C066               RJMP    ??main_2
     38            {
     39                  
     40              switch(stare)
   \   0000004A   9100....           LDS     R16, stare
   \   0000004E   9110....           LDS     R17, (stare + 1)
   \   00000052   ....               LDI     R30, LOW(`?<Jumptable for main>_0`)
   \   00000054   ....               LDI     R31, (`?<Jumptable for main>_0`) >> 8
   \   00000056   ........           JMP     ?SV_SWITCH_L06
     41              {
     42               
     43              case 0:
     44                WDTCR&= ~(1<<WDP0);
   \                     ??main_3:
   \   0000005A   B501               IN      R16, 0x21
   \   0000005C   7F0E               ANDI    R16, 0xFE
   \   0000005E   BD01               OUT     0x21, R16
     45                WDTCR|= (1<<WDP1);
   \   00000060   B501               IN      R16, 0x21
   \   00000062   6002               ORI     R16, 0x02
   \   00000064   BD01               OUT     0x21, R16
     46                WDTCR&= ~(1<<WDP2);
   \   00000066   B501               IN      R16, 0x21
   \   00000068   7F0B               ANDI    R16, 0xFB
   \   0000006A   BD01               OUT     0x21, R16
     47                HI=1;
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   E010               LDI     R17, 0
   \   00000070   9300....           STS     HI, R16
   \   00000074   9310....           STS     (HI + 1), R17
     48                stare=1;
   \   00000078   E001               LDI     R16, 1
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   9300....           STS     stare, R16
   \   00000080   9310....           STS     (stare + 1), R17
     49          
     50                break;
   \   00000084   C048               RJMP    ??main_2
     51                
     52              case 1:
     53                WDTCR&= ~(1<<WDP0);
   \                     ??main_4:
   \   00000086   B501               IN      R16, 0x21
   \   00000088   7F0E               ANDI    R16, 0xFE
   \   0000008A   BD01               OUT     0x21, R16
     54                WDTCR&= ~(1<<WDP1);
   \   0000008C   B501               IN      R16, 0x21
   \   0000008E   7F0D               ANDI    R16, 0xFD
   \   00000090   BD01               OUT     0x21, R16
     55                WDTCR&= ~(1<<WDP2);
   \   00000092   B501               IN      R16, 0x21
   \   00000094   7F0B               ANDI    R16, 0xFB
   \   00000096   BD01               OUT     0x21, R16
     56                HI=1;
   \   00000098   E001               LDI     R16, 1
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   9300....           STS     HI, R16
   \   000000A0   9310....           STS     (HI + 1), R17
     57                stare=2;
   \   000000A4   E002               LDI     R16, 2
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   9300....           STS     stare, R16
   \   000000AC   9310....           STS     (stare + 1), R17
     58                
     59                break;
   \   000000B0   C032               RJMP    ??main_2
     60                  
     61              case 2:
     62                WDTCR|= (1<<WDP0);
   \                     ??main_5:
   \   000000B2   B501               IN      R16, 0x21
   \   000000B4   6001               ORI     R16, 0x01
   \   000000B6   BD01               OUT     0x21, R16
     63                WDTCR&= ~(1<<WDP1);
   \   000000B8   B501               IN      R16, 0x21
   \   000000BA   7F0D               ANDI    R16, 0xFD
   \   000000BC   BD01               OUT     0x21, R16
     64                WDTCR&= ~(1<<WDP2);
   \   000000BE   B501               IN      R16, 0x21
   \   000000C0   7F0B               ANDI    R16, 0xFB
   \   000000C2   BD01               OUT     0x21, R16
     65                HI=0;
   \   000000C4   E000               LDI     R16, 0
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   9300....           STS     HI, R16
   \   000000CC   9310....           STS     (HI + 1), R17
     66                stare=3;
   \   000000D0   E003               LDI     R16, 3
   \   000000D2   E010               LDI     R17, 0
   \   000000D4   9300....           STS     stare, R16
   \   000000D8   9310....           STS     (stare + 1), R17
     67                
     68                break;
   \   000000DC   C01C               RJMP    ??main_2
     69                  
     70              case 3:
     71                WDTCR&= ~(1<<WDP0);
   \                     ??main_6:
   \   000000DE   B501               IN      R16, 0x21
   \   000000E0   7F0E               ANDI    R16, 0xFE
   \   000000E2   BD01               OUT     0x21, R16
     72                WDTCR&= ~(1<<WDP1);
   \   000000E4   B501               IN      R16, 0x21
   \   000000E6   7F0D               ANDI    R16, 0xFD
   \   000000E8   BD01               OUT     0x21, R16
     73                WDTCR&= ~(1<<WDP2);
   \   000000EA   B501               IN      R16, 0x21
   \   000000EC   7F0B               ANDI    R16, 0xFB
   \   000000EE   BD01               OUT     0x21, R16
     74                HI=0;
   \   000000F0   E000               LDI     R16, 0
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   9300....           STS     HI, R16
   \   000000F8   9310....           STS     (HI + 1), R17
     75                stare=0;
   \   000000FC   E000               LDI     R16, 0
   \   000000FE   E010               LDI     R17, 0
   \   00000100   9300....           STS     stare, R16
   \   00000104   9310....           STS     (stare + 1), R17
     76                break;
   \   00000108   C006               RJMP    ??main_2
     77                
     78              default:
     79                stare=0;
   \                     ??main_7:
   \   0000010A   E000               LDI     R16, 0
   \   0000010C   E010               LDI     R17, 0
   \   0000010E   9300....           STS     stare, R16
   \   00000112   9310....           STS     (stare + 1), R17
     80                
     81              }
     82            }
     83          
     84            asm("WDR");
   \                     ??main_2:
   \   00000116   95A8               WDR
     85            WDTCR|=(1<<WDE);  
   \   00000118   B501               IN      R16, 0x21
   \   0000011A   6008               ORI     R16, 0x08
   \   0000011C   BD01               OUT     0x21, R16
     86            while(1)
   \                     ??main_8:
   \   0000011E   CFFF               RJMP    ??main_8
   \   00000120                      REQUIRE _A_DDRD
   \   00000120                      REQUIRE _A_PORTD
   \   00000120                      REQUIRE _A_TCNT1
   \   00000120                      REQUIRE _A_MCUCSR
   \   00000120                      REQUIRE _A_WDTCR
     87             {
     88                 
     89             }
     90          }

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for main>_0`:
   \   00000000   0000               DW      0
   \   00000002   00                 DB      0
   \   00000003   ....               DW      (??main_7) /2
   \   00000005   0004               DW      4
   \   00000007   ....               DW      (??main_3) /2
   \   00000009   ....               DW      (??main_4) /2
   \   0000000B   ....               DW      (??main_5) /2
   \   0000000D   ....               DW      (??main_6) /2
   \   0000000F   00                 DB      0
     91            
     92           
     93            

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       0      2  main
       0      2  timer1_INIT


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Jumptable for main>_0
       2  HI
       1  _A_DDRD
       1  _A_MCUCSR
       1  _A_PORTD
       1  _A_TCCR1B
       2  _A_TCNT1
       1  _A_WDTCR
     288  main
       2  stare
       8  timer1_INIT

 
   7 bytes in segment ABSOLUTE
 296 bytes in segment CODE
   4 bytes in segment NEAR_N
  16 bytes in segment SWITCH
 
 312 bytes of CODE memory
   4 bytes of DATA memory (+ 7 bytes shared)

Errors: none
Warnings: none

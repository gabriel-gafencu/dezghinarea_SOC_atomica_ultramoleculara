###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        12/Dec/2014  17:27:48 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Work1\main.c                                    #
#    Command line =  D:\1307B\Work1\main.c --cpu=m16 -ms -o                   #
#                    D:\1307B\Work1\Debug\Obj\ -lC                            #
#                    D:\1307B\Work1\Debug\List\ -lA                           #
#                    D:\1307B\Work1\Debug\List\ --initializers_in_flash       #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\Work1\Debug\List\main.lst                       #
#    Object file  =  D:\1307B\Work1\Debug\Obj\main.r90                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Work1\main.c
      1          #include<inavr.h>
      2          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2
      3          #include "usart.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          int cnt=0; //variabila pentru întrerupere
   \                     cnt:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      5          double FOsc=4006996.637; //Hz
   \                     FOsc:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for FOsc>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      6          double Fx=1000;//Hz
   \                     Fx:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for Fx>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      7          int N=1; //fara prescaler
   \                     N:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for N>`
      8          
      9          //întreruperea de overflow la timer1
     10          #pragma vector=TIMER1_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     11          __interrupt void T1int(void)
   \                     T1int:
     12          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
     13            cnt++;
   \   0000000C   ....               LDI     R30, LOW(cnt)
   \   0000000E   ....               LDI     R31, (cnt) >> 8
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
     14          }
   \   0000001C   BF2F               OUT     0x3F, R18
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   91E9               LD      R30, Y+
   \   00000026   91F9               LD      R31, Y+
   \   00000028   9518               RETI
     15          //configurarea timer 1

   \                                 In  segment CODE, align 2, keep-with-next
     16          void timer1_INIT()
   \                     timer1_INIT:
     17          {
     18            /*
     19            Modul Fast PWM: WGM13:10=1110;
     20            Fãrã prescaler: CS12:10=001;
     21            Compare Output Mode: 10
     22            */
     23            TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS10);
   \   00000000   B50E               IN      R16, 0x2E
   \   00000002   6109               ORI     R16, 0x19
   \   00000004   BD0E               OUT     0x2E, R16
     24            TCCR1A|=(1<<COM1A1)|(1<<WGM11);
   \   00000006   B50F               IN      R16, 0x2F
   \   00000008   6802               ORI     R16, 0x82
   \   0000000A   BD0F               OUT     0x2F, R16
     25            TIMSK|=(1<<TOIE1);
   \   0000000C   B709               IN      R16, 0x39
   \   0000000E   6004               ORI     R16, 0x04
   \   00000010   BF09               OUT     0x39, R16
     26          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_TCCR1B
   \   00000014                      REQUIRE _A_TCCR1A
   \   00000014                      REQUIRE _A_TIMSK
     27          
     28          /*
     29          void main()
     30          {
     31            cnt=0;
     32            //factor de umplere variabil (+-)5%, intre 5% si 95% in 5 secunde
     33            double nrCicli=FOsc/Fx/N;
     34            double step=(double)nrCicli/100*5;
     35            double sw=0;
     36            //Alegerea pinului de ie.ire
     37            DDRD|=(1<<PD5);
     38            PORTD&=(1<<PD5);
     39            //Initializarea timer-ului
     40            timer1_INIT();
     41            //Valoarea care se încarca în registru în functie de frecventa necesara
     42            ICR1=nrCicli;
     43            OCR1A=step;
     44          
     45            
     46            //pornirea întreruperii
     47            __enable_interrupt();
     48            
     49            while(1)
     50            {
     51              if(cnt==312)
     52              {
     53                if(sw==0)
     54                {
     55                 OCR1A+=step; 
     56                  
     57                 if(OCR1A>=(double)95/100*nrCicli)
     58                 sw=1; 
     59                  
     60                }else
     61                {
     62                  
     63                 OCR1A-=step;
     64                 if(OCR1A<=(double)5/100*nrCicli)
     65                 sw = 0;
     66                 
     67                }
     68                cnt=0;
     69                 
     70              }
     71                
     72            }
     73          }*/
     74          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     75          char c;
   \                     c:
   \   00000000                      DS8 1

   \                                 In  segment CODE, align 2, keep-with-next
     76          void main()
   \                     main:
     77          {
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
     78            double nrCicli=FOsc/Fx/N;
   \   00000004   ....               LDI     R30, LOW(Fx)
   \   00000006   ....               LDI     R31, (Fx) >> 8
   \   00000008   8140               LD      R20, Z
   \   0000000A   8151               LDD     R21, Z+1
   \   0000000C   8162               LDD     R22, Z+2
   \   0000000E   8173               LDD     R23, Z+3
   \   00000010   ....               LDI     R30, LOW(FOsc)
   \   00000012   ....               LDI     R31, (FOsc) >> 8
   \   00000014   8100               LD      R16, Z
   \   00000016   8111               LDD     R17, Z+1
   \   00000018   8122               LDD     R18, Z+2
   \   0000001A   8133               LDD     R19, Z+3
   \   0000001C   ........           CALL    ?F_DIV_L04
   \   00000020   01C8               MOVW    R25:R24, R17:R16
   \   00000022   01D9               MOVW    R27:R26, R19:R18
   \   00000024   9100....           LDS     R16, N
   \   00000028   9110....           LDS     R17, (N + 1)
   \   0000002C   2F21               MOV     R18, R17
   \   0000002E   0F22               LSL     R18
   \   00000030   0B22               SBC     R18, R18
   \   00000032   2F32               MOV     R19, R18
   \   00000034   ........           CALL    ?SL2F_L04
   \   00000038   01A8               MOVW    R21:R20, R17:R16
   \   0000003A   01B9               MOVW    R23:R22, R19:R18
   \   0000003C   018C               MOVW    R17:R16, R25:R24
   \   0000003E   019D               MOVW    R19:R18, R27:R26
   \   00000040   ........           CALL    ?F_DIV_L04
   \   00000044   01C8               MOVW    R25:R24, R17:R16
   \   00000046   01D9               MOVW    R27:R26, R19:R18
     79            double duty=(double)50/100;
   \   00000048   2444               CLR     R4
   \   0000004A   2455               CLR     R5
   \   0000004C   2466               CLR     R6
   \   0000004E   E30F               LDI     R16, 63
   \   00000050   2E70               MOV     R7, R16
     80            double DC=duty*nrCicli; 
   \   00000052   01A2               MOVW    R21:R20, R5:R4
   \   00000054   01B3               MOVW    R23:R22, R7:R6
   \   00000056   018C               MOVW    R17:R16, R25:R24
   \   00000058   019D               MOVW    R19:R18, R27:R26
   \   0000005A   ........           CALL    ?F_MUL_L04
   \   0000005E   0148               MOVW    R9:R8, R17:R16
   \   00000060   0159               MOVW    R11:R10, R19:R18
     81            //USART_initialize(BAUD_RATE);
     82            
     83            ICR1=nrCicli;
                       ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00000062   018C               MOVW    R17:R16, R25:R24
   \   00000064   019D               MOVW    R19:R18, R27:R26
   \   00000066   ........           CALL    ?F2SL_L04
   \   0000006A   BD17               OUT     0x27, R17
   \   0000006C   BD06               OUT     0x26, R16
     84            OCR1A=DC;
                        ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   0000006E   0184               MOVW    R17:R16, R9:R8
   \   00000070   0195               MOVW    R19:R18, R11:R10
   \   00000072   ........           CALL    ?F2SL_L04
   \   00000076   BD1B               OUT     0x2B, R17
   \   00000078   BD0A               OUT     0x2A, R16
     85            
     86            while(1)
   \                     ??main_0:
   \   0000007A   CFFF               RJMP    ??main_0
   \   0000007C                      REQUIRE _A_ICR1
   \   0000007C                      REQUIRE _A_OCR1A
     87            {/*
     88             c=USART_Receive();
     89             //pb 10.5a
     90             switch(c)
     91             {
     92             case '+':
     93               if(Fx<9000)
     94               {
     95                Fx+=1000; 
     96                nrCicli=FOsc/Fx/N;
     97                DC=duty*nrCicli;
     98                ICR1=nrCicli;
     99                OCR1A=DC;    
    100               }
    101               
    102               break;
    103               
    104             case '-':
    105               
    106               if(Fx>2000)
    107               {
    108                Fx-=1000; 
    109                nrCicli=FOsc/Fx/N;
    110                DC=duty*nrCicli;
    111                ICR1=nrCicli;
    112                OCR1A=DC;
    113                 
    114               } 
    115               break;
    116               
    117               //cnt=0;
    118             
    119             }
    120             
    121             
    122              */
    123            }
    124          }

   \                                 In  segment INTVEC, offset 0x20, root
   \                     `??T1int??INTVEC 32`:
   \   00000020   ........           JMP     T1int

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for FOsc>`:
   \   00000000   91534A74           DD 4A749153H

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Fx>`:
   \   00000000   0000447A           DD 447A0000H

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for N>`:
   \   00000000   0001               DC16 1

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       5      2  T1int
      12      4  main
       0      2  timer1_INIT


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for FOsc>
       4  ?<Initializer for Fx>
       2  ?<Initializer for N>
       4  ??T1int??INTVEC 32
       4  FOsc
       4  Fx
       2  N
      42  T1int
       2  _A_ICR1
       2  _A_OCR1A
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TIMSK
       1  c
       2  cnt
     124  main
      20  timer1_INIT
      12  -- Other

 
   7 bytes in segment ABSOLUTE
 186 bytes in segment CODE
  12 bytes in segment INITTAB
   4 bytes in segment INTVEC
  10 bytes in segment NEAR_I
  10 bytes in segment NEAR_ID
   3 bytes in segment NEAR_Z
 
 196 bytes of CODE memory (+ 16 bytes shared)
  13 bytes of DATA memory (+  7 bytes shared)

Errors: none
Warnings: 2

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        22/Dec/2014  10:06:46 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Masurare duty b\main.c                          #
#    Command line =  "D:\1307B\Masurare duty b\main.c" --cpu=m16 -ms -o       #
#                    "D:\1307B\Masurare duty b\Debug\Obj\" -lC                #
#                    "D:\1307B\Masurare duty b\Debug\List\" -lA               #
#                    "D:\1307B\Masurare duty b\Debug\List\"                   #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\1307B\Masurare duty b\Debug\List\main.lst             #
#    Object file  =  D:\1307B\Masurare duty b\Debug\Obj\main.r90              #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Masurare duty b\main.c
      1          #include<inavr.h>
      2          #include<intrinsics.h>
      3          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1
      4          #include"usart.h"
      5          #include "ir_printf.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          long cnt,cicli1,cicli0,frecv1,frecv2,cnt1;
   \                     cnt:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     cicli1:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     cicli0:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     frecv1:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     frecv2:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     cnt1:
   \   00000000                      DS8 4
      7          #pragma vector = TIMER0_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
      8          __interrupt void timer0_ovf_int()
   \                     timer0_ovf_int:
      9          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   934A               ST      -Y, R20
   \   00000006   933A               ST      -Y, R19
   \   00000008   932A               ST      -Y, R18
   \   0000000A   931A               ST      -Y, R17
   \   0000000C   930A               ST      -Y, R16
   \   0000000E   B74F               IN      R20, 0x3F
     10           cnt++;
   \   00000010   ....               LDI     R30, LOW(cnt)
   \   00000012   ....               LDI     R31, (cnt) >> 8
   \   00000014   8100               LD      R16, Z
   \   00000016   8111               LDD     R17, Z+1
   \   00000018   8122               LDD     R18, Z+2
   \   0000001A   8133               LDD     R19, Z+3
   \   0000001C   5F0F               SUBI    R16, 255
   \   0000001E   4F1F               SBCI    R17, 255
   \   00000020   4F2F               SBCI    R18, 255
   \   00000022   4F3F               SBCI    R19, 255
   \   00000024   8300               ST      Z, R16
   \   00000026   8311               STD     Z+1, R17
   \   00000028   8322               STD     Z+2, R18
   \   0000002A   8333               STD     Z+3, R19
     11          }
   \   0000002C   BF4F               OUT     0x3F, R20
   \   0000002E   9109               LD      R16, Y+
   \   00000030   9119               LD      R17, Y+
   \   00000032   9129               LD      R18, Y+
   \   00000034   9139               LD      R19, Y+
   \   00000036   9149               LD      R20, Y+
   \   00000038   91E9               LD      R30, Y+
   \   0000003A   91F9               LD      R31, Y+
   \   0000003C   9518               RETI
     12          

   \                                 In  segment CODE, align 2, keep-with-next
     13          void main(void)
   \                     main:
     14          {
   \   00000000   938A               ST      -Y, R24
     15            char value ;
     16            __enable_interrupt();
   \   00000002   9478               SEI
     17             USART_Init(MYUBRR);
   \   00000004   E109               LDI     R16, 25
   \   00000006   E010               LDI     R17, 0
   \   00000008   ........           CALL    USART_Init
     18            DDRD&=~(1<<PD2);
   \   0000000C   988A               CBI     0x11, 0x02
     19            TIMSK |= (1<<TOIE0);// intrerupere overflow
   \   0000000E   B709               IN      R16, 0x39
   \   00000010   6001               ORI     R16, 0x01
   \   00000012   BF09               OUT     0x39, R16
     20            TCCR0 = 0; // mod normal , fara prescaler , oc0 deconectat
   \   00000014   E000               LDI     R16, 0
   \   00000016   BF03               OUT     0x33, R16
     21            while(1)
     22            {
     23              value = (PIND & (1<<PD2));
   \                     ??main_0:
   \   00000018   B300               IN      R16, 0x10
   \   0000001A   7004               ANDI    R16, 0x04
   \   0000001C   2F80               MOV     R24, R16
     24              while( (PIND & (1<<PD2)) == value )
   \                     ??main_1:
   \   0000001E   B300               IN      R16, 0x10
   \   00000020   7004               ANDI    R16, 0x04
   \   00000022   1708               CP      R16, R24
   \   00000024   F3E1               BREQ    ??main_1
     25              {
     26                ;
     27              }
     28              value^= 1<<PD2;
   \   00000026   E004               LDI     R16, 4
   \   00000028   2780               EOR     R24, R16
     29              TCCR0 |= (1<<CS00);
   \   0000002A   B703               IN      R16, 0x33
   \   0000002C   6001               ORI     R16, 0x01
   \   0000002E   BF03               OUT     0x33, R16
     30              while( (PIND & (1<<PD2)) == value )
   \                     ??main_2:
   \   00000030   B300               IN      R16, 0x10
   \   00000032   7004               ANDI    R16, 0x04
   \   00000034   1708               CP      R16, R24
   \   00000036   F3E1               BREQ    ??main_2
     31              {
     32                ;
     33              }
     34             
     35              cicli1 = TCNT0;
   \   00000038   B702               IN      R16, 0x32
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E020               LDI     R18, 0
   \   0000003E   E030               LDI     R19, 0
   \   00000040   ....               LDI     R30, LOW(cicli1)
   \   00000042   ....               LDI     R31, (cicli1) >> 8
   \   00000044   8300               ST      Z, R16
   \   00000046   8311               STD     Z+1, R17
   \   00000048   8322               STD     Z+2, R18
   \   0000004A   8333               STD     Z+3, R19
     36              cnt1=cnt;
   \   0000004C   ....               LDI     R30, LOW(cnt)
   \   0000004E   ....               LDI     R31, (cnt) >> 8
   \   00000050   8100               LD      R16, Z
   \   00000052   8111               LDD     R17, Z+1
   \   00000054   8122               LDD     R18, Z+2
   \   00000056   8133               LDD     R19, Z+3
   \   00000058   ....               LDI     R30, LOW(cnt1)
   \   0000005A   ....               LDI     R31, (cnt1) >> 8
   \   0000005C   8300               ST      Z, R16
   \   0000005E   8311               STD     Z+1, R17
   \   00000060   8322               STD     Z+2, R18
   \   00000062   8333               STD     Z+3, R19
     37              TCNT0 = 0;
   \   00000064   E000               LDI     R16, 0
   \   00000066   BF02               OUT     0x32, R16
     38              cnt=0;
   \   00000068   E000               LDI     R16, 0
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   E020               LDI     R18, 0
   \   0000006E   E030               LDI     R19, 0
   \   00000070   ....               LDI     R30, LOW(cnt)
   \   00000072   ....               LDI     R31, (cnt) >> 8
   \   00000074   8300               ST      Z, R16
   \   00000076   8311               STD     Z+1, R17
   \   00000078   8322               STD     Z+2, R18
   \   0000007A   8333               STD     Z+3, R19
     39             
     40              value^= 1<<PD2;
   \   0000007C   E004               LDI     R16, 4
   \   0000007E   2780               EOR     R24, R16
     41              while( (PIND & (1<<PD2)) == value )
   \                     ??main_3:
   \   00000080   B300               IN      R16, 0x10
   \   00000082   7004               ANDI    R16, 0x04
   \   00000084   1708               CP      R16, R24
   \   00000086   F3E1               BREQ    ??main_3
     42              {
     43                ;
     44              }
     45             
     46             
     47              cicli0 = TCNT0;
   \   00000088   B702               IN      R16, 0x32
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E020               LDI     R18, 0
   \   0000008E   E030               LDI     R19, 0
   \   00000090   ....               LDI     R30, LOW(cicli0)
   \   00000092   ....               LDI     R31, (cicli0) >> 8
   \   00000094   8300               ST      Z, R16
   \   00000096   8311               STD     Z+1, R17
   \   00000098   8322               STD     Z+2, R18
   \   0000009A   8333               STD     Z+3, R19
     48              cicli1 = (cnt1*0xFF+cicli1);
   \   0000009C   EF4F               LDI     R20, 255
   \   0000009E   E050               LDI     R21, 0
   \   000000A0   E060               LDI     R22, 0
   \   000000A2   E070               LDI     R23, 0
   \   000000A4   ....               LDI     R30, LOW(cnt1)
   \   000000A6   ....               LDI     R31, (cnt1) >> 8
   \   000000A8   8100               LD      R16, Z
   \   000000AA   8111               LDD     R17, Z+1
   \   000000AC   8122               LDD     R18, Z+2
   \   000000AE   8133               LDD     R19, Z+3
   \   000000B0   ........           CALL    ?L_EC_MUL_L03
   \   000000B4   ....               LDI     R30, LOW(cicli1)
   \   000000B6   ....               LDI     R31, (cicli1) >> 8
   \   000000B8   8140               LD      R20, Z
   \   000000BA   8151               LDD     R21, Z+1
   \   000000BC   8162               LDD     R22, Z+2
   \   000000BE   8173               LDD     R23, Z+3
   \   000000C0   0F40               ADD     R20, R16
   \   000000C2   1F51               ADC     R21, R17
   \   000000C4   1F62               ADC     R22, R18
   \   000000C6   1F73               ADC     R23, R19
   \   000000C8   8340               ST      Z, R20
   \   000000CA   8351               STD     Z+1, R21
   \   000000CC   8362               STD     Z+2, R22
   \   000000CE   8373               STD     Z+3, R23
     49              cicli0 = (cnt*0xFF+cicli0);
   \   000000D0   EF4F               LDI     R20, 255
   \   000000D2   E050               LDI     R21, 0
   \   000000D4   E060               LDI     R22, 0
   \   000000D6   E070               LDI     R23, 0
   \   000000D8   ....               LDI     R30, LOW(cnt)
   \   000000DA   ....               LDI     R31, (cnt) >> 8
   \   000000DC   8100               LD      R16, Z
   \   000000DE   8111               LDD     R17, Z+1
   \   000000E0   8122               LDD     R18, Z+2
   \   000000E2   8133               LDD     R19, Z+3
   \   000000E4   ........           CALL    ?L_EC_MUL_L03
   \   000000E8   ....               LDI     R30, LOW(cicli0)
   \   000000EA   ....               LDI     R31, (cicli0) >> 8
   \   000000EC   8140               LD      R20, Z
   \   000000EE   8151               LDD     R21, Z+1
   \   000000F0   8162               LDD     R22, Z+2
   \   000000F2   8173               LDD     R23, Z+3
   \   000000F4   0F40               ADD     R20, R16
   \   000000F6   1F51               ADC     R21, R17
   \   000000F8   1F62               ADC     R22, R18
   \   000000FA   1F73               ADC     R23, R19
   \   000000FC   8340               ST      Z, R20
   \   000000FE   8351               STD     Z+1, R21
   \   00000100   8362               STD     Z+2, R22
   \   00000102   8373               STD     Z+3, R23
     50              
     51              if(!((value&1<<PD2)==1<<PD2))
   \   00000104   FB82               BST     R24, 2
   \   00000106   F1E6               BRTS    ??main_4
     52              {
     53                cicli1^=cicli0;
   \   00000108   ....               LDI     R30, LOW(cicli0)
   \   0000010A   ....               LDI     R31, (cicli0) >> 8
   \   0000010C   8100               LD      R16, Z
   \   0000010E   8111               LDD     R17, Z+1
   \   00000110   8122               LDD     R18, Z+2
   \   00000112   8133               LDD     R19, Z+3
   \   00000114   ....               LDI     R30, LOW(cicli1)
   \   00000116   ....               LDI     R31, (cicli1) >> 8
   \   00000118   8140               LD      R20, Z
   \   0000011A   8151               LDD     R21, Z+1
   \   0000011C   8162               LDD     R22, Z+2
   \   0000011E   8173               LDD     R23, Z+3
   \   00000120   2740               EOR     R20, R16
   \   00000122   2751               EOR     R21, R17
   \   00000124   2762               EOR     R22, R18
   \   00000126   2773               EOR     R23, R19
   \   00000128   8340               ST      Z, R20
   \   0000012A   8351               STD     Z+1, R21
   \   0000012C   8362               STD     Z+2, R22
   \   0000012E   8373               STD     Z+3, R23
     54                cicli0^=cicli1;
   \   00000130   ....               LDI     R30, LOW(cicli1)
   \   00000132   ....               LDI     R31, (cicli1) >> 8
   \   00000134   8100               LD      R16, Z
   \   00000136   8111               LDD     R17, Z+1
   \   00000138   8122               LDD     R18, Z+2
   \   0000013A   8133               LDD     R19, Z+3
   \   0000013C   ....               LDI     R30, LOW(cicli0)
   \   0000013E   ....               LDI     R31, (cicli0) >> 8
   \   00000140   8140               LD      R20, Z
   \   00000142   8151               LDD     R21, Z+1
   \   00000144   8162               LDD     R22, Z+2
   \   00000146   8173               LDD     R23, Z+3
   \   00000148   2740               EOR     R20, R16
   \   0000014A   2751               EOR     R21, R17
   \   0000014C   2762               EOR     R22, R18
   \   0000014E   2773               EOR     R23, R19
   \   00000150   8340               ST      Z, R20
   \   00000152   8351               STD     Z+1, R21
   \   00000154   8362               STD     Z+2, R22
   \   00000156   8373               STD     Z+3, R23
     55                cicli1^=cicli0;
   \   00000158   ....               LDI     R30, LOW(cicli0)
   \   0000015A   ....               LDI     R31, (cicli0) >> 8
   \   0000015C   8100               LD      R16, Z
   \   0000015E   8111               LDD     R17, Z+1
   \   00000160   8122               LDD     R18, Z+2
   \   00000162   8133               LDD     R19, Z+3
   \   00000164   ....               LDI     R30, LOW(cicli1)
   \   00000166   ....               LDI     R31, (cicli1) >> 8
   \   00000168   8140               LD      R20, Z
   \   0000016A   8151               LDD     R21, Z+1
   \   0000016C   8162               LDD     R22, Z+2
   \   0000016E   8173               LDD     R23, Z+3
   \   00000170   2740               EOR     R20, R16
   \   00000172   2751               EOR     R21, R17
   \   00000174   2762               EOR     R22, R18
   \   00000176   2773               EOR     R23, R19
   \   00000178   8340               ST      Z, R20
   \   0000017A   8351               STD     Z+1, R21
   \   0000017C   8362               STD     Z+2, R22
   \   0000017E   8373               STD     Z+3, R23
     56             }
     57              TCCR0 = 0;
   \                     ??main_4:
   \   00000180   E000               LDI     R16, 0
   \   00000182   BF03               OUT     0x33, R16
     58              USART_Transmit('1');
   \   00000184   E301               LDI     R16, 49
   \   00000186   ........           CALL    USART_Transmit
     59              USART_Transmit(':');
   \   0000018A   E30A               LDI     R16, 58
   \   0000018C   ........           CALL    USART_Transmit
     60              PRINTF((void*)(&cicli1),LONG);
   \   00000190   E021               LDI     R18, 1
   \   00000192   ....               LDI     R16, LOW(cicli1)
   \   00000194   ....               LDI     R17, (cicli1) >> 8
   \   00000196   ........           CALL    PRINTF
     61              USART_Transmit('\r');
   \   0000019A   E00D               LDI     R16, 13
   \   0000019C   ........           CALL    USART_Transmit
     62              USART_Transmit('0');
   \   000001A0   E300               LDI     R16, 48
   \   000001A2   ........           CALL    USART_Transmit
     63              USART_Transmit(':');
   \   000001A6   E30A               LDI     R16, 58
   \   000001A8   ........           CALL    USART_Transmit
     64              PRINTF((void*)(&cicli0),LONG);
   \   000001AC   E021               LDI     R18, 1
   \   000001AE   ....               LDI     R16, LOW(cicli0)
   \   000001B0   ....               LDI     R17, (cicli0) >> 8
   \   000001B2   ........           CALL    PRINTF
     65              USART_Transmit('\r');
   \   000001B6   E00D               LDI     R16, 13
   \   000001B8   ........           CALL    USART_Transmit
     66              cnt=0;
   \   000001BC   E000               LDI     R16, 0
   \   000001BE   E010               LDI     R17, 0
   \   000001C0   E020               LDI     R18, 0
   \   000001C2   E030               LDI     R19, 0
   \   000001C4   ....               LDI     R30, LOW(cnt)
   \   000001C6   ....               LDI     R31, (cnt) >> 8
   \   000001C8   8300               ST      Z, R16
   \   000001CA   8311               STD     Z+1, R17
   \   000001CC   8322               STD     Z+2, R18
   \   000001CE   8333               STD     Z+3, R19
   \   000001D0   CF23               RJMP    ??main_0
   \   000001D2                      REQUIRE _A_DDRD
   \   000001D2                      REQUIRE _A_TIMSK
   \   000001D2                      REQUIRE _A_TCCR0
   \   000001D2                      REQUIRE _A_PIND
   \   000001D2                      REQUIRE _A_TCNT0
     67              
     68            }
     69          }

   \                                 In  segment INTVEC, offset 0x24, root
   \                     `??timer0_ovf_int??INTVEC 36`:
   \   00000024   ........           JMP     timer0_ovf_int
     70          
     71          
     72          
     73          
     74          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       1      4  main
                   1 2 -> PRINTF
                   1 2 -> USART_Init
                   1 2 -> USART_Transmit
       7      2  timer0_ovf_int


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??timer0_ovf_int??INTVEC 36
       1  _A_DDRD
       1  _A_PIND
       1  _A_TCCR0
       1  _A_TCNT0
       1  _A_TIMSK
       4  cicli0
       4  cicli1
       4  cnt
       4  cnt1
       4  frecv1
       4  frecv2
     466  main
      62  timer0_ovf_int
       6  -- Other

 
   5 bytes in segment ABSOLUTE
 528 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
  24 bytes in segment NEAR_Z
 
 528 bytes of CODE memory (+ 10 bytes shared)
  24 bytes of DATA memory (+  5 bytes shared)

Errors: none
Warnings: none

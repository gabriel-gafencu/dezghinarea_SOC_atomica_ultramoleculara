###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        18/Dec/2014  14:59:23 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Work2\main.c                                    #
#    Command line =  D:\1307B\Work2\main.c --cpu=m16 -ms -o                   #
#                    D:\1307B\Work2\Debug\Obj\ -lC                            #
#                    D:\1307B\Work2\Debug\List\ -lA                           #
#                    D:\1307B\Work2\Debug\List\ --initializers_in_flash       #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\Work2\Debug\List\main.lst                       #
#    Object file  =  D:\1307B\Work2\Debug\Obj\main.r90                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Work2\main.c
      1          #include<inavr.h>
      2          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1
      3          #include "usart.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          int cnt=0; //variabila pentru întrerupere
   \                     cnt:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      5          long long int FOsc=4008506; //Hz
   \                     FOsc:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for FOsc>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      6          int Fx=1000;//Hz
   \                     Fx:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for Fx>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      7          int N=1; //fara prescaler
   \                     N:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for N>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      8          unsigned char c='0';
   \                     c:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for c>`
      9          //întreruperea de overflow la timer1
     10          #pragma vector=TIMER1_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     11          __interrupt void T1int(void)
   \                     T1int:
     12          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
     13            cnt++;
   \   0000000C   ....               LDI     R30, LOW(cnt)
   \   0000000E   ....               LDI     R31, (cnt) >> 8
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
     14          }
   \   0000001C   BF2F               OUT     0x3F, R18
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   91E9               LD      R30, Y+
   \   00000026   91F9               LD      R31, Y+
   \   00000028   9518               RETI
     15          //configurarea timer 1

   \                                 In  segment CODE, align 2, keep-with-next
     16          void timer1_INIT()
   \                     timer1_INIT:
     17          {
     18            /*
     19            Modul Fast PWM: WGM13:10=1110;
     20            Fãrã prescaler: CS12:10=001;
     21            Compare Output Mode: 10
     22            */
     23            TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS10);
   \   00000000   B50E               IN      R16, 0x2E
   \   00000002   6109               ORI     R16, 0x19
   \   00000004   BD0E               OUT     0x2E, R16
     24            TCCR1A|=(1<<COM1A1)|(1<<WGM11);
   \   00000006   B50F               IN      R16, 0x2F
   \   00000008   6802               ORI     R16, 0x82
   \   0000000A   BD0F               OUT     0x2F, R16
     25            TIMSK|=(1<<TOIE1);
   \   0000000C   B709               IN      R16, 0x39
   \   0000000E   6004               ORI     R16, 0x04
   \   00000010   BF09               OUT     0x39, R16
     26          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_TCCR1B
   \   00000014                      REQUIRE _A_TCCR1A
   \   00000014                      REQUIRE _A_TIMSK
     27          
     28          #pragma vector = USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     29          __interrupt void interrupt_routine_USART_RXC(void)
   \                     interrupt_routine_USART_RXC:
     30          {
   \   00000000   931A               ST      -Y, R17
   \   00000002   930A               ST      -Y, R16
   \   00000004   B71F               IN      R17, 0x3F
     31            c=UDR; 
   \   00000006   B10C               IN      R16, 0x0C
   \   00000008   9300....           STS     c, R16
     32          }
   \   0000000C   BF1F               OUT     0x3F, R17
   \   0000000E   9109               LD      R16, Y+
   \   00000010   9119               LD      R17, Y+
   \   00000012   9518               RETI
   \   00000014                      REQUIRE _A_UDR
     33          
     34          /*
     35          void main()
     36          {
     37          cnt=0;
     38          //factor de umplere variabil (+-)5%, intre 5% si 95% in 5 secunde
     39          double nrCicli=FOsc/Fx/N;
     40          double step=(double)nrCicli/100*5;
     41          double sw=0;
     42          //Alegerea pinului de ie.ire
     43          DDRD|=(1<<PD5);
     44          PORTD&=(1<<PD5);
     45          //Initializarea timer-ului
     46          timer1_INIT();
     47          //Valoarea care se încarca în registru în functie de frecventa necesara
     48          ICR1=nrCicli;
     49          OCR1A=step;
     50          
     51          
     52          //pornirea întreruperii
     53          __enable_interrupt();
     54          
     55          while(1)
     56          {
     57          if(cnt==312)
     58          {
     59          if(sw==0)
     60          {
     61          OCR1A+=step; 
     62          
     63          if(OCR1A>=(double)95/100*nrCicli)
     64          sw=1; 
     65          
     66                }else
     67          {
     68          
     69          OCR1A-=step;
     70          if(OCR1A<=(double)5/100*nrCicli)
     71          sw = 0;
     72          
     73                }
     74          cnt=0;
     75          
     76              }
     77          
     78            }
     79          }*/
     80          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     81          long int duty;
   \                     duty:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     82          long long int DC;
   \                     DC:
   \   00000000                      DS8 8

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     83          long long int DCC;
   \                     DCC:
   \   00000000                      DS8 8
     84          

   \                                 In  segment CODE, align 2, keep-with-next
     85          void main()
   \                     main:
     86          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   9768               SBIW    R29:R28, 24
     87            long long int nrCicli=(FOsc/Fx/N)*1000;
   \   00000006   9100....           LDS     R16, Fx
   \   0000000A   9110....           LDS     R17, (Fx + 1)
   \   0000000E   2F21               MOV     R18, R17
   \   00000010   0F22               LSL     R18
   \   00000012   0B22               SBC     R18, R18
   \   00000014   2F32               MOV     R19, R18
   \   00000016   2F42               MOV     R20, R18
   \   00000018   2F52               MOV     R21, R18
   \   0000001A   2F62               MOV     R22, R18
   \   0000001C   2F72               MOV     R23, R18
   \   0000001E   8308               ST      Y, R16
   \   00000020   8319               STD     Y+1, R17
   \   00000022   832A               STD     Y+2, R18
   \   00000024   833B               STD     Y+3, R19
   \   00000026   834C               STD     Y+4, R20
   \   00000028   835D               STD     Y+5, R21
   \   0000002A   836E               STD     Y+6, R22
   \   0000002C   837F               STD     Y+7, R23
   \   0000002E   9100....           LDS     R16, N
   \   00000032   9110....           LDS     R17, (N + 1)
   \   00000036   2F21               MOV     R18, R17
   \   00000038   0F22               LSL     R18
   \   0000003A   0B22               SBC     R18, R18
   \   0000003C   2F32               MOV     R19, R18
   \   0000003E   2F42               MOV     R20, R18
   \   00000040   2F52               MOV     R21, R18
   \   00000042   2F62               MOV     R22, R18
   \   00000044   2F72               MOV     R23, R18
   \   00000046   8B08               STD     Y+16, R16
   \   00000048   8B19               STD     Y+17, R17
   \   0000004A   8B2A               STD     Y+18, R18
   \   0000004C   8B3B               STD     Y+19, R19
   \   0000004E   8B4C               STD     Y+20, R20
   \   00000050   8B5D               STD     Y+21, R21
   \   00000052   8B6E               STD     Y+22, R22
   \   00000054   8B7F               STD     Y+23, R23
   \   00000056   ....               LDI     R30, LOW(FOsc)
   \   00000058   ....               LDI     R31, (FOsc) >> 8
   \   0000005A   8100               LD      R16, Z
   \   0000005C   8111               LDD     R17, Z+1
   \   0000005E   8122               LDD     R18, Z+2
   \   00000060   8133               LDD     R19, Z+3
   \   00000062   8144               LDD     R20, Z+4
   \   00000064   8155               LDD     R21, Z+5
   \   00000066   8166               LDD     R22, Z+6
   \   00000068   8177               LDD     R23, Z+7
   \   0000006A   01DE               MOVW    R27:R26, R29:R28
   \   0000006C   ........           CALL    ?SLL_DIV_L12
   \   00000070   01DE               MOVW    R27:R26, R29:R28
   \   00000072   9650               ADIW    R27:R26, 16
   \   00000074   ........           CALL    ?SLL_DIV_L12
   \   00000078   8308               ST      Y, R16
   \   0000007A   8319               STD     Y+1, R17
   \   0000007C   832A               STD     Y+2, R18
   \   0000007E   833B               STD     Y+3, R19
   \   00000080   834C               STD     Y+4, R20
   \   00000082   835D               STD     Y+5, R21
   \   00000084   836E               STD     Y+6, R22
   \   00000086   837F               STD     Y+7, R23
   \   00000088   8108               LD      R16, Y
   \   0000008A   8119               LDD     R17, Y+1
   \   0000008C   812A               LDD     R18, Y+2
   \   0000008E   813B               LDD     R19, Y+3
   \   00000090   814C               LDD     R20, Y+4
   \   00000092   815D               LDD     R21, Y+5
   \   00000094   816E               LDD     R22, Y+6
   \   00000096   817F               LDD     R23, Y+7
   \   00000098   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   0000009A   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   0000009C   ........           CALL    ?LL_MUL_L12
   \   000000A0   8708               STD     Y+8, R16
   \   000000A2   8719               STD     Y+9, R17
   \   000000A4   872A               STD     Y+10, R18
   \   000000A6   873B               STD     Y+11, R19
   \   000000A8   874C               STD     Y+12, R20
   \   000000AA   875D               STD     Y+13, R21
   \   000000AC   876E               STD     Y+14, R22
   \   000000AE   877F               STD     Y+15, R23
     88            
     89            //10.5a
     90            
     91            timer1_INIT();
   \   000000B0   ....               RCALL   timer1_INIT
     92            DDRD|=(1<<PD5);
   \   000000B2   9A8D               SBI     0x11, 0x05
     93            PORTD&=(1<<PD5);
   \   000000B4   B302               IN      R16, 0x12
   \   000000B6   7200               ANDI    R16, 0x20
   \   000000B8   BB02               OUT     0x12, R16
     94            
     95            /*
     96            duty=(50L*1000)/100;
     97            DC=duty*nrCicli/1000000; 
     98            */
     99            
    100            
    101            //10.5b,c
    102            int fu=5;
   \   000000BA   E085               LDI     R24, 5
   \   000000BC   E090               LDI     R25, 0
    103            DC=fu*nrCicli/100000;
   \   000000BE   018C               MOVW    R17:R16, R25:R24
   \   000000C0   2F21               MOV     R18, R17
   \   000000C2   0F22               LSL     R18
   \   000000C4   0B22               SBC     R18, R18
   \   000000C6   2F32               MOV     R19, R18
   \   000000C8   2F42               MOV     R20, R18
   \   000000CA   2F52               MOV     R21, R18
   \   000000CC   2F62               MOV     R22, R18
   \   000000CE   2F72               MOV     R23, R18
   \   000000D0   01DE               MOVW    R27:R26, R29:R28
   \   000000D2   9618               ADIW    R27:R26, 8
   \   000000D4   ........           CALL    ?LL_MUL_L12
   \   000000D8   8308               ST      Y, R16
   \   000000DA   8319               STD     Y+1, R17
   \   000000DC   832A               STD     Y+2, R18
   \   000000DE   833B               STD     Y+3, R19
   \   000000E0   834C               STD     Y+4, R20
   \   000000E2   835D               STD     Y+5, R21
   \   000000E4   836E               STD     Y+6, R22
   \   000000E6   837F               STD     Y+7, R23
   \   000000E8   8108               LD      R16, Y
   \   000000EA   8119               LDD     R17, Y+1
   \   000000EC   812A               LDD     R18, Y+2
   \   000000EE   813B               LDD     R19, Y+3
   \   000000F0   814C               LDD     R20, Y+4
   \   000000F2   815D               LDD     R21, Y+5
   \   000000F4   816E               LDD     R22, Y+6
   \   000000F6   817F               LDD     R23, Y+7
   \   000000F8   ....               LDI     R26, LOW(__Constant_186a0_0)
   \   000000FA   ....               LDI     R27, (__Constant_186a0_0) >> 8
   \   000000FC   ........           CALL    ?SLL_DIV_L12
   \   00000100   ....               LDI     R30, LOW(DC)
   \   00000102   ....               LDI     R31, (DC) >> 8
   \   00000104   8300               ST      Z, R16
   \   00000106   8311               STD     Z+1, R17
   \   00000108   8322               STD     Z+2, R18
   \   0000010A   8333               STD     Z+3, R19
   \   0000010C   8344               STD     Z+4, R20
   \   0000010E   8355               STD     Z+5, R21
   \   00000110   8366               STD     Z+6, R22
   \   00000112   8377               STD     Z+7, R23
    104            
    105            
    106            USART_initialize(BAUD_RATE);
   \   00000114   E00C               LDI     R16, 12
   \   00000116   E010               LDI     R17, 0
   \   00000118   ........           CALL    USART_initialize
    107            __enable_interrupt();
   \   0000011C   9478               SEI
    108            /*
    109            ICR1=nrCicli/1000;
    110            OCR1A=DC;
    111            
    112            while(1)
    113            {
    114              //pb 10.5a
    115              
    116              if(c=='+' || c=='-')
    117              {
    118              switch(c)
    119              {
    120            case '+':
    121              if(Fx<=9000)
    122              {
    123              Fx+=1000; 
    124              nrCicli=1000*FOsc/Fx/N; 
    125              DC=duty*nrCicli;
    126              ICR1=nrCicli/1000;
    127              DCC=DC/1000000;
    128              OCR1A=DCC; 
    129              c='0';
    130            }
    131              
    132              break;
    133              
    134            case '-':
    135              
    136              if(Fx>=2000)
    137              {
    138              Fx-=1000; 
    139              nrCicli=1000*FOsc/Fx/N; //
    140              DC=duty*nrCicli;
    141              ICR1=nrCicli/1000;
    142              OCR1A=DC/1000000;
    143              c='0';
    144              
    145            } 
    146              break;
    147              
    148              cnt=0;
    149              
    150            }
    151              
    152            }
    153              
    154            }
    155            }
    156              */
    157              
    158              //10.5b
    159              /*
    160              ICR1=nrCicli/1000;
    161              OCR1A=DC;    
    162              while(1)
    163              {
    164                
    165                
    166                switch(c)
    167                {
    168                case '+':
    169                  if(fu<90)
    170                  {
    171                    fu+=5;
    172                    DC=fu*nrCicli/100;
    173                    OCR1A=DC/1000;
    174                    c='0';   
    175                  }
    176                  
    177                  break;
    178                  
    179                case '-':
    180                  if(fu>10)
    181                  {
    182                    fu-=5;
    183                    DC=fu*nrCicli/100;
    184                    OCR1A=DC/1000; 
    185                    c='0';
    186                  }
    187                  break; 
    188                  
    189                }
    190                cnt=0;
    191                
    192                
    193                
    194              }
    195            }
    196          */
    197          
    198          //10.5C
    199          
    200          ICR1=nrCicli/1000;
   \   0000011E   8508               LDD     R16, Y+8
   \   00000120   8519               LDD     R17, Y+9
   \   00000122   852A               LDD     R18, Y+10
   \   00000124   853B               LDD     R19, Y+11
   \   00000126   854C               LDD     R20, Y+12
   \   00000128   855D               LDD     R21, Y+13
   \   0000012A   856E               LDD     R22, Y+14
   \   0000012C   857F               LDD     R23, Y+15
   \   0000012E   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   00000130   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   00000132   ........           CALL    ?SLL_DIV_L12
   \   00000136   BD17               OUT     0x27, R17
   \   00000138   BD06               OUT     0x26, R16
    201          OCR1A=DC;  
   \   0000013A   ....               LDI     R30, LOW(DC)
   \   0000013C   ....               LDI     R31, (DC) >> 8
   \   0000013E   8100               LD      R16, Z
   \   00000140   8111               LDD     R17, Z+1
   \   00000142   8122               LDD     R18, Z+2
   \   00000144   8133               LDD     R19, Z+3
   \   00000146   8144               LDD     R20, Z+4
   \   00000148   8155               LDD     R21, Z+5
   \   0000014A   8166               LDD     R22, Z+6
   \   0000014C   8177               LDD     R23, Z+7
   \   0000014E   BD1B               OUT     0x2B, R17
   \   00000150   BD0A               OUT     0x2A, R16
    202          while(1)
    203          {
    204          //c=USART_Receive();
    205          
    206          switch(c)
   \                     ??main_0:
   \   00000152   9100....           LDS     R16, c
   \   00000156   520B               SUBI    R16, 43
   \   00000158   F021               BREQ    ??main_1
   \   0000015A   5002               SUBI    R16, 2
   \   0000015C   F409               BRNE    $+2+2
   \   0000015E   C0BE               RJMP    ??main_2
   \   00000160   CFF8               RJMP    ??main_0
    207          {
    208              case '+':
    209          if(fu<92&&Fx<14500)
   \                     ??main_1:
   \   00000162   358C               CPI     R24, 92
   \   00000164   E000               LDI     R16, 0
   \   00000166   0790               CPC     R25, R16
   \   00000168   F7A4               BRGE    ??main_0
   \   0000016A   9100....           LDS     R16, Fx
   \   0000016E   9110....           LDS     R17, (Fx + 1)
   \   00000172   3A04               CPI     R16, 164
   \   00000174   E328               LDI     R18, 56
   \   00000176   0712               CPC     R17, R18
   \   00000178   F764               BRGE    ??main_0
    210          {
    211          fu+=3; 
   \   0000017A   9603               ADIW    R25:R24, 3
    212          Fx+=500;
   \   0000017C   ....               LDI     R30, LOW(Fx)
   \   0000017E   ....               LDI     R31, (Fx) >> 8
   \   00000180   8100               LD      R16, Z
   \   00000182   8111               LDD     R17, Z+1
   \   00000184   500C               SUBI    R16, 12
   \   00000186   4F1E               SBCI    R17, 254
   \   00000188   8300               ST      Z, R16
   \   0000018A   8311               STD     Z+1, R17
    213          nrCicli=FOsc/Fx/N*1000;
   \   0000018C   9100....           LDS     R16, Fx
   \   00000190   9110....           LDS     R17, (Fx + 1)
   \   00000194   2F21               MOV     R18, R17
   \   00000196   0F22               LSL     R18
   \   00000198   0B22               SBC     R18, R18
   \   0000019A   2F32               MOV     R19, R18
   \   0000019C   2F42               MOV     R20, R18
   \   0000019E   2F52               MOV     R21, R18
   \   000001A0   2F62               MOV     R22, R18
   \   000001A2   2F72               MOV     R23, R18
   \   000001A4   8308               ST      Y, R16
   \   000001A6   8319               STD     Y+1, R17
   \   000001A8   832A               STD     Y+2, R18
   \   000001AA   833B               STD     Y+3, R19
   \   000001AC   834C               STD     Y+4, R20
   \   000001AE   835D               STD     Y+5, R21
   \   000001B0   836E               STD     Y+6, R22
   \   000001B2   837F               STD     Y+7, R23
   \   000001B4   9100....           LDS     R16, N
   \   000001B8   9110....           LDS     R17, (N + 1)
   \   000001BC   2F21               MOV     R18, R17
   \   000001BE   0F22               LSL     R18
   \   000001C0   0B22               SBC     R18, R18
   \   000001C2   2F32               MOV     R19, R18
   \   000001C4   2F42               MOV     R20, R18
   \   000001C6   2F52               MOV     R21, R18
   \   000001C8   2F62               MOV     R22, R18
   \   000001CA   2F72               MOV     R23, R18
   \   000001CC   8B08               STD     Y+16, R16
   \   000001CE   8B19               STD     Y+17, R17
   \   000001D0   8B2A               STD     Y+18, R18
   \   000001D2   8B3B               STD     Y+19, R19
   \   000001D4   8B4C               STD     Y+20, R20
   \   000001D6   8B5D               STD     Y+21, R21
   \   000001D8   8B6E               STD     Y+22, R22
   \   000001DA   8B7F               STD     Y+23, R23
   \   000001DC   ....               LDI     R30, LOW(FOsc)
   \   000001DE   ....               LDI     R31, (FOsc) >> 8
   \   000001E0   8100               LD      R16, Z
   \   000001E2   8111               LDD     R17, Z+1
   \   000001E4   8122               LDD     R18, Z+2
   \   000001E6   8133               LDD     R19, Z+3
   \   000001E8   8144               LDD     R20, Z+4
   \   000001EA   8155               LDD     R21, Z+5
   \   000001EC   8166               LDD     R22, Z+6
   \   000001EE   8177               LDD     R23, Z+7
   \   000001F0   01DE               MOVW    R27:R26, R29:R28
   \   000001F2   ........           CALL    ?SLL_DIV_L12
   \   000001F6   01DE               MOVW    R27:R26, R29:R28
   \   000001F8   9650               ADIW    R27:R26, 16
   \   000001FA   ........           CALL    ?SLL_DIV_L12
   \   000001FE   8308               ST      Y, R16
   \   00000200   8319               STD     Y+1, R17
   \   00000202   832A               STD     Y+2, R18
   \   00000204   833B               STD     Y+3, R19
   \   00000206   834C               STD     Y+4, R20
   \   00000208   835D               STD     Y+5, R21
   \   0000020A   836E               STD     Y+6, R22
   \   0000020C   837F               STD     Y+7, R23
   \   0000020E   8108               LD      R16, Y
   \   00000210   8119               LDD     R17, Y+1
   \   00000212   812A               LDD     R18, Y+2
   \   00000214   813B               LDD     R19, Y+3
   \   00000216   814C               LDD     R20, Y+4
   \   00000218   815D               LDD     R21, Y+5
   \   0000021A   816E               LDD     R22, Y+6
   \   0000021C   817F               LDD     R23, Y+7
   \   0000021E   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   00000220   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   00000222   ........           CALL    ?LL_MUL_L12
   \   00000226   8708               STD     Y+8, R16
   \   00000228   8719               STD     Y+9, R17
   \   0000022A   872A               STD     Y+10, R18
   \   0000022C   873B               STD     Y+11, R19
   \   0000022E   874C               STD     Y+12, R20
   \   00000230   875D               STD     Y+13, R21
   \   00000232   876E               STD     Y+14, R22
   \   00000234   877F               STD     Y+15, R23
    214          DC=fu*nrCicli/100;
   \   00000236   018C               MOVW    R17:R16, R25:R24
   \   00000238   2F21               MOV     R18, R17
   \   0000023A   0F22               LSL     R18
   \   0000023C   0B22               SBC     R18, R18
   \   0000023E   2F32               MOV     R19, R18
   \   00000240   2F42               MOV     R20, R18
   \   00000242   2F52               MOV     R21, R18
   \   00000244   2F62               MOV     R22, R18
   \   00000246   2F72               MOV     R23, R18
   \   00000248   01DE               MOVW    R27:R26, R29:R28
   \   0000024A   9618               ADIW    R27:R26, 8
   \   0000024C   ........           CALL    ?LL_MUL_L12
   \   00000250   8308               ST      Y, R16
   \   00000252   8319               STD     Y+1, R17
   \   00000254   832A               STD     Y+2, R18
   \   00000256   833B               STD     Y+3, R19
   \   00000258   834C               STD     Y+4, R20
   \   0000025A   835D               STD     Y+5, R21
   \   0000025C   836E               STD     Y+6, R22
   \   0000025E   837F               STD     Y+7, R23
   \   00000260   8108               LD      R16, Y
   \   00000262   8119               LDD     R17, Y+1
   \   00000264   812A               LDD     R18, Y+2
   \   00000266   813B               LDD     R19, Y+3
   \   00000268   814C               LDD     R20, Y+4
   \   0000026A   815D               LDD     R21, Y+5
   \   0000026C   816E               LDD     R22, Y+6
   \   0000026E   817F               LDD     R23, Y+7
   \   00000270   ....               LDI     R26, LOW(__Constant_64_0)
   \   00000272   ....               LDI     R27, (__Constant_64_0) >> 8
   \   00000274   ........           CALL    ?SLL_DIV_L12
   \   00000278   ....               LDI     R30, LOW(DC)
   \   0000027A   ....               LDI     R31, (DC) >> 8
   \   0000027C   8300               ST      Z, R16
   \   0000027E   8311               STD     Z+1, R17
   \   00000280   8322               STD     Z+2, R18
   \   00000282   8333               STD     Z+3, R19
   \   00000284   8344               STD     Z+4, R20
   \   00000286   8355               STD     Z+5, R21
   \   00000288   8366               STD     Z+6, R22
   \   0000028A   8377               STD     Z+7, R23
    215          ICR1=nrCicli/1000;
   \   0000028C   8508               LDD     R16, Y+8
   \   0000028E   8519               LDD     R17, Y+9
   \   00000290   852A               LDD     R18, Y+10
   \   00000292   853B               LDD     R19, Y+11
   \   00000294   854C               LDD     R20, Y+12
   \   00000296   855D               LDD     R21, Y+13
   \   00000298   856E               LDD     R22, Y+14
   \   0000029A   857F               LDD     R23, Y+15
   \   0000029C   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   0000029E   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   000002A0   ........           CALL    ?SLL_DIV_L12
   \   000002A4   BD17               OUT     0x27, R17
   \   000002A6   BD06               OUT     0x26, R16
    216          OCR1A=DC/1000; 
   \   000002A8   ....               LDI     R30, LOW(DC)
   \   000002AA   ....               LDI     R31, (DC) >> 8
   \   000002AC   8100               LD      R16, Z
   \   000002AE   8111               LDD     R17, Z+1
   \   000002B0   8122               LDD     R18, Z+2
   \   000002B2   8133               LDD     R19, Z+3
   \   000002B4   8144               LDD     R20, Z+4
   \   000002B6   8155               LDD     R21, Z+5
   \   000002B8   8166               LDD     R22, Z+6
   \   000002BA   8177               LDD     R23, Z+7
   \   000002BC   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   000002BE   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   000002C0   ........           CALL    ?SLL_DIV_L12
   \   000002C4   BD1B               OUT     0x2B, R17
   \   000002C6   BD0A               OUT     0x2A, R16
    217          cnt=0;
   \   000002C8   E000               LDI     R16, 0
   \   000002CA   E010               LDI     R17, 0
   \   000002CC   9300....           STS     cnt, R16
   \   000002D0   9310....           STS     (cnt + 1), R17
    218          c='0';
   \   000002D4   E300               LDI     R16, 48
   \   000002D6   9300....           STS     c, R16
    219                }
    220          
    221          break;
   \   000002DA   CF3B               RJMP    ??main_0
    222          
    223              case '-':
    224          if(fu>8&&Fx>100)
   \                     ??main_2:
   \   000002DC   3089               CPI     R24, 9
   \   000002DE   E000               LDI     R16, 0
   \   000002E0   0790               CPC     R25, R16
   \   000002E2   F40C               BRGE    $+2+2
   \   000002E4   CF36               RJMP    ??main_0
   \   000002E6   9100....           LDS     R16, Fx
   \   000002EA   9110....           LDS     R17, (Fx + 1)
   \   000002EE   3605               CPI     R16, 101
   \   000002F0   E020               LDI     R18, 0
   \   000002F2   0712               CPC     R17, R18
   \   000002F4   F40C               BRGE    $+2+2
   \   000002F6   CF2D               RJMP    ??main_0
    225          {
    226          fu-=3; 
   \   000002F8   9703               SBIW    R25:R24, 3
    227          Fx-=500;
   \   000002FA   ....               LDI     R30, LOW(Fx)
   \   000002FC   ....               LDI     R31, (Fx) >> 8
   \   000002FE   8100               LD      R16, Z
   \   00000300   8111               LDD     R17, Z+1
   \   00000302   5F04               SUBI    R16, 244
   \   00000304   4011               SBCI    R17, 1
   \   00000306   8300               ST      Z, R16
   \   00000308   8311               STD     Z+1, R17
    228          nrCicli=FOsc/Fx/N*1000;
   \   0000030A   9100....           LDS     R16, Fx
   \   0000030E   9110....           LDS     R17, (Fx + 1)
   \   00000312   2F21               MOV     R18, R17
   \   00000314   0F22               LSL     R18
   \   00000316   0B22               SBC     R18, R18
   \   00000318   2F32               MOV     R19, R18
   \   0000031A   2F42               MOV     R20, R18
   \   0000031C   2F52               MOV     R21, R18
   \   0000031E   2F62               MOV     R22, R18
   \   00000320   2F72               MOV     R23, R18
   \   00000322   8308               ST      Y, R16
   \   00000324   8319               STD     Y+1, R17
   \   00000326   832A               STD     Y+2, R18
   \   00000328   833B               STD     Y+3, R19
   \   0000032A   834C               STD     Y+4, R20
   \   0000032C   835D               STD     Y+5, R21
   \   0000032E   836E               STD     Y+6, R22
   \   00000330   837F               STD     Y+7, R23
   \   00000332   9100....           LDS     R16, N
   \   00000336   9110....           LDS     R17, (N + 1)
   \   0000033A   2F21               MOV     R18, R17
   \   0000033C   0F22               LSL     R18
   \   0000033E   0B22               SBC     R18, R18
   \   00000340   2F32               MOV     R19, R18
   \   00000342   2F42               MOV     R20, R18
   \   00000344   2F52               MOV     R21, R18
   \   00000346   2F62               MOV     R22, R18
   \   00000348   2F72               MOV     R23, R18
   \   0000034A   8B08               STD     Y+16, R16
   \   0000034C   8B19               STD     Y+17, R17
   \   0000034E   8B2A               STD     Y+18, R18
   \   00000350   8B3B               STD     Y+19, R19
   \   00000352   8B4C               STD     Y+20, R20
   \   00000354   8B5D               STD     Y+21, R21
   \   00000356   8B6E               STD     Y+22, R22
   \   00000358   8B7F               STD     Y+23, R23
   \   0000035A   ....               LDI     R30, LOW(FOsc)
   \   0000035C   ....               LDI     R31, (FOsc) >> 8
   \   0000035E   8100               LD      R16, Z
   \   00000360   8111               LDD     R17, Z+1
   \   00000362   8122               LDD     R18, Z+2
   \   00000364   8133               LDD     R19, Z+3
   \   00000366   8144               LDD     R20, Z+4
   \   00000368   8155               LDD     R21, Z+5
   \   0000036A   8166               LDD     R22, Z+6
   \   0000036C   8177               LDD     R23, Z+7
   \   0000036E   01DE               MOVW    R27:R26, R29:R28
   \   00000370   ........           CALL    ?SLL_DIV_L12
   \   00000374   01DE               MOVW    R27:R26, R29:R28
   \   00000376   9650               ADIW    R27:R26, 16
   \   00000378   ........           CALL    ?SLL_DIV_L12
   \   0000037C   8308               ST      Y, R16
   \   0000037E   8319               STD     Y+1, R17
   \   00000380   832A               STD     Y+2, R18
   \   00000382   833B               STD     Y+3, R19
   \   00000384   834C               STD     Y+4, R20
   \   00000386   835D               STD     Y+5, R21
   \   00000388   836E               STD     Y+6, R22
   \   0000038A   837F               STD     Y+7, R23
   \   0000038C   8108               LD      R16, Y
   \   0000038E   8119               LDD     R17, Y+1
   \   00000390   812A               LDD     R18, Y+2
   \   00000392   813B               LDD     R19, Y+3
   \   00000394   814C               LDD     R20, Y+4
   \   00000396   815D               LDD     R21, Y+5
   \   00000398   816E               LDD     R22, Y+6
   \   0000039A   817F               LDD     R23, Y+7
   \   0000039C   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   0000039E   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   000003A0   ........           CALL    ?LL_MUL_L12
   \   000003A4   8708               STD     Y+8, R16
   \   000003A6   8719               STD     Y+9, R17
   \   000003A8   872A               STD     Y+10, R18
   \   000003AA   873B               STD     Y+11, R19
   \   000003AC   874C               STD     Y+12, R20
   \   000003AE   875D               STD     Y+13, R21
   \   000003B0   876E               STD     Y+14, R22
   \   000003B2   877F               STD     Y+15, R23
    229          DC=fu*nrCicli/100;
   \   000003B4   018C               MOVW    R17:R16, R25:R24
   \   000003B6   2F21               MOV     R18, R17
   \   000003B8   0F22               LSL     R18
   \   000003BA   0B22               SBC     R18, R18
   \   000003BC   2F32               MOV     R19, R18
   \   000003BE   2F42               MOV     R20, R18
   \   000003C0   2F52               MOV     R21, R18
   \   000003C2   2F62               MOV     R22, R18
   \   000003C4   2F72               MOV     R23, R18
   \   000003C6   01DE               MOVW    R27:R26, R29:R28
   \   000003C8   9618               ADIW    R27:R26, 8
   \   000003CA   ........           CALL    ?LL_MUL_L12
   \   000003CE   8308               ST      Y, R16
   \   000003D0   8319               STD     Y+1, R17
   \   000003D2   832A               STD     Y+2, R18
   \   000003D4   833B               STD     Y+3, R19
   \   000003D6   834C               STD     Y+4, R20
   \   000003D8   835D               STD     Y+5, R21
   \   000003DA   836E               STD     Y+6, R22
   \   000003DC   837F               STD     Y+7, R23
   \   000003DE   8108               LD      R16, Y
   \   000003E0   8119               LDD     R17, Y+1
   \   000003E2   812A               LDD     R18, Y+2
   \   000003E4   813B               LDD     R19, Y+3
   \   000003E6   814C               LDD     R20, Y+4
   \   000003E8   815D               LDD     R21, Y+5
   \   000003EA   816E               LDD     R22, Y+6
   \   000003EC   817F               LDD     R23, Y+7
   \   000003EE   ....               LDI     R26, LOW(__Constant_64_0)
   \   000003F0   ....               LDI     R27, (__Constant_64_0) >> 8
   \   000003F2   ........           CALL    ?SLL_DIV_L12
   \   000003F6   ....               LDI     R30, LOW(DC)
   \   000003F8   ....               LDI     R31, (DC) >> 8
   \   000003FA   8300               ST      Z, R16
   \   000003FC   8311               STD     Z+1, R17
   \   000003FE   8322               STD     Z+2, R18
   \   00000400   8333               STD     Z+3, R19
   \   00000402   8344               STD     Z+4, R20
   \   00000404   8355               STD     Z+5, R21
   \   00000406   8366               STD     Z+6, R22
   \   00000408   8377               STD     Z+7, R23
    230          ICR1=nrCicli/1000;
   \   0000040A   8508               LDD     R16, Y+8
   \   0000040C   8519               LDD     R17, Y+9
   \   0000040E   852A               LDD     R18, Y+10
   \   00000410   853B               LDD     R19, Y+11
   \   00000412   854C               LDD     R20, Y+12
   \   00000414   855D               LDD     R21, Y+13
   \   00000416   856E               LDD     R22, Y+14
   \   00000418   857F               LDD     R23, Y+15
   \   0000041A   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   0000041C   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   0000041E   ........           CALL    ?SLL_DIV_L12
   \   00000422   BD17               OUT     0x27, R17
   \   00000424   BD06               OUT     0x26, R16
    231          OCR1A=DC/1000;  
   \   00000426   ....               LDI     R30, LOW(DC)
   \   00000428   ....               LDI     R31, (DC) >> 8
   \   0000042A   8100               LD      R16, Z
   \   0000042C   8111               LDD     R17, Z+1
   \   0000042E   8122               LDD     R18, Z+2
   \   00000430   8133               LDD     R19, Z+3
   \   00000432   8144               LDD     R20, Z+4
   \   00000434   8155               LDD     R21, Z+5
   \   00000436   8166               LDD     R22, Z+6
   \   00000438   8177               LDD     R23, Z+7
   \   0000043A   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   0000043C   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   0000043E   ........           CALL    ?SLL_DIV_L12
   \   00000442   BD1B               OUT     0x2B, R17
   \   00000444   BD0A               OUT     0x2A, R16
    232          cnt=0;
   \   00000446   E000               LDI     R16, 0
   \   00000448   E010               LDI     R17, 0
   \   0000044A   9300....           STS     cnt, R16
   \   0000044E   9310....           STS     (cnt + 1), R17
    233          c='0';
   \   00000452   E300               LDI     R16, 48
   \   00000454   9300....           STS     c, R16
    234                }
    235          
    236          break;
   \   00000458   CE7C               RJMP    ??main_0
   \   0000045A                      REQUIRE _A_DDRD
   \   0000045A                      REQUIRE _A_PORTD
   \   0000045A                      REQUIRE _A_ICR1
   \   0000045A                      REQUIRE _A_OCR1A
    237              } 
    238            }
    239          
    240          }

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_3e8_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_186a0_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_1`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_64_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_2`

   \                                 In  segment INTVEC, offset 0x20, root
   \                     `??T1int??INTVEC 32`:
   \   00000020   ........           JMP     T1int

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??interrupt_routine_USART_RXC??INTVEC 44`:
   \   0000002C   ........           JMP     interrupt_routine_USART_RXC

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for FOsc>`:
   \   00000000   2A3A003D0000       DD 4008506, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Fx>`:
   \   00000000   03E8               DC16 1000

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for N>`:
   \   00000000   0001               DC16 1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for c>`:
   \   00000000   30                 DC8 48

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   03E800000000       DD 1000, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_1`:
   \   00000000   86A000010000       DD 100000, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_2`:
   \   00000000   006400000000       DD 100, 0
   \              0000        

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       5      2  T1int
       2      2  interrupt_routine_USART_RXC
      28      4  main
                   28 2 -> USART_initialize
                   28 2 -> timer1_INIT
       0      2  timer1_INIT


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for 64 Bit Constant>_0
       8  ?<Initializer for 64 Bit Constant>_1
       8  ?<Initializer for 64 Bit Constant>_2
       8  ?<Initializer for FOsc>
       2  ?<Initializer for Fx>
       2  ?<Initializer for N>
       1  ?<Initializer for c>
       4  ??T1int??INTVEC 32
       4  ??interrupt_routine_USART_RXC??INTVEC 44
       8  DC
       8  DCC
       8  FOsc
       2  Fx
       2  N
      42  T1int
       1  _A_DDRD
       2  _A_ICR1
       2  _A_OCR1A
       1  _A_PORTD
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TIMSK
       1  _A_UDR
       8  __Constant_186a0_0
       8  __Constant_3e8_0
       8  __Constant_64_0
       1  c
       2  cnt
       4  duty
      20  interrupt_routine_USART_RXC
    1114  main
      20  timer1_INIT
      12  -- Other

 
    10 bytes in segment ABSOLUTE
 1 196 bytes in segment CODE
    12 bytes in segment INITTAB
     8 bytes in segment INTVEC
    37 bytes in segment NEAR_I
    37 bytes in segment NEAR_ID
    22 bytes in segment NEAR_Z
 
 1 209 bytes of CODE memory (+ 44 bytes shared)
    35 bytes of DATA memory (+ 34 bytes shared)

Errors: none
Warnings: none

///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       06/Jan/2015  21:46:01 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\1307B\Periodmetru\P2\usart.c                         /
//    Command line =  D:\1307B\Periodmetru\P2\usart.c --cpu=m16 -ms -o        /
//                    D:\1307B\Periodmetru\P2\Debug\Obj\ -lC                  /
//                    D:\1307B\Periodmetru\P2\Debug\List\ -lA                 /
//                    D:\1307B\Periodmetru\P2\Debug\List\                     /
//                    --initializers_in_flash --no_cse --no_inline            /
//                    --no_code_motion --no_cross_call --no_clustering        /
//                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e           /
//                    --eeprom_size 512 --clib -On                            /
//    List file    =  D:\1307B\Periodmetru\P2\Debug\List\usart.s90            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME usart

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK `??interrupt_routine_USART_RXC??INTVEC 44`
        PUBWEAK `??interrupt_routine_USART_TXC??INTVEC 52`
        PUBLIC USART_Receive
        FUNCTION USART_Receive,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC USART_initialize
        FUNCTION USART_initialize,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC USART_transmit
        FUNCTION USART_transmit,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_DDRD
        PUBWEAK _A_UBRRH
        PUBWEAK _A_UBRRL
        PUBWEAK _A_UCSRA
        PUBWEAK _A_UCSRB
        PUBWEAK _A_UDR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC interrupt_routine_USART_RXC
        FUNCTION interrupt_routine_USART_RXC,0233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC interrupt_routine_USART_TXC
        FUNCTION interrupt_routine_USART_TXC,0233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
interrupt_routine_USART_RXC SYMBOL "interrupt_routine_USART_RXC"
`??interrupt_routine_USART_RXC??INTVEC 44` SYMBOL "??INTVEC 44", interrupt_routine_USART_RXC
interrupt_routine_USART_TXC SYMBOL "interrupt_routine_USART_TXC"
`??interrupt_routine_USART_TXC??INTVEC 52` SYMBOL "??INTVEC 52", interrupt_routine_USART_TXC

// D:\1307B\Periodmetru\P2\usart.c
//    1 
//    2 #include "usart.h"

        ASEGN ABSOLUTE:DATA:NOROOT,040H
// union <unnamed> volatile __io _A_UBRRH
_A_UBRRH:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02cH
// union <unnamed> volatile __io _A_UDR
_A_UDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02bH
// union <unnamed> volatile __io _A_UCSRA
_A_UCSRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02aH
// union <unnamed> volatile __io _A_UCSRB
_A_UCSRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,029H
// union <unnamed> volatile __io _A_UBRRL
_A_UBRRL:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
//    3 void USART_initialize(unsigned short int baud_rate)
USART_initialize:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function USART_initialize
//    4 {
//    5   /* seteazã baud rate */
//    6   UBRRH = (unsigned char)(baud_rate >> 8);
        MOVW    R19:R18, R17:R16
        MOV     R18, R19
        LDI     R19, 0
        OUT     0x20, R18
//    7   UBRRL = (unsigned char)(baud_rate & 0xFF);
        MOV     R18, R16
        OUT     0x09, R18
//    8   UCSRB = (1 << RXEN) | (1 << TXEN); /* activeazã transmisia .i recep.ia la ie.ire */
        LDI     R18, 24
        OUT     0x0A, R18
//    9   /* seteazã pinul TXD: ie.ire */
//   10   DDRD |= (1 << PD1);
        SBI     0x11, 0x01
//   11   /* seteazã pinul RXD: intrare */
//   12   DDRD &= ~(1 << PD0);
        CBI     0x11, 0x00
//   13   /* activeazã întreruperea */
//   14   UCSRB |= (1 << RXCIE);
        SBI     0x0A, 0x07
//   15   UCSRB |= (1 << TXCIE);
        SBI     0x0A, 0x06
//   16 }
        RET
          CFI EndBlock cfiBlock0
        REQUIRE _A_UBRRH
        REQUIRE _A_UBRRL
        REQUIRE _A_UCSRB
        REQUIRE _A_DDRD
//   17 

        RSEG CODE:CODE:NOROOT(1)
//   18 void USART_transmit( unsigned char data)
USART_transmit:
??USART_transmit_0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function USART_transmit
//   19 {
//   20   /* a.teaptã pânã ce se terminã de transmis toate datele .i dupã trece la urmãtoarele informa.ii */
//   21   while (!( UCSRA & (1 << UDRE)))
        SBIS    0x0B, 0x05
        RJMP    ??USART_transmit_0
//   22   {
//   23     ;
//   24   }
//   25   UDR = data;
        OUT     0x0C, R16
//   26 }
        RET
          CFI EndBlock cfiBlock1
        REQUIRE _A_UCSRA
        REQUIRE _A_UDR

        RSEG CODE:CODE:NOROOT(1)
//   27 unsigned char USART_Receive(void)
USART_Receive:
??USART_Receive_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function USART_Receive
//   28 {
//   29   /* A.teapta recep.ionarea datelor */
//   30   while ( !(UCSRA & (1<<RXC)) )
        SBIS    0x0B, 0x07
        RJMP    ??USART_Receive_0
//   31   {
//   32     ;
//   33   }
//   34   /* Preia .i returneaza datele recep.ionate din buffer */
//   35   return UDR;
        IN      R16, 0x0C
        RET
          CFI EndBlock cfiBlock2
        REQUIRE _A_UCSRA
        REQUIRE _A_UDR
//   36 }
//   37 
//   38 #pragma vector = USART_TXC_vect

        RSEG CODE:CODE:NOROOT(1)
//   39 __interrupt void interrupt_routine_USART_TXC(void)
interrupt_routine_USART_TXC:
          CFI Block cfiBlock3 Using cfiCommon1
          CFI Function interrupt_routine_USART_TXC
//   40 {
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        IN      R18, 0x3F
//   41   unsigned char test = 0;
        LDI     R16, 0
//   42   test += 1;
        INC     R16
//   43 }
        OUT     0x3F, R18
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+2
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+1
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock3
//   44 #pragma vector = USART_RXC_vect

        RSEG CODE:CODE:NOROOT(1)
//   45 __interrupt void interrupt_routine_USART_RXC(void)
interrupt_routine_USART_RXC:
          CFI Block cfiBlock4 Using cfiCommon1
          CFI Function interrupt_routine_USART_RXC
//   46 {
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        IN      R16, 0x3F
//   47   
//   48 }
        OUT     0x3F, R16
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock4

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 44
`??interrupt_routine_USART_RXC??INTVEC 44`:
        JMP     interrupt_routine_USART_RXC

        COMMON INTVEC:CODE:ROOT(1)
        ORG 52
`??interrupt_routine_USART_TXC??INTVEC 52`:
        JMP     interrupt_routine_USART_TXC

        END
// 
//  6 bytes in segment ABSOLUTE
// 74 bytes in segment CODE
//  8 bytes in segment INTVEC
// 
// 74 bytes of CODE memory (+ 8 bytes shared)
//  0 bytes of DATA memory (+ 6 bytes shared)
//
//Errors: none
//Warnings: none

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        22/Dec/2014  15:22:25 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\WD\main.c                                       #
#    Command line =  D:\1307B\WD\main.c --cpu=m16 -ms -o                      #
#                    D:\1307B\WD\Debug\Obj\ -lC D:\1307B\WD\Debug\List\ -lB   #
#                    D:\1307B\WD\Debug\List\ --initializers_in_flash          #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --module_name= --debug         #
#                    --no_ubrof_messages -DENABLE_BIT_DEFINITIONS -e          #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\1307B\WD\Debug\List\main.lst                          #
#    Object file  =  D:\1307B\WD\Debug\Obj\main.r90                           #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\WD\main.c
      1          #include <iom16.h>

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include <inavr.h>
      3          

   \                                 In  segment NEAR_N, align 1, keep-with-next
      4          __no_init int flag;
   \                     flag:
   \   00000000                      DS8 2

   \                                 In  segment CODE, align 2, keep-with-next
      5          void main( void )
   \                     main:
      6          {
      7           
      8            TCNT1=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   E010               LDI     R17, 0
   \   00000004   BD1D               OUT     0x2D, R17
   \   00000006   BD0C               OUT     0x2C, R16
      9            TCCR1B = (1<<CS11);
   \   00000008   E002               LDI     R16, 2
   \   0000000A   BD0E               OUT     0x2E, R16
     10            DDRD|=(1<<PD5);
   \   0000000C   9A8D               SBI     0x11, 0x05
     11            if(flag)
   \   0000000E   9100....           LDS     R16, flag
   \   00000012   9110....           LDS     R17, (flag + 1)
   \   00000016   2B01               OR      R16, R17
   \   00000018   F061               BREQ    ??main_0
     12           {
     13            
     14          
     15             flag = 0;
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   9300....           STS     flag, R16
   \   00000022   9310....           STS     (flag + 1), R17
     16             PORTD=(0<<PD5);
   \   00000026   E000               LDI     R16, 0
   \   00000028   BB02               OUT     0x12, R16
     17             WDTCR|=(1<<WDP1);
   \   0000002A   B501               IN      R16, 0x21
   \   0000002C   6002               ORI     R16, 0x02
   \   0000002E   BD01               OUT     0x21, R16
   \   00000030   C00A               RJMP    ??main_1
     18            
     19             
     20            }
     21            else
     22            {
     23               flag = 1;
   \                     ??main_0:
   \   00000032   E001               LDI     R16, 1
   \   00000034   E010               LDI     R17, 0
   \   00000036   9300....           STS     flag, R16
   \   0000003A   9310....           STS     (flag + 1), R17
     24               PORTD=(1<<PD5);
   \   0000003E   E200               LDI     R16, 32
   \   00000040   BB02               OUT     0x12, R16
     25               WDTCR =0;
   \   00000042   E000               LDI     R16, 0
   \   00000044   BD01               OUT     0x21, R16
     26             
     27               
     28             
     29            }
     30          
     31            WDTCR|=(1<<WDE);
   \                     ??main_1:
   \   00000046   B501               IN      R16, 0x21
   \   00000048   6008               ORI     R16, 0x08
   \   0000004A   BD01               OUT     0x21, R16
     32             __watchdog_reset();
   \   0000004C   95A8               WDR
     33             
     34            while(1);
   \                     ??main_2:
   \   0000004E   CFFF               RJMP    ??main_2
   \   00000050                      REQUIRE _A_TCNT1
   \   00000050                      REQUIRE _A_TCCR1B
   \   00000050                      REQUIRE _A_DDRD
   \   00000050                      REQUIRE _A_PORTD
   \   00000050                      REQUIRE _A_WDTCR
     35          
     36          
     37          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       0      2  main


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_DDRD
       1  _A_PORTD
       1  _A_TCCR1B
       2  _A_TCNT1
       1  _A_WDTCR
       2  flag
      80  main

 
  6 bytes in segment ABSOLUTE
 80 bytes in segment CODE
  2 bytes in segment NEAR_N
 
 80 bytes of CODE memory
  2 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none

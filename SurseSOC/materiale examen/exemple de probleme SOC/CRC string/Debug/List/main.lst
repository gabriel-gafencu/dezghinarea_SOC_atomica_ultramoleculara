###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        21/Dec/2014  19:21:35 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\CRC string\main.c                               #
#    Command line =  "D:\1307B\CRC string\main.c" --cpu=m16 -ms -o            #
#                    "D:\1307B\CRC string\Debug\Obj\" -lC "D:\1307B\CRC       #
#                    string\Debug\List\" -lA "D:\1307B\CRC                    #
#                    string\Debug\List\" --initializers_in_flash --no_cse     #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\CRC string\Debug\List\main.lst                  #
#    Object file  =  D:\1307B\CRC string\Debug\Obj\main.r90                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\CRC string\main.c
      1          #include <inavr.h> //include biblioteca inavr.h
      2          #include <iom16.h> //include biblioteca iom16.h

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1
      3          #include "usart.h"
      4          
      5          #define CRC16_CCITT 0x1021 
      6          
      7          
      8          
      9          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     10          unsigned char vect[20]={'\0'};
   \                     vect:
   \   00000000                      DS8 20

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     11          unsigned int index=0;
   \                     index:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     12          int flag=0;
   \                     flag:
   \   00000000                      DS8 2
     13          
     14          #pragma vector = USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     15          __interrupt void interrupt_routine_USART_RXC(void)
   \                     interrupt_routine_USART_RXC:
     16          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   933A               ST      -Y, R19
   \   00000006   932A               ST      -Y, R18
   \   00000008   931A               ST      -Y, R17
   \   0000000A   930A               ST      -Y, R16
   \   0000000C   B73F               IN      R19, 0x3F
     17            unsigned char c;
     18            c=UDR;
   \   0000000E   B10C               IN      R16, 0x0C
   \   00000010   2F20               MOV     R18, R16
     19            
     20            if(flag==0)
   \   00000012   9100....           LDS     R16, flag
   \   00000016   9110....           LDS     R17, (flag + 1)
   \   0000001A   2B01               OR      R16, R17
   \   0000001C   F4C9               BRNE    ??interrupt_routine_USART_RXC_0
     21            {
     22              if(c!='@')
   \   0000001E   3420               CPI     R18, 64
   \   00000020   F089               BREQ    ??interrupt_routine_USART_RXC_1
     23              {
     24                vect[index]=c;
   \   00000022   9100....           LDS     R16, index
   \   00000026   9110....           LDS     R17, (index + 1)
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(vect) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(vect) & 0xFFFF) >> 8
   \   00000030   8320               ST      Z, R18
     25                index+=1;
   \   00000032   ....               LDI     R30, LOW(index)
   \   00000034   ....               LDI     R31, (index) >> 8
   \   00000036   8100               LD      R16, Z
   \   00000038   8111               LDD     R17, Z+1
   \   0000003A   5F0F               SUBI    R16, 255
   \   0000003C   4F1F               SBCI    R17, 255
   \   0000003E   8300               ST      Z, R16
   \   00000040   8311               STD     Z+1, R17
   \   00000042   C006               RJMP    ??interrupt_routine_USART_RXC_0
     26                
     27              }
     28              else
     29              {
     30                flag=1;
   \                     ??interrupt_routine_USART_RXC_1:
   \   00000044   E001               LDI     R16, 1
   \   00000046   E010               LDI     R17, 0
   \   00000048   9300....           STS     flag, R16
   \   0000004C   9310....           STS     (flag + 1), R17
     31              }
     32            }
     33            
     34            
     35          }
   \                     ??interrupt_routine_USART_RXC_0:
   \   00000050   BF3F               OUT     0x3F, R19
   \   00000052   9109               LD      R16, Y+
   \   00000054   9119               LD      R17, Y+
   \   00000056   9129               LD      R18, Y+
   \   00000058   9139               LD      R19, Y+
   \   0000005A   91E9               LD      R30, Y+
   \   0000005C   91F9               LD      R31, Y+
   \   0000005E   9518               RETI
   \   00000060                      REQUIRE _A_UDR
     36          

   \                                 In  segment CODE, align 2, keep-with-next
     37          unsigned int crc16Char(unsigned int polinom16, unsigned int init_val_16,unsigned char* adr_start,unsigned int len, int ord)
   \                     crc16Char:
     38          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   0108               MOVW    R1:R0, R17:R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
   \   00000008   01FA               MOVW    R31:R30, R21:R20
   \   0000000A   812C               LDD     R18, Y+4
   \   0000000C   813D               LDD     R19, Y+5
     39            //rezultatul final
     40            unsigned int crc = init_val_16;
   \   0000000E   0181               MOVW    R17:R16, R3:R2
     41            //reþine în octetul cel mai semnificativ datele
     42            //extrase din memoria flash
     43            unsigned int data = 0;
   \   00000010   E040               LDI     R20, 0
   \   00000012   E050               LDI     R21, 0
     44            
     45            while( len-- ) {
   \                     ??crc16Char_0:
   \   00000014   01CB               MOVW    R25:R24, R23:R22
   \   00000016   01BC               MOVW    R23:R22, R25:R24
   \   00000018   5061               SUBI    R22, 1
   \   0000001A   4070               SBCI    R23, 0
   \   0000001C   2B89               OR      R24, R25
   \   0000001E   F189               BREQ    ??crc16Char_1
     46              unsigned int i;
     47              //se extrage valoarea unui octet de la adresa de start
     48              //din memoria flash
     49              data = *(__flash char *)adr_start;
   \   00000020   9184               LPM     R24, Z
   \   00000022   E090               LDI     R25, 0
   \   00000024   01AC               MOVW    R21:R20, R25:R24
     50              if ( ord == MSBF ) //opþiunea cu shiftare spre MSB
   \   00000026   3021               CPI     R18, 1
   \   00000028   E080               LDI     R24, 0
   \   0000002A   0738               CPC     R19, R24
   \   0000002C   F4B1               BRNE    ??crc16Char_2
     51              {
     52                //octetul este shiftat la stânga pentru a se alinia
     53                //cu polinomul generator
     54                data <<= 8;
   \   0000002E   2F54               MOV     R21, R20
   \   00000030   E040               LDI     R20, 0
     55                //datele sunt "transferate" în rezultat
     56                crc ^= data;
   \   00000032   2704               EOR     R16, R20
   \   00000034   2715               EOR     R17, R21
     57                adr_start++;
   \   00000036   9631               ADIW    R31:R30, 1
     58                //pentru biþii de date se face XOR cu polinomul generator,
     59                //daca bitul cel mai semnificativ este 1 sau se shifteaza datele
     60                //la stânga, dacã bitul cel mai semnificativ este 0
     61                for( i = 0; i < 8; ++i ) {
   \   00000038   E0A0               LDI     R26, 0
   \   0000003A   E0B0               LDI     R27, 0
   \                     ??crc16Char_3:
   \   0000003C   30A8               CPI     R26, 8
   \   0000003E   E080               LDI     R24, 0
   \   00000040   07B8               CPC     R27, R24
   \   00000042   F740               BRCC    ??crc16Char_0
     62                  //se verificã dacã bitul cel mai semnificativ este 1
     63                  if( crc & 0x8000 )
   \   00000044   FB17               BST     R17, 7
   \   00000046   F42E               BRTC    ??crc16Char_4
     64                    crc = (crc << 1) ^ polinom16;
   \   00000048   0F00               LSL     R16
   \   0000004A   1F11               ROL     R17
   \   0000004C   2500               EOR     R16, R0
   \   0000004E   2511               EOR     R17, R1
   \   00000050   C002               RJMP    ??crc16Char_5
     65                  else
     66                    crc = crc << 1;
   \                     ??crc16Char_4:
   \   00000052   0F00               LSL     R16
   \   00000054   1F11               ROL     R17
     67                }
   \                     ??crc16Char_5:
   \   00000056   9611               ADIW    R27:R26, 1
   \   00000058   CFF1               RJMP    ??crc16Char_3
     68              }
     69              else
     70                //opþiunea cu shiftare spre LSB
     71                //parametrul polinom16 al funcþiei trebuie sã aibã biþii inversaþi în
     72                //prealabil
     73              {
     74                crc ^= data;
   \                     ??crc16Char_2:
   \   0000005A   2704               EOR     R16, R20
   \   0000005C   2715               EOR     R17, R21
     75                adr_start++;
   \   0000005E   9631               ADIW    R31:R30, 1
     76                //se verificã bitul cel mai putin semnificativ .i dacã
     77                //acesta este 1 se face XOR cu polinomul generator,
     78                // altfel datele sunt shiftate la dreapta
     79                for( i = 0; i < 8; ++i ) {
   \   00000060   E0A0               LDI     R26, 0
   \   00000062   E0B0               LDI     R27, 0
   \                     ??crc16Char_6:
   \   00000064   30A8               CPI     R26, 8
   \   00000066   E080               LDI     R24, 0
   \   00000068   07B8               CPC     R27, R24
   \   0000006A   F6A0               BRCC    ??crc16Char_0
     80                  //se verificã daca cel mai puþin semnificativ bit este 1
     81                  if( crc & 0x0001 )
   \   0000006C   FB00               BST     R16, 0
   \   0000006E   F42E               BRTC    ??crc16Char_7
     82                    crc = (crc >> 1) ^ polinom16;
   \   00000070   9516               LSR     R17
   \   00000072   9507               ROR     R16
   \   00000074   2500               EOR     R16, R0
   \   00000076   2511               EOR     R17, R1
   \   00000078   C002               RJMP    ??crc16Char_8
     83                  else
     84                    crc = crc >> 1;
   \                     ??crc16Char_7:
   \   0000007A   9516               LSR     R17
   \   0000007C   9507               ROR     R16
     85                }
   \                     ??crc16Char_8:
   \   0000007E   9611               ADIW    R27:R26, 1
   \   00000080   CFF1               RJMP    ??crc16Char_6
     86              }
     87            }
     88            return crc;
   \                     ??crc16Char_1:
   \   00000082   E0E6               LDI     R30, 6
   \   00000084   ........           JMP     ?EPILOGUE_B4_L09
     89          }
     90          
     91          //aceasta implementare utilizeazã o tabelã cu valori pre-calculate ale //funcþiei CRC16

   \                                 In  segment NEAR_F, align 1, keep-with-next
     92          __flash const unsigned int crc16tab[256]= { 0x0000,0x1021,0x2042,0x3063,0x4084,0x50a5,0x60c6,0x70e7, 0x8108,0x9129,0xa14a,0xb16b,0xc18c,0xd1ad,0xe1ce,0xf1ef, 0x1231,0x0210,0x3273,0x2252,0x52b5,0x4294,0x72f7,0x62d6, 0x9339,0x8318,0xb37b,0xa35a,0xd3bd,0xc39c,0xf3ff,0xe3de, 0x2462,0x3443,0x0420,0x1401,0x64e6,0x74c7,0x44a4,0x5485, 0xa56a,0xb54b,0x8528,0x9509,0xe5ee,0xf5cf,0xc5ac,0xd58d, 0x3653,0x2672,0x1611,0x0630,0x76d7,0x66f6,0x5695,0x46b4, 0xb75b,0xa77a,0x9719,0x8738,0xf7df,0xe7fe,0xd79d,0xc7bc, 0x48c4,0x58e5,0x6886,0x78a7,0x0840,0x1861,0x2802,0x3823, 0xc9cc,0xd9ed,0xe98e,0xf9af,0x8948,0x9969,0xa90a,0xb92b, 0x5af5,0x4ad4,0x7ab7,0x6a96,0x1a71,0x0a50,0x3a33,0x2a12, 0xdbfd,0xcbdc,0xfbbf,0xeb9e,0x9b79,0x8b58,0xbb3b,0xab1a, 0x6ca6,0x7c87,0x4ce4,0x5cc5,0x2c22,0x3c03,0x0c60,0x1c41, 0xedae,0xfd8f,0xcdec,0xddcd,0xad2a,0xbd0b,0x8d68,0x9d49, 0x7e97,0x6eb6,0x5ed5,0x4ef4,0x3e13,0x2e32,0x1e51,0x0e70, 0xff9f,0xefbe,0xdfdd,0xcffc,0xbf1b,0xaf3a,0x9f59,0x8f78, 0x9188,0x81a9,0xb1ca,0xa1eb,0xd10c,0xc12d,0xf14e,0xe16f, 0x1080,0x00a1,0x30c2,0x20e3,0x5004,0x4025,0x7046,0x6067, 0x83b9,0x9398,0xa3fb,0xb3da,0xc33d,0xd31c,0xe37f,0xf35e, 0x02b1,0x1290,0x22f3,0x32d2,0x4235,0x5214,0x6277,0x7256, 0xb5ea,0xa5cb,0x95a8,0x8589,0xf56e,0xe54f,0xd52c,0xc50d, 0x34e2,0x24c3,0x14a0,0x0481,0x7466,0x6447,0x5424,0x4405, 0xa7db,0xb7fa,0x8799,0x97b8,0xe75f,0xf77e,0xc71d,0xd73c, 0x26d3,0x36f2,0x0691,0x16b0,0x6657,0x7676,0x4615,0x5634, 0xd94c,0xc96d,0xf90e,0xe92f,0x99c8,0x89e9,0xb98a,0xa9ab, 0x5844,0x4865,0x7806,0x6827,0x18c0,0x08e1,0x3882,0x28a3, 0xcb7d,0xdb5c,0xeb3f,0xfb1e,0x8bf9,0x9bd8,0xabbb,0xbb9a, 0x4a75,0x5a54,0x6a37,0x7a16,0x0af1,0x1ad0,0x2ab3,0x3a92, 0xfd2e,0xed0f,0xdd6c,0xcd4d,0xbdaa,0xad8b,0x9de8,0x8dc9, 0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1, 0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8, 0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0 };
   \                     crc16tab:
   \   00000000   000010212042       DC16 0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161
   \              3063408450A5
   \              60C670E78108
   \              9129        
   \   00000014   A14AB16BC18C       DC16 41290, 45419, 49548, 53677, 57806, 61935, 4657, 528, 12915, 8786
   \              D1ADE1CEF1EF
   \              123102103273
   \              2252        
   \   00000028   52B5429472F7       DC16 21173, 17044, 29431, 25302, 37689, 33560, 45947, 41818, 54205
   \              62D693398318
   \              B37BA35AD3BD
   \   0000003A   C39CF3FFE3DE       DC16 50076, 62463, 58334, 9314, 13379, 1056, 5121, 25830, 29895, 17572
   \              246234430420
   \              140164E674C7
   \              44A4        
   \   0000004E   5485A56AB54B       DC16 21637, 42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669
   \              85289509E5EE
   \              F5CFC5ACD58D
   \   00000060   365326721611       DC16 13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100, 46939, 42874
   \              063076D766F6
   \              569546B4B75B
   \              A77A        
   \   00000074   97198738F7DF       DC16 38681, 34616, 63455, 59390, 55197, 51132, 18628, 22757, 26758
   \              E7FED79DC7BC
   \              48C458E56886
   \   00000086   78A708401861       DC16 30887, 2112, 6241, 10242, 14371, 51660, 55789, 59790, 63919, 35144
   \              28023823C9CC
   \              D9EDE98EF9AF
   \              8948        
   \   0000009A   9969A90AB92B       DC16 39273, 43274, 47403, 23285, 19156, 31415, 27286, 6769, 2640, 14899
   \              5AF54AD47AB7
   \              6A961A710A50
   \              3A33        
   \   000000AE   2A12DBFDCBDC       DC16 10770, 56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802
   \              FBBFEB9E9B79
   \              8B58BB3BAB1A
   \   000000C0   6CA67C874CE4       DC16 27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233, 60846, 64911
   \              5CC52C223C03
   \              0C601C41EDAE
   \              FD8F        
   \   000000D4   CDECDDCDAD2A       DC16 52716, 56781, 44330, 48395, 36200, 40265, 32407, 28342, 24277
   \              BD0B8D689D49
   \              7E976EB65ED5
   \   000000E6   4EF43E132E32       DC16 20212, 15891, 11826, 7761, 3696, 65439, 61374, 57309, 53244, 48923
   \              1E510E70FF9F
   \              EFBEDFDDCFFC
   \              BF1B        
   \   000000FA   AF3A9F598F78       DC16 44858, 40793, 36728, 37256, 33193, 45514, 41451, 53516, 49453
   \              918881A9B1CA
   \              A1EBD10CC12D
   \   0000010C   F14EE16F1080       DC16 61774, 57711, 4224, 161, 12482, 8419, 20484, 16421, 28742, 24679
   \              00A130C220E3
   \              500440257046
   \              6067        
   \   00000120   83B99398A3FB       DC16 33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302, 689, 4752
   \              B3DAC33DD31C
   \              E37FF35E02B1
   \              1290        
   \   00000134   22F332D24235       DC16 8947, 13010, 16949, 21012, 25207, 29270, 46570, 42443, 38312
   \              521462777256
   \              B5EAA5CB95A8
   \   00000146   8589F56EE54F       DC16 34185, 62830, 58703, 54572, 50445, 13538, 9411, 5280, 1153, 29798
   \              D52CC50D34E2
   \              24C314A00481
   \              7466        
   \   0000015A   644754244405       DC16 25671, 21540, 17413, 42971, 47098, 34713, 38840, 59231, 63358
   \              A7DBB7FA8799
   \              97B8E75FF77E
   \   0000016C   C71DD73C26D3       DC16 50973, 55100, 9939, 14066, 1681, 5808, 26199, 30326, 17941, 22068
   \              36F2069116B0
   \              665776764615
   \              5634        
   \   00000180   D94CC96DF90E       DC16 55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435, 22596
   \              E92F99C889E9
   \              B98AA9AB5844
   \   00000192   486578066827       DC16 18533, 30726, 26663, 6336, 2273, 14466, 10403, 52093, 56156, 60223
   \              18C008E13882
   \              28A3CB7DDB5C
   \              EB3F        
   \   000001A6   FB1E8BF99BD8       DC16 64286, 35833, 39896, 43963, 48026, 19061, 23124, 27191, 31254
   \              ABBBBB9A4A75
   \              5A546A377A16
   \   000001B8   0AF11AD02AB3       DC16 2801, 6864, 10931, 14994, 64814, 60687, 56684, 52557, 48554, 44427
   \              3A92FD2EED0F
   \              DD6CCD4DBDAA
   \              AD8B        
   \   000001CC   9DE88DC97C26       DC16 40424, 36297, 31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265
   \              6C075C644C45
   \              3CA22C831CE0
   \              0CC1        
   \   000001E0   EF1FFF3ECF5D       DC16 61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952, 28183
   \              DF7CAF9BBFBA
   \              8FD99FF86E17
   \   000001F2   7E364E555E74       DC16 32310, 20053, 24180, 11923, 16050, 3793, 7920
   \              2E933EB20ED1
   \              1EF0        

   \                                 In  segment CODE, align 2, keep-with-next
     93          unsigned int crc16wtable(unsigned int init_val_16,unsigned int adr_start, unsigned int len) { unsigned int counter; unsigned int crc = init_val_16; for( counter = 0; counter < len; counter++) crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(__flash char *)adr_start++) & 0x00FF]; return crc; }
   \                     crc16wtable:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   0108               MOVW    R1:R0, R17:R16
   \   00000006   0180               MOVW    R17:R16, R1:R0
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
   \                     ??crc16wtable_0:
   \   0000000C   1784               CP      R24, R20
   \   0000000E   0795               CPC     R25, R21
   \   00000010   F4C8               BRCC    ??crc16wtable_1
   \   00000012   0118               MOVW    R3:R2, R17:R16
   \   00000014   2C32               MOV     R3, R2
   \   00000016   2422               CLR     R2
   \   00000018   2F01               MOV     R16, R17
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   01F9               MOVW    R31:R30, R19:R18
   \   0000001E   9164               LPM     R22, Z
   \   00000020   E070               LDI     R23, 0
   \   00000022   2706               EOR     R16, R22
   \   00000024   2717               EOR     R17, R23
   \   00000026   0F00               LSL     R16
   \   00000028   1F11               ROL     R17
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(crc16tab) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(crc16tab) & 0xFFFF) >> 8
   \   00000030   9165               LPM     R22, Z+
   \   00000032   9174               LPM     R23, Z
   \   00000034   9731               SBIW    R31:R30, 1
   \   00000036   0181               MOVW    R17:R16, R3:R2
   \   00000038   2706               EOR     R16, R22
   \   0000003A   2717               EOR     R17, R23
   \   0000003C   5F2F               SUBI    R18, 255
   \   0000003E   4F3F               SBCI    R19, 255
   \   00000040   9601               ADIW    R25:R24, 1
   \   00000042   CFE4               RJMP    ??crc16wtable_0
   \                     ??crc16wtable_1:
   \   00000044   9189               LD      R24, Y+
   \   00000046   9199               LD      R25, Y+
   \   00000048   9508               RET
     94          
     95          

   \                                 In  segment CODE, align 2, keep-with-next
     96          unsigned int lungimeNumar(unsigned int i)
   \                     lungimeNumar:
     97          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   0198               MOVW    R19:R18, R17:R16
     98            unsigned int lung=0;
   \   00000006   E080               LDI     R24, 0
   \   00000008   E090               LDI     R25, 0
     99            while(i)
   \                     ??lungimeNumar_0:
   \   0000000A   2F02               MOV     R16, R18
   \   0000000C   2B03               OR      R16, R19
   \   0000000E   F041               BREQ    ??lungimeNumar_1
    100            {
    101              i/=10;
   \   00000010   E04A               LDI     R20, 10
   \   00000012   E050               LDI     R21, 0
   \   00000014   0189               MOVW    R17:R16, R19:R18
   \   00000016   ........           CALL    ?US_DIVMOD_L02
   \   0000001A   0198               MOVW    R19:R18, R17:R16
    102              lung++; 
   \   0000001C   9601               ADIW    R25:R24, 1
   \   0000001E   CFF5               RJMP    ??lungimeNumar_0
    103            }
    104            return lung;
   \                     ??lungimeNumar_1:
   \   00000020   018C               MOVW    R17:R16, R25:R24
   \   00000022   9189               LD      R24, Y+
   \   00000024   9199               LD      R25, Y+
   \   00000026   9508               RET
    105          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    106          unsigned char aux[20];
   \                     aux:
   \   00000000                      DS8 20

   \                                 In  segment CODE, align 2, keep-with-next
    107          void hexadecimalTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     hexadecimalTransmit:
    108          {
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   0158               MOVW    R11:R10, R17:R16
   \   00000006   0149               MOVW    R9:R8, R19:R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
    109            unsigned long x=*((unsigned long *)(p3));
   \   0000000A   904D               LD      R4, X+
   \   0000000C   905D               LD      R5, X+
   \   0000000E   906D               LD      R6, X+
   \   00000010   907C               LD      R7, X
   \   00000012   9713               SBIW    R27:R26, 3
    110            int index=0;
   \   00000014   E080               LDI     R24, 0
   \   00000016   E090               LDI     R25, 0
    111            USART_transmit('0');
   \   00000018   E300               LDI     R16, 48
   \   0000001A   ........           CALL    USART_transmit
    112            USART_transmit('x');
   \   0000001E   E708               LDI     R16, 120
   \   00000020   ........           CALL    USART_transmit
    113            
    114            while(x!=0)
   \                     ??hexadecimalTransmit_0:
   \   00000024   2D04               MOV     R16, R4
   \   00000026   2905               OR      R16, R5
   \   00000028   2906               OR      R16, R6
   \   0000002A   2907               OR      R16, R7
   \   0000002C   F111               BREQ    ??hexadecimalTransmit_1
    115           {
    116              aux[index]=x&0x0F;
   \   0000002E   0182               MOVW    R17:R16, R5:R4
   \   00000030   700F               ANDI    R16, 0x0F
   \   00000032   01FC               MOVW    R31:R30, R25:R24
   \   00000034   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   00000038   8300               ST      Z, R16
    117              if(aux[index]<=9)
   \   0000003A   01FC               MOVW    R31:R30, R25:R24
   \   0000003C   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   00000040   8100               LD      R16, Z
   \   00000042   300A               CPI     R16, 10
   \   00000044   F438               BRCC    ??hexadecimalTransmit_2
    118              {
    119                aux[index]+='0';
   \   00000046   01FC               MOVW    R31:R30, R25:R24
   \   00000048   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   0000004C   8100               LD      R16, Z
   \   0000004E   5D00               SUBI    R16, 208
   \   00000050   8300               ST      Z, R16
   \   00000052   C006               RJMP    ??hexadecimalTransmit_3
    120              }
    121              else
    122              {
    123                aux[index]=aux[index]+'A'-10;
   \                     ??hexadecimalTransmit_2:
   \   00000054   01FC               MOVW    R31:R30, R25:R24
   \   00000056   ....               SUBI    R30, LOW((-(aux) & 0xFFFF))
   \   00000058   ....               SBCI    R31, (-(aux) & 0xFFFF) >> 8
   \   0000005A   8100               LD      R16, Z
   \   0000005C   5C09               SUBI    R16, 201
   \   0000005E   8300               ST      Z, R16
    124              }
    125              index++;
   \                     ??hexadecimalTransmit_3:
   \   00000060   9601               ADIW    R25:R24, 1
    126              x>>=4;
   \   00000062   E044               LDI     R20, 4
   \   00000064   0182               MOVW    R17:R16, R5:R4
   \   00000066   0193               MOVW    R19:R18, R7:R6
   \   00000068   ........           CALL    ?UL_SHR_L03
   \   0000006C   0128               MOVW    R5:R4, R17:R16
   \   0000006E   0139               MOVW    R7:R6, R19:R18
   \   00000070   CFD9               RJMP    ??hexadecimalTransmit_0
    127            }
    128            while(p2>0 && index>0)
   \                     ??hexadecimalTransmit_1:
   \   00000072   2D08               MOV     R16, R8
   \   00000074   2909               OR      R16, R9
   \   00000076   F081               BREQ    ??hexadecimalTransmit_4
   \   00000078   3081               CPI     R24, 1
   \   0000007A   E000               LDI     R16, 0
   \   0000007C   0790               CPC     R25, R16
   \   0000007E   F064               BRLT    ??hexadecimalTransmit_4
    129            {
    130              USART_transmit(aux[index-1]);
   \   00000080   01FC               MOVW    R31:R30, R25:R24
   \   00000082   ....               SUBI    R30, LOW((-(aux - 1) & 0xFFFF))
   \   00000084   ....               SBCI    R31, HIGH((-(aux - 1) & 0xFFFF))
   \   00000086   8100               LD      R16, Z
   \   00000088   ........           CALL    USART_transmit
    131              index--;
   \   0000008C   9701               SBIW    R25:R24, 1
    132              p2--;
   \   0000008E   EF0F               LDI     R16, 255
   \   00000090   0E80               ADD     R8, R16
   \   00000092   EF0F               LDI     R16, 255
   \   00000094   1E90               ADC     R9, R16
   \   00000096   CFED               RJMP    ??hexadecimalTransmit_1
    133            }
    134          }
   \                     ??hexadecimalTransmit_4:
   \   00000098   E0EC               LDI     R30, 12
   \   0000009A   ........           JMP     ?EPILOGUE_B12_L09
    135          

   \                                 In  segment CODE, align 2, keep-with-next
    136          void characterTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     characterTransmit:
    137          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
    138            unsigned char *x=(unsigned char *)(p3);
   \   0000000A   0142               MOVW    R9:R8, R5:R4
    139            int index=p2;
   \   0000000C   013D               MOVW    R7:R6, R27:R26
    140            while(index!=0)
   \                     ??characterTransmit_0:
   \   0000000E   2D06               MOV     R16, R6
   \   00000010   2907               OR      R16, R7
   \   00000012   F071               BREQ    ??characterTransmit_1
    141            {
    142              USART_transmit(x[p2-index]);
   \   00000014   018D               MOVW    R17:R16, R27:R26
   \   00000016   1906               SUB     R16, R6
   \   00000018   0917               SBC     R17, R7
   \   0000001A   01F4               MOVW    R31:R30, R9:R8
   \   0000001C   0FE0               ADD     R30, R16
   \   0000001E   1FF1               ADC     R31, R17
   \   00000020   8100               LD      R16, Z
   \   00000022   ........           CALL    USART_transmit
    143              index--;
   \   00000026   EF0F               LDI     R16, 255
   \   00000028   0E60               ADD     R6, R16
   \   0000002A   EF0F               LDI     R16, 255
   \   0000002C   1E70               ADC     R7, R16
   \   0000002E   CFEF               RJMP    ??characterTransmit_0
    144            }
    145          }
   \                     ??characterTransmit_1:
   \   00000030   E0EA               LDI     R30, 10
   \   00000032   ........           JMP     ?EPILOGUE_B10_L09
    146          
    147          
    148          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    149          unsigned int mycrc16;
   \                     mycrc16:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    150          unsigned int mycrc16_t;
   \                     mycrc16_t:
   \   00000000                      DS8 2
    151          

   \                                 In  segment CODE, align 2, keep-with-next
    152          void main(void)
   \                     main:
    153          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
    154            
    155            unsigned int nrCifre=0;
   \   00000004   E0A0               LDI     R26, 0
   \   00000006   E0B0               LDI     R27, 0
    156            flag=0;
   \   00000008   E000               LDI     R16, 0
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   9300....           STS     flag, R16
   \   00000010   9310....           STS     (flag + 1), R17
    157            USART_initialize(BAUD_RATE);
   \   00000014   E00C               LDI     R16, 12
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    USART_initialize
    158            __enable_interrupt();
   \   0000001C   9478               SEI
    159            
    160            
    161            while(1)
    162            {
    163              if(flag==1)
   \                     ??main_0:
   \   0000001E   9100....           LDS     R16, flag
   \   00000022   9110....           LDS     R17, (flag + 1)
   \   00000026   3001               CPI     R16, 1
   \   00000028   E020               LDI     R18, 0
   \   0000002A   0712               CPC     R17, R18
   \   0000002C   F7C1               BRNE    ??main_0
    164              {
    165                mycrc16=crc16Char(CRC16_CCITT,0,vect,index,MSBF);
   \   0000002E   E001               LDI     R16, 1
   \   00000030   E010               LDI     R17, 0
   \   00000032   931A               ST      -Y, R17
   \   00000034   930A               ST      -Y, R16
   \   00000036   9160....           LDS     R22, index
   \   0000003A   9170....           LDS     R23, (index + 1)
   \   0000003E   ....               LDI     R20, LOW(vect)
   \   00000040   ....               LDI     R21, (vect) >> 8
   \   00000042   E020               LDI     R18, 0
   \   00000044   E030               LDI     R19, 0
   \   00000046   E201               LDI     R16, 33
   \   00000048   E110               LDI     R17, 16
   \   0000004A   ....               RCALL   crc16Char
   \   0000004C   9300....           STS     mycrc16, R16
   \   00000050   9310....           STS     (mycrc16 + 1), R17
    166                //mycrc16_t=crc16wtable(0,vect,index);
    167                unsigned int *val1=&mycrc16;
   \   00000054   ....               LDI     R16, LOW(mycrc16)
   \   00000056   2E40               MOV     R4, R16
   \   00000058   ....               LDI     R16, (mycrc16) >> 8
   \   0000005A   2E50               MOV     R5, R16
    168                unsigned int *val2=&mycrc16_t;
                                     ^
Warning[Pe177]: variable "val2" was declared but never referenced
   \   0000005C   ....               LDI     R24, LOW(mycrc16_t)
   \   0000005E   ....               LDI     R25, (mycrc16_t) >> 8
    169                nrCifre=lungimeNumar(mycrc16);
   \   00000060   9100....           LDS     R16, mycrc16
   \   00000064   9110....           LDS     R17, (mycrc16 + 1)
   \   00000068   ....               RCALL   lungimeNumar
   \   0000006A   01D8               MOVW    R27:R26, R17:R16
    170                
    171                USART_transmit('<');
   \   0000006C   E30C               LDI     R16, 60
   \   0000006E   ........           CALL    USART_transmit
    172                for(int i =0;i<index;++i)
   \   00000072   2466               CLR     R6
   \   00000074   2477               CLR     R7
   \                     ??main_1:
   \   00000076   9100....           LDS     R16, index
   \   0000007A   9110....           LDS     R17, (index + 1)
   \   0000007E   1660               CP      R6, R16
   \   00000080   0671               CPC     R7, R17
   \   00000082   F458               BRCC    ??main_2
    173                {
    174                 USART_transmit(vect[i]); 
   \   00000084   01F3               MOVW    R31:R30, R7:R6
   \   00000086   ....               SUBI    R30, LOW((-(vect) & 0xFFFF))
   \   00000088   ....               SBCI    R31, (-(vect) & 0xFFFF) >> 8
   \   0000008A   8100               LD      R16, Z
   \   0000008C   ........           CALL    USART_transmit
    175                }
   \   00000090   E001               LDI     R16, 1
   \   00000092   0E60               ADD     R6, R16
   \   00000094   E000               LDI     R16, 0
   \   00000096   1E70               ADC     R7, R16
   \   00000098   CFEE               RJMP    ??main_1
    176                 USART_transmit('@');
   \                     ??main_2:
   \   0000009A   E400               LDI     R16, 64
   \   0000009C   ........           CALL    USART_transmit
    177                 USART_transmit('C');
   \   000000A0   E403               LDI     R16, 67
   \   000000A2   ........           CALL    USART_transmit
    178                 USART_transmit('R');
   \   000000A6   E502               LDI     R16, 82
   \   000000A8   ........           CALL    USART_transmit
    179                 USART_transmit('C');
   \   000000AC   E403               LDI     R16, 67
   \   000000AE   ........           CALL    USART_transmit
    180                 USART_transmit('-');
   \   000000B2   E20D               LDI     R16, 45
   \   000000B4   ........           CALL    USART_transmit
    181                 hexadecimalTransmit(0,nrCifre,val1);
   \   000000B8   01A2               MOVW    R21:R20, R5:R4
   \   000000BA   019D               MOVW    R19:R18, R27:R26
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   ....               RCALL   hexadecimalTransmit
    182                 USART_transmit('>');
   \   000000C2   E30E               LDI     R16, 62
   \   000000C4   ........           CALL    USART_transmit
    183                 flag=0;
   \   000000C8   E000               LDI     R16, 0
   \   000000CA   E010               LDI     R17, 0
   \   000000CC   9300....           STS     flag, R16
   \   000000D0   9310....           STS     (flag + 1), R17
    184                 index=0;
   \   000000D4   E000               LDI     R16, 0
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   9300....           STS     index, R16
   \   000000DC   9310....           STS     (index + 1), R17
   \   000000E0   CF9E               RJMP    ??main_0
    185                
    186                
    187                
    188                
    189                
    190              }
    191              
    192            }
    193          }

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??interrupt_routine_USART_RXC??INTVEC 44`:
   \   0000002C   ........           JMP     interrupt_routine_USART_RXC

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      10      2  characterTransmit
                   10 2 -> USART_transmit
       6      2  crc16Char
       2      2  crc16wtable
      12      4  hexadecimalTransmit
                   12 2 -> USART_transmit
       6      2  interrupt_routine_USART_RXC
       2      4  lungimeNumar
      10      2  main
                    8 2 -> USART_initialize
                    8 2 -> USART_transmit
                   10 2 -> crc16Char
                    8 2 -> hexadecimalTransmit
                    8 2 -> lungimeNumar


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??interrupt_routine_USART_RXC??INTVEC 44
       1  _A_UDR
      20  aux
      54  characterTransmit
     136  crc16Char
     512  crc16tab
      74  crc16wtable
       2  flag
     158  hexadecimalTransmit
       2  index
      96  interrupt_routine_USART_RXC
      40  lungimeNumar
     226  main
       2  mycrc16
       2  mycrc16_t
      20  vect
       6  -- Other

 
   1 byte  in segment ABSOLUTE
 784 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
 512 bytes in segment NEAR_F
  48 bytes in segment NEAR_Z
 
 1 296 bytes of CODE memory (+ 10 bytes shared)
    48 bytes of DATA memory (+  1 byte  shared)

Errors: none
Warnings: 1

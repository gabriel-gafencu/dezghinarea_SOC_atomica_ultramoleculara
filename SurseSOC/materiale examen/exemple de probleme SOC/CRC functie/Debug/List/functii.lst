###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        22/Dec/2014  14:32:21 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\CRC functie\functii.c                           #
#    Command line =  "D:\1307B\CRC functie\functii.c" --cpu=m16 -ms -o        #
#                    "D:\1307B\CRC functie\Debug\Obj\" -lC "D:\1307B\CRC      #
#                    functie\Debug\List\" -lA "D:\1307B\CRC                   #
#                    functie\Debug\List\" --initializers_in_flash --no_cse    #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\CRC functie\Debug\List\functii.lst              #
#    Object file  =  D:\1307B\CRC functie\Debug\Obj\functii.r90               #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\CRC functie\functii.c
      1          #include "functii.h"
      2          

   \                                 In  segment CODE, align 2, keep-with-next
      3          unsigned int crc16(unsigned int polinom16, unsigned int init_val_16,
   \                     crc16:
      4                             unsigned int adr_start,unsigned int len, int ord)
      5          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   0108               MOVW    R1:R0, R17:R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
   \   00000008   01FA               MOVW    R31:R30, R21:R20
   \   0000000A   812C               LDD     R18, Y+4
   \   0000000C   813D               LDD     R19, Y+5
      6            //rezultatul final
      7            unsigned int crc = init_val_16;
   \   0000000E   0181               MOVW    R17:R16, R3:R2
      8            //reþine în octetul cel mai semnificativ datele
      9            //extrase din memoria flash
     10            unsigned int data = 0;
   \   00000010   E040               LDI     R20, 0
   \   00000012   E050               LDI     R21, 0
     11            while( len-- ) {
   \                     ??crc16_0:
   \   00000014   01CB               MOVW    R25:R24, R23:R22
   \   00000016   01BC               MOVW    R23:R22, R25:R24
   \   00000018   5061               SUBI    R22, 1
   \   0000001A   4070               SBCI    R23, 0
   \   0000001C   2B89               OR      R24, R25
   \   0000001E   F189               BREQ    ??crc16_1
     12              unsigned int i;
     13              //se extrage valoarea unui octet de la adresa de start
     14              //din memoria flash
     15              data = *(__flash char *)adr_start;
   \   00000020   9184               LPM     R24, Z
   \   00000022   E090               LDI     R25, 0
   \   00000024   01AC               MOVW    R21:R20, R25:R24
     16              if ( ord == MSBF ) //opþiunea cu shiftare spre MSB
   \   00000026   3021               CPI     R18, 1
   \   00000028   E080               LDI     R24, 0
   \   0000002A   0738               CPC     R19, R24
   \   0000002C   F4B1               BRNE    ??crc16_2
     17              {
     18                //octetul este shiftat la stânga pentru a se alinia
     19                //cu polinomul generator
     20                data <<= 8;
   \   0000002E   2F54               MOV     R21, R20
   \   00000030   E040               LDI     R20, 0
     21                //datele sunt "transferate" în rezultat
     22                crc ^= data;
   \   00000032   2704               EOR     R16, R20
   \   00000034   2715               EOR     R17, R21
     23                adr_start++;
   \   00000036   9631               ADIW    R31:R30, 1
     24                //pentru biþii de date se face XOR cu polinomul generator,
     25                //daca bitul cel mai semnificativ este 1 sau se shifteaza datele
     26                //la stânga, dacã bitul cel mai semnificativ este 0
     27                for( i = 0; i < 8; ++i ) {
   \   00000038   E0A0               LDI     R26, 0
   \   0000003A   E0B0               LDI     R27, 0
   \                     ??crc16_3:
   \   0000003C   30A8               CPI     R26, 8
   \   0000003E   E080               LDI     R24, 0
   \   00000040   07B8               CPC     R27, R24
   \   00000042   F740               BRCC    ??crc16_0
     28                  //se verificã dacã bitul cel mai semnificativ este 1
     29                  if( crc & 0x8000 )
   \   00000044   FB17               BST     R17, 7
   \   00000046   F42E               BRTC    ??crc16_4
     30                    crc = (crc << 1) ^ polinom16;
   \   00000048   0F00               LSL     R16
   \   0000004A   1F11               ROL     R17
   \   0000004C   2500               EOR     R16, R0
   \   0000004E   2511               EOR     R17, R1
   \   00000050   C002               RJMP    ??crc16_5
     31                  else
     32                    crc = crc << 1;
   \                     ??crc16_4:
   \   00000052   0F00               LSL     R16
   \   00000054   1F11               ROL     R17
     33                }
   \                     ??crc16_5:
   \   00000056   9611               ADIW    R27:R26, 1
   \   00000058   CFF1               RJMP    ??crc16_3
     34              }
     35              else
     36                //opþiunea cu shiftare spre LSB
     37                //parametrul polinom16 al funcþiei trebuie sã aibã biþii inversaþi în
     38                //prealabil
     39              {
     40                crc ^= data;
   \                     ??crc16_2:
   \   0000005A   2704               EOR     R16, R20
   \   0000005C   2715               EOR     R17, R21
     41                adr_start++;
   \   0000005E   9631               ADIW    R31:R30, 1
     42                //se verificã bitul cel mai putin semnificativ .i dacã
     43                //acesta este 1 se face XOR cu polinomul generator,
     44                // altfel datele sunt shiftate la dreapta
     45                for( i = 0; i < 8; ++i ) {
   \   00000060   E0A0               LDI     R26, 0
   \   00000062   E0B0               LDI     R27, 0
   \                     ??crc16_6:
   \   00000064   30A8               CPI     R26, 8
   \   00000066   E080               LDI     R24, 0
   \   00000068   07B8               CPC     R27, R24
   \   0000006A   F6A0               BRCC    ??crc16_0
     46                  //se verificã daca cel mai puþin semnificativ bit este 1
     47                  if( crc & 0x0001 )
   \   0000006C   FB00               BST     R16, 0
   \   0000006E   F42E               BRTC    ??crc16_7
     48                    crc = (crc >> 1) ^ polinom16;
   \   00000070   9516               LSR     R17
   \   00000072   9507               ROR     R16
   \   00000074   2500               EOR     R16, R0
   \   00000076   2511               EOR     R17, R1
   \   00000078   C002               RJMP    ??crc16_8
     49                  else
     50                    crc = crc >> 1;
   \                     ??crc16_7:
   \   0000007A   9516               LSR     R17
   \   0000007C   9507               ROR     R16
     51                }
   \                     ??crc16_8:
   \   0000007E   9611               ADIW    R27:R26, 1
   \   00000080   CFF1               RJMP    ??crc16_6
     52              }
     53            }
     54            return crc;
   \                     ??crc16_1:
   \   00000082   E0E6               LDI     R30, 6
   \   00000084   ........           JMP     ?EPILOGUE_B4_L09
     55          }
     56          

   \                                 In  segment CODE, align 2, keep-with-next
     57          unsigned char min(unsigned char x, unsigned char y)
   \                     min:
     58          {
   \   00000000   2F20               MOV     R18, R16
     59            if(x>y)
   \   00000002   1712               CP      R17, R18
   \   00000004   F410               BRCC    ??min_0
     60            {
     61             
     62              return y;
   \   00000006   2F01               MOV     R16, R17
   \   00000008   9508               RET
     63            }
     64            else 
     65              return x;
   \                     ??min_0:
   \   0000000A   2F02               MOV     R16, R18
   \   0000000C   9508               RET
     66          }
     67          
     68          

   \                                 In  segment CODE, align 2, keep-with-next
     69          unsigned int lungimeFunctie(unsigned int adr)
   \                     lungimeFunctie:
     70          {
   \   00000000   0198               MOVW    R19:R18, R17:R16
     71            unsigned int nrOcteti=0;
   \   00000002   E000               LDI     R16, 0
   \   00000004   E010               LDI     R17, 0
     72            unsigned int data;
     73            unsigned int realAdr=adr<<1;
   \   00000006   01F9               MOVW    R31:R30, R19:R18
   \   00000008   0FEE               LSL     R30
   \   0000000A   1FFF               ROL     R31
     74            
     75            
     76            do{
     77              data=*(__flash unsigned int*)realAdr;
   \                     ??lungimeFunctie_0:
   \   0000000C   9165               LPM     R22, Z+
   \   0000000E   9174               LPM     R23, Z
   \   00000010   9731               SBIW    R31:R30, 1
   \   00000012   01AB               MOVW    R21:R20, R23:R22
     78              realAdr+=2;
   \   00000014   9632               ADIW    R31:R30, 2
     79              nrOcteti++;
   \   00000016   5F0F               SUBI    R16, 255
   \   00000018   4F1F               SBCI    R17, 255
     80            }while(data!=0X9508);
   \   0000001A   3048               CPI     R20, 8
   \   0000001C   E965               LDI     R22, 149
   \   0000001E   0756               CPC     R21, R22
   \   00000020   F7A9               BRNE    ??lungimeFunctie_0
     81            return nrOcteti<<1;
   \   00000022   0F00               LSL     R16
   \   00000024   1F11               ROL     R17
   \   00000026   9508               RET
     82          }
     83          
     84          
     85          

   \                                 In  segment CODE, align 2, keep-with-next
     86          void myprint(unsigned int tip, unsigned int nr_car, void * val)
   \                     myprint:
     87          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
     88            switch(tip)
   \   0000000A   018C               MOVW    R17:R16, R25:R24
   \   0000000C   ....               LDI     R30, LOW(`?<Jumptable for myprint>_0`)
   \   0000000E   ....               LDI     R31, (`?<Jumptable for myprint>_0`) >> 8
   \   00000010   ........           JMP     ?SV_SWITCH_L06
     89            {
     90            case 0:
     91              integerTransmit(tip, nr_car, val);
   \                     ??myprint_0:
   \   00000014   01AD               MOVW    R21:R20, R27:R26
   \   00000016   0192               MOVW    R19:R18, R5:R4
   \   00000018   018C               MOVW    R17:R16, R25:R24
   \   0000001A   ....               RCALL   integerTransmit
     92              break;
   \   0000001C   C00E               RJMP    ??myprint_1
     93            case 1:
     94              hexadecimalTransmit(tip, nr_car, val);
   \                     ??myprint_2:
   \   0000001E   01AD               MOVW    R21:R20, R27:R26
   \   00000020   0192               MOVW    R19:R18, R5:R4
   \   00000022   018C               MOVW    R17:R16, R25:R24
   \   00000024   ....               RCALL   hexadecimalTransmit
     95              break;
   \   00000026   C009               RJMP    ??myprint_1
     96            case 2:
     97              doubleTransmit(tip, nr_car, val);
   \                     ??myprint_3:
   \   00000028   01AD               MOVW    R21:R20, R27:R26
   \   0000002A   0192               MOVW    R19:R18, R5:R4
   \   0000002C   018C               MOVW    R17:R16, R25:R24
   \   0000002E   ....               RCALL   doubleTransmit
     98              break;
   \   00000030   C004               RJMP    ??myprint_1
     99            case 3:
    100              characterTransmit(tip, nr_car, val);
   \                     ??myprint_4:
   \   00000032   01AD               MOVW    R21:R20, R27:R26
   \   00000034   0192               MOVW    R19:R18, R5:R4
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   ....               RCALL   characterTransmit
    101              break;
    102            }
    103          }
   \                     ??myprint_1:
   \   0000003A   E0E6               LDI     R30, 6
   \   0000003C   ........           JMP     ?EPILOGUE_B6_L09
    104          
    105          //transmiterea unui întreg pe serialã

   \                                 In  segment CODE, align 2, keep-with-next
    106          void integerTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     integerTransmit:
    107          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   0148               MOVW    R9:R8, R17:R16
   \   00000008   0129               MOVW    R5:R4, R19:R18
   \   0000000A   01DA               MOVW    R27:R26, R21:R20
    108            int index=0;
   \   0000000C   E080               LDI     R24, 0
   \   0000000E   E090               LDI     R25, 0
    109            char aux[5];
    110            int x=*((int *)(p3));
   \   00000010   906D               LD      R6, X+
   \   00000012   907C               LD      R7, X
   \   00000014   9711               SBIW    R27:R26, 1
    111            if(x<0)
   \   00000016   2077               TST     R7
   \   00000018   F452               BRPL    ??integerTransmit_0
    112            {
    113              USART_transmit('-');
                     ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \   0000001A   E20D               LDI     R16, 45
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   ........           CALL    USART_transmit
    114              x*=(-1);
   \   00000022   EF4F               LDI     R20, 255
   \   00000024   EF5F               LDI     R21, 255
   \   00000026   0183               MOVW    R17:R16, R7:R6
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   0138               MOVW    R7:R6, R17:R16
    115            }
    116            while(x!=0)
   \                     ??integerTransmit_0:
   \   0000002E   2D06               MOV     R16, R6
   \   00000030   2907               OR      R16, R7
   \   00000032   F091               BREQ    ??integerTransmit_1
    117            {
    118              aux[index]=x%10+'0';
   \   00000034   E04A               LDI     R20, 10
   \   00000036   E050               LDI     R21, 0
   \   00000038   0183               MOVW    R17:R16, R7:R6
   \   0000003A   ........           CALL    ?SS_DIVMOD_L02
   \   0000003E   5D40               SUBI    R20, 208
   \   00000040   01FE               MOVW    R31:R30, R29:R28
   \   00000042   0FE8               ADD     R30, R24
   \   00000044   1FF9               ADC     R31, R25
   \   00000046   8340               ST      Z, R20
    119              index++;
   \   00000048   9601               ADIW    R25:R24, 1
    120              x=x/10;
   \   0000004A   E04A               LDI     R20, 10
   \   0000004C   E050               LDI     R21, 0
   \   0000004E   0183               MOVW    R17:R16, R7:R6
   \   00000050   ........           CALL    ?SS_DIVMOD_L02
   \   00000054   0138               MOVW    R7:R6, R17:R16
   \   00000056   CFEB               RJMP    ??integerTransmit_0
    121            }
    122            while(p2>0 )
   \                     ??integerTransmit_1:
   \   00000058   2D04               MOV     R16, R4
   \   0000005A   2905               OR      R16, R5
   \   0000005C   F071               BREQ    ??integerTransmit_2
    123            {
    124              USART_transmit(aux[index-1]);
                     ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \   0000005E   01FE               MOVW    R31:R30, R29:R28
   \   00000060   0FE8               ADD     R30, R24
   \   00000062   1FF9               ADC     R31, R25
   \   00000064   9731               SBIW    R31:R30, 1
   \   00000066   8100               LD      R16, Z
   \   00000068   E010               LDI     R17, 0
   \   0000006A   ........           CALL    USART_transmit
    125              index--;
   \   0000006E   9701               SBIW    R25:R24, 1
    126              p2--;
   \   00000070   EF0F               LDI     R16, 255
   \   00000072   0E40               ADD     R4, R16
   \   00000074   EF0F               LDI     R16, 255
   \   00000076   1E50               ADC     R5, R16
   \   00000078   CFEF               RJMP    ??integerTransmit_1
    127            }
    128          }
   \                     ??integerTransmit_2:
   \   0000007A   9625               ADIW    R29:R28, 5
   \   0000007C   E0EA               LDI     R30, 10
   \   0000007E   ........           JMP     ?EPILOGUE_B10_L09
    129          //transmiterea unui numãr hexazecimal pe serialã

   \                                 In  segment CODE, align 2, keep-with-next
    130          void hexadecimalTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     hexadecimalTransmit:
    131          {
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   972A               SBIW    R29:R28, 10
   \   00000006   0168               MOVW    R13:R12, R17:R16
   \   00000008   0139               MOVW    R7:R6, R19:R18
   \   0000000A   015A               MOVW    R11:R10, R21:R20
    132            long x=*(( long *)(p3));
   \   0000000C   01F5               MOVW    R31:R30, R11:R10
   \   0000000E   8180               LD      R24, Z
   \   00000010   8191               LDD     R25, Z+1
   \   00000012   81A2               LDD     R26, Z+2
   \   00000014   81B3               LDD     R27, Z+3
    133            char aux[10];
    134            int index=0;
   \   00000016   2444               CLR     R4
   \   00000018   2455               CLR     R5
    135            int p22=p2;
   \   0000001A   0143               MOVW    R9:R8, R7:R6
    136            USART_transmit('0');
                   ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \   0000001C   E300               LDI     R16, 48
   \   0000001E   E010               LDI     R17, 0
   \   00000020   ........           CALL    USART_transmit
    137            USART_transmit('x');
   \   00000024   E708               LDI     R16, 120
   \   00000026   E010               LDI     R17, 0
   \   00000028   ........           CALL    USART_transmit
    138            while(x!=0 && p22)
   \                     ??hexadecimalTransmit_0:
   \   0000002C   2F08               MOV     R16, R24
   \   0000002E   2B09               OR      R16, R25
   \   00000030   2B0A               OR      R16, R26
   \   00000032   2B0B               OR      R16, R27
   \   00000034   F169               BREQ    ??hexadecimalTransmit_1
   \   00000036   2D08               MOV     R16, R8
   \   00000038   2909               OR      R16, R9
   \   0000003A   F151               BREQ    ??hexadecimalTransmit_1
    139            {
    140              aux[index]=x&0x0F;
   \   0000003C   018C               MOVW    R17:R16, R25:R24
   \   0000003E   2F10               MOV     R17, R16
   \   00000040   701F               ANDI    R17, 0x0F
   \   00000042   01FE               MOVW    R31:R30, R29:R28
   \   00000044   0DE4               ADD     R30, R4
   \   00000046   1DF5               ADC     R31, R5
   \   00000048   8310               ST      Z, R17
    141              if(aux[index]<=9)
   \   0000004A   01FE               MOVW    R31:R30, R29:R28
   \   0000004C   0DE4               ADD     R30, R4
   \   0000004E   1DF5               ADC     R31, R5
   \   00000050   8100               LD      R16, Z
   \   00000052   300A               CPI     R16, 10
   \   00000054   F438               BRCC    ??hexadecimalTransmit_2
    142              {
    143                aux[index]+='0';
   \   00000056   01FE               MOVW    R31:R30, R29:R28
   \   00000058   0DE4               ADD     R30, R4
   \   0000005A   1DF5               ADC     R31, R5
   \   0000005C   8100               LD      R16, Z
   \   0000005E   5D00               SUBI    R16, 208
   \   00000060   8300               ST      Z, R16
   \   00000062   C006               RJMP    ??hexadecimalTransmit_3
    144              }
    145              else
    146              {
    147                aux[index]=aux[index]+'A'-10;
   \                     ??hexadecimalTransmit_2:
   \   00000064   01FE               MOVW    R31:R30, R29:R28
   \   00000066   0DE4               ADD     R30, R4
   \   00000068   1DF5               ADC     R31, R5
   \   0000006A   8100               LD      R16, Z
   \   0000006C   5C09               SUBI    R16, 201
   \   0000006E   8300               ST      Z, R16
    148              }
    149              index++;
   \                     ??hexadecimalTransmit_3:
   \   00000070   E001               LDI     R16, 1
   \   00000072   0E40               ADD     R4, R16
   \   00000074   E000               LDI     R16, 0
   \   00000076   1E50               ADC     R5, R16
    150              x>>=4;
   \   00000078   E044               LDI     R20, 4
   \   0000007A   018C               MOVW    R17:R16, R25:R24
   \   0000007C   019D               MOVW    R19:R18, R27:R26
   \   0000007E   ........           CALL    ?SL_SHR_L03
   \   00000082   01C8               MOVW    R25:R24, R17:R16
   \   00000084   01D9               MOVW    R27:R26, R19:R18
    151              p22--;
   \   00000086   EF0F               LDI     R16, 255
   \   00000088   0E80               ADD     R8, R16
   \   0000008A   EF0F               LDI     R16, 255
   \   0000008C   1E90               ADC     R9, R16
   \   0000008E   CFCE               RJMP    ??hexadecimalTransmit_0
    152            }
    153            while(p2>0 && index>0)
   \                     ??hexadecimalTransmit_1:
   \   00000090   2D06               MOV     R16, R6
   \   00000092   2907               OR      R16, R7
   \   00000094   F0B1               BREQ    ??hexadecimalTransmit_4
   \   00000096   E001               LDI     R16, 1
   \   00000098   1640               CP      R4, R16
   \   0000009A   E000               LDI     R16, 0
   \   0000009C   0650               CPC     R5, R16
   \   0000009E   F08C               BRLT    ??hexadecimalTransmit_4
    154            {
    155              USART_transmit(aux[index-1]);
   \   000000A0   01FE               MOVW    R31:R30, R29:R28
   \   000000A2   0DE4               ADD     R30, R4
   \   000000A4   1DF5               ADC     R31, R5
   \   000000A6   9731               SBIW    R31:R30, 1
   \   000000A8   8100               LD      R16, Z
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   ........           CALL    USART_transmit
    156              index--;
   \   000000B0   EF0F               LDI     R16, 255
   \   000000B2   0E40               ADD     R4, R16
   \   000000B4   EF0F               LDI     R16, 255
   \   000000B6   1E50               ADC     R5, R16
    157              p2--;
   \   000000B8   EF0F               LDI     R16, 255
   \   000000BA   0E60               ADD     R6, R16
   \   000000BC   EF0F               LDI     R16, 255
   \   000000BE   1E70               ADC     R7, R16
   \   000000C0   CFE7               RJMP    ??hexadecimalTransmit_1
    158            }
    159          }
   \                     ??hexadecimalTransmit_4:
   \   000000C2   962A               ADIW    R29:R28, 10
   \   000000C4   E0EE               LDI     R30, 14
   \   000000C6   ........           JMP     ?EPILOGUE_B14_L09
    160          //transmiterea unui numãr de tip double pe serialã

   \                                 In  segment CODE, align 2, keep-with-next
    161          void doubleTransmit(unsigned int p1, unsigned int p2, void * p3)
   \                     doubleTransmit:
    162          {
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   972A               SBIW    R29:R28, 10
   \   00000006   0168               MOVW    R13:R12, R17:R16
   \   00000008   0159               MOVW    R11:R10, R19:R18
   \   0000000A   014A               MOVW    R9:R8, R21:R20
    163            int index=0;
   \   0000000C   2466               CLR     R6
   \   0000000E   2477               CLR     R7
    164            int dataIntreg;
    165            char aux[10];
    166            double x=*((double *)(p3));
   \   00000010   01F4               MOVW    R31:R30, R9:R8
   \   00000012   8180               LD      R24, Z
   \   00000014   8191               LDD     R25, Z+1
   \   00000016   81A2               LDD     R26, Z+2
   \   00000018   81B3               LDD     R27, Z+3
    167            if(x<0)
   \   0000001A   E040               LDI     R20, 0
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   E060               LDI     R22, 0
   \   00000020   E070               LDI     R23, 0
   \   00000022   018C               MOVW    R17:R16, R25:R24
   \   00000024   019D               MOVW    R19:R18, R27:R26
   \   00000026   ........           CALL    ?F_CMP_LT_L04
   \   0000002A   F470               BRCC    ??doubleTransmit_0
    168            {USART_transmit('-');
                    ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \   0000002C   E20D               LDI     R16, 45
   \   0000002E   E010               LDI     R17, 0
   \   00000030   ........           CALL    USART_transmit
    169            x*=(-1);
   \   00000034   E040               LDI     R20, 0
   \   00000036   E050               LDI     R21, 0
   \   00000038   E860               LDI     R22, 128
   \   0000003A   EB7F               LDI     R23, 191
   \   0000003C   018C               MOVW    R17:R16, R25:R24
   \   0000003E   019D               MOVW    R19:R18, R27:R26
   \   00000040   ........           CALL    ?F_MUL_L04
   \   00000044   01C8               MOVW    R25:R24, R17:R16
   \   00000046   01D9               MOVW    R27:R26, R19:R18
    170            }
    171            dataIntreg=(int)x;
   \                     ??doubleTransmit_0:
   \   00000048   018C               MOVW    R17:R16, R25:R24
   \   0000004A   019D               MOVW    R19:R18, R27:R26
   \   0000004C   ........           CALL    ?F2SL_L04
   \   00000050   0128               MOVW    R5:R4, R17:R16
    172            while((int)dataIntreg!=0)
   \                     ??doubleTransmit_1:
   \   00000052   2D04               MOV     R16, R4
   \   00000054   2905               OR      R16, R5
   \   00000056   F0A9               BREQ    ??doubleTransmit_2
    173            {
    174              aux[index]=(int)dataIntreg%10+'0';
   \   00000058   E04A               LDI     R20, 10
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   0182               MOVW    R17:R16, R5:R4
   \   0000005E   ........           CALL    ?SS_DIVMOD_L02
   \   00000062   5D40               SUBI    R20, 208
   \   00000064   01FE               MOVW    R31:R30, R29:R28
   \   00000066   0DE6               ADD     R30, R6
   \   00000068   1DF7               ADC     R31, R7
   \   0000006A   8340               ST      Z, R20
    175              index++;
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   0E60               ADD     R6, R16
   \   00000070   E000               LDI     R16, 0
   \   00000072   1E70               ADC     R7, R16
    176              dataIntreg=dataIntreg/10;
   \   00000074   E04A               LDI     R20, 10
   \   00000076   E050               LDI     R21, 0
   \   00000078   0182               MOVW    R17:R16, R5:R4
   \   0000007A   ........           CALL    ?SS_DIVMOD_L02
   \   0000007E   0128               MOVW    R5:R4, R17:R16
   \   00000080   CFE8               RJMP    ??doubleTransmit_1
    177            }
    178            while(index>0 )
   \                     ??doubleTransmit_2:
   \   00000082   E001               LDI     R16, 1
   \   00000084   1660               CP      R6, R16
   \   00000086   E000               LDI     R16, 0
   \   00000088   0670               CPC     R7, R16
   \   0000008A   F06C               BRLT    ??doubleTransmit_3
    179            {
    180              USART_transmit(aux[index-1]);
                     ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \   0000008C   01FE               MOVW    R31:R30, R29:R28
   \   0000008E   0DE6               ADD     R30, R6
   \   00000090   1DF7               ADC     R31, R7
   \   00000092   9731               SBIW    R31:R30, 1
   \   00000094   8100               LD      R16, Z
   \   00000096   E010               LDI     R17, 0
   \   00000098   ........           CALL    USART_transmit
    181              index--;
   \   0000009C   EF0F               LDI     R16, 255
   \   0000009E   0E60               ADD     R6, R16
   \   000000A0   EF0F               LDI     R16, 255
   \   000000A2   1E70               ADC     R7, R16
   \   000000A4   CFEE               RJMP    ??doubleTransmit_2
    182            }
    183            dataIntreg=(int)x;
   \                     ??doubleTransmit_3:
   \   000000A6   018C               MOVW    R17:R16, R25:R24
   \   000000A8   019D               MOVW    R19:R18, R27:R26
   \   000000AA   ........           CALL    ?F2SL_L04
   \   000000AE   0128               MOVW    R5:R4, R17:R16
    184            x=x-dataIntreg;
   \   000000B0   0182               MOVW    R17:R16, R5:R4
   \   000000B2   2F21               MOV     R18, R17
   \   000000B4   0F22               LSL     R18
   \   000000B6   0B22               SBC     R18, R18
   \   000000B8   2F32               MOV     R19, R18
   \   000000BA   ........           CALL    ?SL2F_L04
   \   000000BE   01A8               MOVW    R21:R20, R17:R16
   \   000000C0   01B9               MOVW    R23:R22, R19:R18
   \   000000C2   018C               MOVW    R17:R16, R25:R24
   \   000000C4   019D               MOVW    R19:R18, R27:R26
   \   000000C6   ........           CALL    ?F_SUB_L04
   \   000000CA   01C8               MOVW    R25:R24, R17:R16
   \   000000CC   01D9               MOVW    R27:R26, R19:R18
    185            if(x>0)
   \   000000CE   E041               LDI     R20, 1
   \   000000D0   E050               LDI     R21, 0
   \   000000D2   E060               LDI     R22, 0
   \   000000D4   E070               LDI     R23, 0
   \   000000D6   018C               MOVW    R17:R16, R25:R24
   \   000000D8   019D               MOVW    R19:R18, R27:R26
   \   000000DA   ........           CALL    ?F_CMP_GE_L04
   \   000000DE   F420               BRCC    ??doubleTransmit_4
    186            {
    187              USART_transmit('.');
                     ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \   000000E0   E20E               LDI     R16, 46
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   ........           CALL    USART_transmit
    188            }
    189            while(x>0 && p2>0)
   \                     ??doubleTransmit_4:
   \   000000E8   E041               LDI     R20, 1
   \   000000EA   E050               LDI     R21, 0
   \   000000EC   E060               LDI     R22, 0
   \   000000EE   E070               LDI     R23, 0
   \   000000F0   018C               MOVW    R17:R16, R25:R24
   \   000000F2   019D               MOVW    R19:R18, R27:R26
   \   000000F4   ........           CALL    ?F_CMP_GE_L04
   \   000000F8   F558               BRCC    ??doubleTransmit_5
   \   000000FA   2D0A               MOV     R16, R10
   \   000000FC   290B               OR      R16, R11
   \   000000FE   F141               BREQ    ??doubleTransmit_5
    190            {
    191              x=x*10;
   \   00000100   E040               LDI     R20, 0
   \   00000102   E050               LDI     R21, 0
   \   00000104   E260               LDI     R22, 32
   \   00000106   E471               LDI     R23, 65
   \   00000108   018C               MOVW    R17:R16, R25:R24
   \   0000010A   019D               MOVW    R19:R18, R27:R26
   \   0000010C   ........           CALL    ?F_MUL_L04
   \   00000110   01C8               MOVW    R25:R24, R17:R16
   \   00000112   01D9               MOVW    R27:R26, R19:R18
    192              dataIntreg=(int)x;
   \   00000114   018C               MOVW    R17:R16, R25:R24
   \   00000116   019D               MOVW    R19:R18, R27:R26
   \   00000118   ........           CALL    ?F2SL_L04
   \   0000011C   0128               MOVW    R5:R4, R17:R16
    193              USART_transmit(dataIntreg+'0');
                     ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \   0000011E   0182               MOVW    R17:R16, R5:R4
   \   00000120   5D00               SUBI    R16, 208
   \   00000122   4F1F               SBCI    R17, 255
   \   00000124   ........           CALL    USART_transmit
    194              x=x-dataIntreg;
   \   00000128   0182               MOVW    R17:R16, R5:R4
   \   0000012A   2F21               MOV     R18, R17
   \   0000012C   0F22               LSL     R18
   \   0000012E   0B22               SBC     R18, R18
   \   00000130   2F32               MOV     R19, R18
   \   00000132   ........           CALL    ?SL2F_L04
   \   00000136   01A8               MOVW    R21:R20, R17:R16
   \   00000138   01B9               MOVW    R23:R22, R19:R18
   \   0000013A   018C               MOVW    R17:R16, R25:R24
   \   0000013C   019D               MOVW    R19:R18, R27:R26
   \   0000013E   ........           CALL    ?F_SUB_L04
   \   00000142   01C8               MOVW    R25:R24, R17:R16
   \   00000144   01D9               MOVW    R27:R26, R19:R18
    195              p2--;
   \   00000146   EF0F               LDI     R16, 255
   \   00000148   0EA0               ADD     R10, R16
   \   0000014A   EF0F               LDI     R16, 255
   \   0000014C   1EB0               ADC     R11, R16
   \   0000014E   CFCC               RJMP    ??doubleTransmit_4
    196            }
    197          }
   \                     ??doubleTransmit_5:
   \   00000150   962A               ADIW    R29:R28, 10
   \   00000152   E0EE               LDI     R30, 14
   \   00000154   ........           JMP     ?EPILOGUE_B14_L09
    198          //transmiterea unui numar de tip float

   \                                 In  segment CODE, align 2, keep-with-next
    199          void floatTransmit(unsigned int p1, unsigned int p2, void * p3)
   \                     floatTransmit:
    200          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   97AA               SBIW    R29:R28, 42
   \   00000006   870A               STD     Y+10, R16
   \   00000008   871B               STD     Y+11, R17
   \   0000000A   8728               STD     Y+8, R18
   \   0000000C   8739               STD     Y+9, R19
   \   0000000E   834E               STD     Y+6, R20
   \   00000010   835F               STD     Y+7, R21
    201            char buff[30]={0};
   \   00000012   018E               MOVW    R17:R16, R29:R28
   \   00000014   5F04               SUBI    R16, 244
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   E020               LDI     R18, 0
   \   0000001C   E18E               LDI     R24, 30
   \                     ??floatTransmit_0:
   \   0000001E   9321               ST      Z+, R18
   \   00000020   958A               DEC     R24
   \   00000022   F7E9               BRNE    ??floatTransmit_0
    202            int j, nrCaract;
    203            long long nr;
    204            char nrNeg;
    205            int i;
    206            float floatNr;
    207            floatNr=*((float *)p3);
   \   00000024   81EE               LDD     R30, Y+6
   \   00000026   81FF               LDD     R31, Y+7
   \   00000028   8100               LD      R16, Z
   \   0000002A   8111               LDD     R17, Z+1
   \   0000002C   8122               LDD     R18, Z+2
   \   0000002E   8133               LDD     R19, Z+3
   \   00000030   0128               MOVW    R5:R4, R17:R16
   \   00000032   0139               MOVW    R7:R6, R19:R18
    208            nrCaract=0;
   \   00000034   E000               LDI     R16, 0
   \   00000036   E010               LDI     R17, 0
   \   00000038   8308               ST      Y, R16
   \   0000003A   8319               STD     Y+1, R17
    209            nr=(long long)floatNr;
   \   0000003C   0182               MOVW    R17:R16, R5:R4
   \   0000003E   0193               MOVW    R19:R18, R7:R6
   \   00000040   ........           CALL    ?F2SLL_L12
   \   00000044   0148               MOVW    R9:R8, R17:R16
   \   00000046   0159               MOVW    R11:R10, R19:R18
   \   00000048   016A               MOVW    R13:R12, R21:R20
   \   0000004A   017B               MOVW    R15:R14, R23:R22
    210            nrNeg=(nr<0);
   \   0000004C   0184               MOVW    R17:R16, R9:R8
   \   0000004E   0195               MOVW    R19:R18, R11:R10
   \   00000050   01A6               MOVW    R21:R20, R13:R12
   \   00000052   01B7               MOVW    R23:R22, R15:R14
   \   00000054   0148               MOVW    R9:R8, R17:R16
   \   00000056   0159               MOVW    R11:R10, R19:R18
   \   00000058   016A               MOVW    R13:R12, R21:R20
   \   0000005A   017B               MOVW    R15:R14, R23:R22
   \   0000005C   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000005E   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000060   0184               MOVW    R17:R16, R9:R8
   \   00000062   0195               MOVW    R19:R18, R11:R10
   \   00000064   01A6               MOVW    R21:R20, R13:R12
   \   00000066   01B7               MOVW    R23:R22, R15:R14
   \   00000068   ........           CALL    ?LL_CMP_L12
   \   0000006C   F414               BRGE    ??floatTransmit_1
   \   0000006E   E001               LDI     R16, 1
   \   00000070   C001               RJMP    ??floatTransmit_2
   \                     ??floatTransmit_1:
   \   00000072   E000               LDI     R16, 0
   \                     ??floatTransmit_2:
   \   00000074   2F90               MOV     R25, R16
    211            if (nrNeg)
   \   00000076   2399               TST     R25
   \   00000078   F061               BREQ    ??floatTransmit_3
    212              nr*=-1;
   \   0000007A   0184               MOVW    R17:R16, R9:R8
   \   0000007C   0195               MOVW    R19:R18, R11:R10
   \   0000007E   01A6               MOVW    R21:R20, R13:R12
   \   00000080   01B7               MOVW    R23:R22, R15:R14
   \   00000082   ....               LDI     R26, LOW(__Constant_ffffffff_ffffffff)
   \   00000084   ....               LDI     R27, (__Constant_ffffffff_ffffffff) >> 8
   \   00000086   ........           CALL    ?LL_MUL_L12
   \   0000008A   0148               MOVW    R9:R8, R17:R16
   \   0000008C   0159               MOVW    R11:R10, R19:R18
   \   0000008E   016A               MOVW    R13:R12, R21:R20
   \   00000090   017B               MOVW    R15:R14, R23:R22
    213            while(nr!=0)
   \                     ??floatTransmit_3:
   \   00000092   0184               MOVW    R17:R16, R9:R8
   \   00000094   0195               MOVW    R19:R18, R11:R10
   \   00000096   01A6               MOVW    R21:R20, R13:R12
   \   00000098   01B7               MOVW    R23:R22, R15:R14
   \   0000009A   0148               MOVW    R9:R8, R17:R16
   \   0000009C   0159               MOVW    R11:R10, R19:R18
   \   0000009E   016A               MOVW    R13:R12, R21:R20
   \   000000A0   017B               MOVW    R15:R14, R23:R22
   \   000000A2   ....               LDI     R30, LOW(__Constant_0_0)
   \   000000A4   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000000A6   0184               MOVW    R17:R16, R9:R8
   \   000000A8   0195               MOVW    R19:R18, R11:R10
   \   000000AA   01A6               MOVW    R21:R20, R13:R12
   \   000000AC   01B7               MOVW    R23:R22, R15:R14
   \   000000AE   ........           CALL    ?LL_CMP_L12
   \   000000B2   F179               BREQ    ??floatTransmit_4
    214            {
    215              j=nr%10;
   \   000000B4   0184               MOVW    R17:R16, R9:R8
   \   000000B6   0195               MOVW    R19:R18, R11:R10
   \   000000B8   01A6               MOVW    R21:R20, R13:R12
   \   000000BA   01B7               MOVW    R23:R22, R15:R14
   \   000000BC   0148               MOVW    R9:R8, R17:R16
   \   000000BE   0159               MOVW    R11:R10, R19:R18
   \   000000C0   016A               MOVW    R13:R12, R21:R20
   \   000000C2   017B               MOVW    R15:R14, R23:R22
   \   000000C4   ....               LDI     R26, LOW(__Constant_a_0)
   \   000000C6   ....               LDI     R27, (__Constant_a_0) >> 8
   \   000000C8   0184               MOVW    R17:R16, R9:R8
   \   000000CA   0195               MOVW    R19:R18, R11:R10
   \   000000CC   01A6               MOVW    R21:R20, R13:R12
   \   000000CE   01B7               MOVW    R23:R22, R15:R14
   \   000000D0   ........           CALL    ?SLL_MOD_L12
   \   000000D4   830C               STD     Y+4, R16
   \   000000D6   831D               STD     Y+5, R17
    216              nr=nr/10;
   \   000000D8   0184               MOVW    R17:R16, R9:R8
   \   000000DA   0195               MOVW    R19:R18, R11:R10
   \   000000DC   01A6               MOVW    R21:R20, R13:R12
   \   000000DE   01B7               MOVW    R23:R22, R15:R14
   \   000000E0   ....               LDI     R26, LOW(__Constant_a_0)
   \   000000E2   ....               LDI     R27, (__Constant_a_0) >> 8
   \   000000E4   ........           CALL    ?SLL_DIV_L12
   \   000000E8   0148               MOVW    R9:R8, R17:R16
   \   000000EA   0159               MOVW    R11:R10, R19:R18
   \   000000EC   016A               MOVW    R13:R12, R21:R20
   \   000000EE   017B               MOVW    R15:R14, R23:R22
    217              buff[nrCaract]=j+'0';
   \   000000F0   812C               LDD     R18, Y+4
   \   000000F2   813D               LDD     R19, Y+5
   \   000000F4   5D20               SUBI    R18, 208
   \   000000F6   01FE               MOVW    R31:R30, R29:R28
   \   000000F8   963C               ADIW    R31:R30, 12
   \   000000FA   8108               LD      R16, Y
   \   000000FC   8119               LDD     R17, Y+1
   \   000000FE   0FE0               ADD     R30, R16
   \   00000100   1FF1               ADC     R31, R17
   \   00000102   8320               ST      Z, R18
    218              nrCaract++;
   \   00000104   8108               LD      R16, Y
   \   00000106   8119               LDD     R17, Y+1
   \   00000108   5F0F               SUBI    R16, 255
   \   0000010A   4F1F               SBCI    R17, 255
   \   0000010C   8308               ST      Y, R16
   \   0000010E   8319               STD     Y+1, R17
   \   00000110   CFC0               RJMP    ??floatTransmit_3
    219            }
    220            if(nrCaract ==0)
   \                     ??floatTransmit_4:
   \   00000112   8108               LD      R16, Y
   \   00000114   8119               LDD     R17, Y+1
   \   00000116   2B01               OR      R16, R17
   \   00000118   F431               BRNE    ??floatTransmit_5
    221            {
    222              buff[0]='0';
   \   0000011A   E300               LDI     R16, 48
   \   0000011C   870C               STD     Y+12, R16
    223              nrCaract=1;
   \   0000011E   E001               LDI     R16, 1
   \   00000120   E010               LDI     R17, 0
   \   00000122   8308               ST      Y, R16
   \   00000124   8319               STD     Y+1, R17
    224            }
    225            if(nrNeg)
   \                     ??floatTransmit_5:
   \   00000126   2399               TST     R25
   \   00000128   F071               BREQ    ??floatTransmit_6
    226            {
    227              buff[nrCaract]='-';
   \   0000012A   E21D               LDI     R17, 45
   \   0000012C   01FE               MOVW    R31:R30, R29:R28
   \   0000012E   963C               ADIW    R31:R30, 12
   \   00000130   8128               LD      R18, Y
   \   00000132   8139               LDD     R19, Y+1
   \   00000134   0FE2               ADD     R30, R18
   \   00000136   1FF3               ADC     R31, R19
   \   00000138   8310               ST      Z, R17
    228              nrCaract++;
   \   0000013A   8108               LD      R16, Y
   \   0000013C   8119               LDD     R17, Y+1
   \   0000013E   5F0F               SUBI    R16, 255
   \   00000140   4F1F               SBCI    R17, 255
   \   00000142   8308               ST      Y, R16
   \   00000144   8319               STD     Y+1, R17
    229            }
    230            for(i=nrCaract-1; i>=0; i--)
   \                     ??floatTransmit_6:
   \   00000146   8108               LD      R16, Y
   \   00000148   8119               LDD     R17, Y+1
   \   0000014A   5001               SUBI    R16, 1
   \   0000014C   4010               SBCI    R17, 0
   \   0000014E   830A               STD     Y+2, R16
   \   00000150   831B               STD     Y+3, R17
   \                     ??floatTransmit_7:
   \   00000152   812A               LDD     R18, Y+2
   \   00000154   813B               LDD     R19, Y+3
   \   00000156   2333               TST     R19
   \   00000158   F08A               BRMI    ??floatTransmit_8
    231            {
    232              USART_transmit(buff[i]);
                     ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \   0000015A   01FE               MOVW    R31:R30, R29:R28
   \   0000015C   963C               ADIW    R31:R30, 12
   \   0000015E   810A               LDD     R16, Y+2
   \   00000160   811B               LDD     R17, Y+3
   \   00000162   0FE0               ADD     R30, R16
   \   00000164   1FF1               ADC     R31, R17
   \   00000166   8100               LD      R16, Z
   \   00000168   E010               LDI     R17, 0
   \   0000016A   ........           CALL    USART_transmit
    233            }
   \   0000016E   810A               LDD     R16, Y+2
   \   00000170   811B               LDD     R17, Y+3
   \   00000172   5001               SUBI    R16, 1
   \   00000174   4010               SBCI    R17, 0
   \   00000176   830A               STD     Y+2, R16
   \   00000178   831B               STD     Y+3, R17
   \   0000017A   CFEB               RJMP    ??floatTransmit_7
    234            USART_transmit('.');
                   ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \                     ??floatTransmit_8:
   \   0000017C   E20E               LDI     R16, 46
   \   0000017E   E010               LDI     R17, 0
   \   00000180   ........           CALL    USART_transmit
    235            if (floatNr<0)
   \   00000184   E040               LDI     R20, 0
   \   00000186   E050               LDI     R21, 0
   \   00000188   E060               LDI     R22, 0
   \   0000018A   E070               LDI     R23, 0
   \   0000018C   0182               MOVW    R17:R16, R5:R4
   \   0000018E   0193               MOVW    R19:R18, R7:R6
   \   00000190   ........           CALL    ?F_CMP_LT_L04
   \   00000194   F450               BRCC    ??floatTransmit_9
    236              floatNr*=-1;
   \   00000196   E040               LDI     R20, 0
   \   00000198   E050               LDI     R21, 0
   \   0000019A   E860               LDI     R22, 128
   \   0000019C   EB7F               LDI     R23, 191
   \   0000019E   0182               MOVW    R17:R16, R5:R4
   \   000001A0   0193               MOVW    R19:R18, R7:R6
   \   000001A2   ........           CALL    ?F_MUL_L04
   \   000001A6   0128               MOVW    R5:R4, R17:R16
   \   000001A8   0139               MOVW    R7:R6, R19:R18
    237            for (i=0; i<p2; i++)
   \                     ??floatTransmit_9:
   \   000001AA   E000               LDI     R16, 0
   \   000001AC   E010               LDI     R17, 0
   \   000001AE   830A               STD     Y+2, R16
   \   000001B0   831B               STD     Y+3, R17
   \                     ??floatTransmit_10:
   \   000001B2   810A               LDD     R16, Y+2
   \   000001B4   811B               LDD     R17, Y+3
   \   000001B6   8528               LDD     R18, Y+8
   \   000001B8   8539               LDD     R19, Y+9
   \   000001BA   1702               CP      R16, R18
   \   000001BC   0713               CPC     R17, R19
   \   000001BE   F5E8               BRCC    ??floatTransmit_11
    238            {
    239              floatNr=floatNr-(long long)floatNr;
   \   000001C0   0182               MOVW    R17:R16, R5:R4
   \   000001C2   0193               MOVW    R19:R18, R7:R6
   \   000001C4   ........           CALL    ?F2SLL_L12
   \   000001C8   ........           CALL    ?SLL2F_L12
   \   000001CC   01A8               MOVW    R21:R20, R17:R16
   \   000001CE   01B9               MOVW    R23:R22, R19:R18
   \   000001D0   0182               MOVW    R17:R16, R5:R4
   \   000001D2   0193               MOVW    R19:R18, R7:R6
   \   000001D4   ........           CALL    ?F_SUB_L04
   \   000001D8   0128               MOVW    R5:R4, R17:R16
   \   000001DA   0139               MOVW    R7:R6, R19:R18
    240              floatNr*=10;
   \   000001DC   E040               LDI     R20, 0
   \   000001DE   E050               LDI     R21, 0
   \   000001E0   E260               LDI     R22, 32
   \   000001E2   E471               LDI     R23, 65
   \   000001E4   0182               MOVW    R17:R16, R5:R4
   \   000001E6   0193               MOVW    R19:R18, R7:R6
   \   000001E8   ........           CALL    ?F_MUL_L04
   \   000001EC   0128               MOVW    R5:R4, R17:R16
   \   000001EE   0139               MOVW    R7:R6, R19:R18
    241              nr=(int)floatNr;
   \   000001F0   0182               MOVW    R17:R16, R5:R4
   \   000001F2   0193               MOVW    R19:R18, R7:R6
   \   000001F4   ........           CALL    ?F2SL_L04
   \   000001F8   2F21               MOV     R18, R17
   \   000001FA   0F22               LSL     R18
   \   000001FC   0B22               SBC     R18, R18
   \   000001FE   2F32               MOV     R19, R18
   \   00000200   2F42               MOV     R20, R18
   \   00000202   2F52               MOV     R21, R18
   \   00000204   2F62               MOV     R22, R18
   \   00000206   2F72               MOV     R23, R18
   \   00000208   0148               MOVW    R9:R8, R17:R16
   \   0000020A   0159               MOVW    R11:R10, R19:R18
   \   0000020C   016A               MOVW    R13:R12, R21:R20
   \   0000020E   017B               MOVW    R15:R14, R23:R22
    242              USART_transmit(nr+'0');
   \   00000210   0184               MOVW    R17:R16, R9:R8
   \   00000212   0195               MOVW    R19:R18, R11:R10
   \   00000214   01A6               MOVW    R21:R20, R13:R12
   \   00000216   01B7               MOVW    R23:R22, R15:R14
   \   00000218   5D00               SUBI    R16, 208
   \   0000021A   4F1F               SBCI    R17, 255
   \   0000021C   4F2F               SBCI    R18, 255
   \   0000021E   4F3F               SBCI    R19, 255
   \   00000220   4F4F               SBCI    R20, 255
   \   00000222   4F5F               SBCI    R21, 255
   \   00000224   4F6F               SBCI    R22, 255
   \   00000226   4F7F               SBCI    R23, 255
   \   00000228   ........           CALL    USART_transmit
    243            }
   \   0000022C   810A               LDD     R16, Y+2
   \   0000022E   811B               LDD     R17, Y+3
   \   00000230   5F0F               SUBI    R16, 255
   \   00000232   4F1F               SBCI    R17, 255
   \   00000234   830A               STD     Y+2, R16
   \   00000236   831B               STD     Y+3, R17
   \   00000238   CFBC               RJMP    ??floatTransmit_10
    244          }
   \                     ??floatTransmit_11:
   \   0000023A   96AA               ADIW    R29:R28, 42
   \   0000023C   E1E0               LDI     R30, 16
   \   0000023E   ........           JMP     ?EPILOGUE_B16_L09
    245          //transmiterea unui .ir de caractere pe seriala

   \                                 In  segment CODE, align 2, keep-with-next
    246          void characterTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     characterTransmit:
    247          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
    248            unsigned char *x=(unsigned char *)(p3);
   \   0000000A   014D               MOVW    R9:R8, R27:R26
    249            int index=p2;
   \   0000000C   013C               MOVW    R7:R6, R25:R24
    250            while(index!=0)
   \                     ??characterTransmit_0:
   \   0000000E   2D06               MOV     R16, R6
   \   00000010   2907               OR      R16, R7
   \   00000012   F079               BREQ    ??characterTransmit_1
    251            {
    252              USART_transmit(x[p2-index]);
                     ^
Warning[Pe223]: function "USART_transmit" declared implicitly
   \   00000014   018C               MOVW    R17:R16, R25:R24
   \   00000016   1906               SUB     R16, R6
   \   00000018   0917               SBC     R17, R7
   \   0000001A   01F4               MOVW    R31:R30, R9:R8
   \   0000001C   0FE0               ADD     R30, R16
   \   0000001E   1FF1               ADC     R31, R17
   \   00000020   8100               LD      R16, Z
   \   00000022   E010               LDI     R17, 0
   \   00000024   ........           CALL    USART_transmit
    253              index--;
   \   00000028   EF0F               LDI     R16, 255
   \   0000002A   0E60               ADD     R6, R16
   \   0000002C   EF0F               LDI     R16, 255
   \   0000002E   1E70               ADC     R7, R16
   \   00000030   CFEE               RJMP    ??characterTransmit_0
    254            }
    255          }
   \                     ??characterTransmit_1:
   \   00000032   E0EA               LDI     R30, 10
   \   00000034   ........           JMP     ?EPILOGUE_B10_L09

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   000000000000       DD 0, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_0_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_1`:
   \   00000000   FFFFFFFFFFFF       DD 4294967295, 4294967295
   \              FFFF        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_ffffffff_ffffffff:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_1`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_2`:
   \   00000000   000A00000000       DD 10, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_a_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_2`

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for myprint>_0`:
   \   00000000   0000               DW      0
   \   00000002   00                 DB      0
   \   00000003   ....               DW      (??myprint_1) /2
   \   00000005   0004               DW      4
   \   00000007   ....               DW      (??myprint_0) /2
   \   00000009   ....               DW      (??myprint_2) /2
   \   0000000B   ....               DW      (??myprint_3) /2
   \   0000000D   ....               DW      (??myprint_4) /2
   \   0000000F   00                 DB      0

   \                                 In  segment NEAR_F, align 1, keep-with-next
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      10      2  characterTransmit
                   10 2 -> USART_transmit
       6      2  crc16
      24      4  doubleTransmit
                   24 2 -> USART_transmit
      58      4  floatTransmit
                   58 2 -> USART_transmit
      24      4  hexadecimalTransmit
                   24 2 -> USART_transmit
      15      4  integerTransmit
                   15 2 -> USART_transmit
       0      2  lungimeFunctie
       0      2  min
       6      2  myprint
                    6 2 -> characterTransmit
                    6 2 -> doubleTransmit
                    6 2 -> hexadecimalTransmit
                    6 2 -> integerTransmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  ?<Constant {0}>
       8  ?<Initializer for 64 Bit Constant>_0
       8  ?<Initializer for 64 Bit Constant>_1
       8  ?<Initializer for 64 Bit Constant>_2
      16  ?<Jumptable for myprint>_0
       8  __Constant_0_0
       8  __Constant_a_0
       8  __Constant_ffffffff_ffffffff
      56  characterTransmit
     136  crc16
     344  doubleTransmit
     578  floatTransmit
     202  hexadecimalTransmit
     130  integerTransmit
      40  lungimeFunctie
      14  min
      64  myprint
       6  -- Other

 
 1 564 bytes in segment CODE
     6 bytes in segment INITTAB
    30 bytes in segment NEAR_F
    24 bytes in segment NEAR_I
    24 bytes in segment NEAR_ID
    16 bytes in segment SWITCH
 
 1 610 bytes of CODE memory (+ 30 bytes shared)
     0 bytes of DATA memory (+ 24 bytes shared)

Errors: none
Warnings: 10

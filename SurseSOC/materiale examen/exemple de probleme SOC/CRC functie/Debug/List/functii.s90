///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       22/Dec/2014  14:32:21 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\1307B\CRC functie\functii.c                          /
//    Command line =  "D:\1307B\CRC functie\functii.c" --cpu=m16 -ms -o       /
//                    "D:\1307B\CRC functie\Debug\Obj\" -lC "D:\1307B\CRC     /
//                    functie\Debug\List\" -lA "D:\1307B\CRC                  /
//                    functie\Debug\List\" --initializers_in_flash --no_cse   /
//                    --no_inline --no_code_motion --no_cross_call            /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib    /
//                    -On                                                     /
//    List file    =  D:\1307B\CRC functie\Debug\List\functii.s90             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME functii

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B10_L09
        EXTERN ?EPILOGUE_B14_L09
        EXTERN ?EPILOGUE_B16_L09
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?EPILOGUE_B6_L09
        EXTERN ?F2SLL_L12
        EXTERN ?F2SL_L04
        EXTERN ?F_CMP_GE_L04
        EXTERN ?F_CMP_LT_L04
        EXTERN ?F_MUL_L04
        EXTERN ?F_SUB_L04
        EXTERN ?LL_CMP_L12
        EXTERN ?LL_MUL_L12
        EXTERN ?PROLOGUE10_L09
        EXTERN ?PROLOGUE14_L09
        EXTERN ?PROLOGUE16_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?PROLOGUE6_L09
        EXTERN ?Register_R10_is_cg_reg
        EXTERN ?Register_R11_is_cg_reg
        EXTERN ?Register_R12_is_cg_reg
        EXTERN ?Register_R13_is_cg_reg
        EXTERN ?Register_R14_is_cg_reg
        EXTERN ?Register_R15_is_cg_reg
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?Register_R9_is_cg_reg
        EXTERN ?SL2F_L04
        EXTERN ?SLL2F_L12
        EXTERN ?SLL_DIV_L12
        EXTERN ?SLL_MOD_L12
        EXTERN ?SL_SHR_L03
        EXTERN ?SS_DIVMOD_L02
        EXTERN ?SV_SWITCH_L06
        EXTERN ?S_EC_MUL_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBWEAK __Constant_0_0
        PUBWEAK __Constant_a_0
        PUBWEAK __Constant_ffffffff_ffffffff
        PUBLIC characterTransmit
        FUNCTION characterTransmit,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC crc16
        FUNCTION crc16,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC doubleTransmit
        FUNCTION doubleTransmit,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC floatTransmit
        FUNCTION floatTransmit,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 58, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC hexadecimalTransmit
        FUNCTION hexadecimalTransmit,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC integerTransmit
        FUNCTION integerTransmit,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC lungimeFunctie
        FUNCTION lungimeFunctie,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC min
        FUNCTION min,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC myprint
        FUNCTION myprint,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+2
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
        EXTERN USART_transmit
        FUNCTION USART_transmit,0200H
        ARGFRAME RSTACK, 0, STACK

// D:\1307B\CRC functie\functii.c
//    1 #include "functii.h"
//    2 

        RSEG CODE:CODE:NOROOT(1)
//    3 unsigned int crc16(unsigned int polinom16, unsigned int init_val_16,
crc16:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function crc16
//    4                    unsigned int adr_start,unsigned int len, int ord)
//    5 {
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -3)
          CFI R26 Frame(CFA_Y, -4)
          CFI R25 Frame(CFA_Y, -5)
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R19:R18
        MOVW    R31:R30, R21:R20
        LDD     R18, Y+4
        LDD     R19, Y+5
//    6   //rezultatul final
//    7   unsigned int crc = init_val_16;
        MOVW    R17:R16, R3:R2
//    8   //reþine în octetul cel mai semnificativ datele
//    9   //extrase din memoria flash
//   10   unsigned int data = 0;
        LDI     R20, 0
        LDI     R21, 0
//   11   while( len-- ) {
??crc16_0:
        MOVW    R25:R24, R23:R22
        MOVW    R23:R22, R25:R24
        SUBI    R22, 1
        SBCI    R23, 0
        OR      R24, R25
        BREQ    ??crc16_1
//   12     unsigned int i;
//   13     //se extrage valoarea unui octet de la adresa de start
//   14     //din memoria flash
//   15     data = *(__flash char *)adr_start;
        LPM     R24, Z
        LDI     R25, 0
        MOVW    R21:R20, R25:R24
//   16     if ( ord == MSBF ) //opþiunea cu shiftare spre MSB
        CPI     R18, 1
        LDI     R24, 0
        CPC     R19, R24
        BRNE    ??crc16_2
//   17     {
//   18       //octetul este shiftat la stânga pentru a se alinia
//   19       //cu polinomul generator
//   20       data <<= 8;
        MOV     R21, R20
        LDI     R20, 0
//   21       //datele sunt "transferate" în rezultat
//   22       crc ^= data;
        EOR     R16, R20
        EOR     R17, R21
//   23       adr_start++;
        ADIW    R31:R30, 1
//   24       //pentru biþii de date se face XOR cu polinomul generator,
//   25       //daca bitul cel mai semnificativ este 1 sau se shifteaza datele
//   26       //la stânga, dacã bitul cel mai semnificativ este 0
//   27       for( i = 0; i < 8; ++i ) {
        LDI     R26, 0
        LDI     R27, 0
??crc16_3:
        CPI     R26, 8
        LDI     R24, 0
        CPC     R27, R24
        BRCC    ??crc16_0
//   28         //se verificã dacã bitul cel mai semnificativ este 1
//   29         if( crc & 0x8000 )
        BST     R17, 7
        BRTC    ??crc16_4
//   30           crc = (crc << 1) ^ polinom16;
        LSL     R16
        ROL     R17
        EOR     R16, R0
        EOR     R17, R1
        RJMP    ??crc16_5
//   31         else
//   32           crc = crc << 1;
??crc16_4:
        LSL     R16
        ROL     R17
//   33       }
??crc16_5:
        ADIW    R27:R26, 1
        RJMP    ??crc16_3
//   34     }
//   35     else
//   36       //opþiunea cu shiftare spre LSB
//   37       //parametrul polinom16 al funcþiei trebuie sã aibã biþii inversaþi în
//   38       //prealabil
//   39     {
//   40       crc ^= data;
??crc16_2:
        EOR     R16, R20
        EOR     R17, R21
//   41       adr_start++;
        ADIW    R31:R30, 1
//   42       //se verificã bitul cel mai putin semnificativ .i dacã
//   43       //acesta este 1 se face XOR cu polinomul generator,
//   44       // altfel datele sunt shiftate la dreapta
//   45       for( i = 0; i < 8; ++i ) {
        LDI     R26, 0
        LDI     R27, 0
??crc16_6:
        CPI     R26, 8
        LDI     R24, 0
        CPC     R27, R24
        BRCC    ??crc16_0
//   46         //se verificã daca cel mai puþin semnificativ bit este 1
//   47         if( crc & 0x0001 )
        BST     R16, 0
        BRTC    ??crc16_7
//   48           crc = (crc >> 1) ^ polinom16;
        LSR     R17
        ROR     R16
        EOR     R16, R0
        EOR     R17, R1
        RJMP    ??crc16_8
//   49         else
//   50           crc = crc >> 1;
??crc16_7:
        LSR     R17
        ROR     R16
//   51       }
??crc16_8:
        ADIW    R27:R26, 1
        RJMP    ??crc16_6
//   52     }
//   53   }
//   54   return crc;
??crc16_1:
        LDI     R30, 6
        JMP     ?EPILOGUE_B4_L09
          CFI EndBlock cfiBlock0
//   55 }
//   56 

        RSEG CODE:CODE:NOROOT(1)
//   57 unsigned char min(unsigned char x, unsigned char y)
min:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function min
//   58 {
        MOV     R18, R16
//   59   if(x>y)
        CP      R17, R18
        BRCC    ??min_0
//   60   {
//   61    
//   62     return y;
        MOV     R16, R17
        RET
//   63   }
//   64   else 
//   65     return x;
??min_0:
        MOV     R16, R18
        RET
          CFI EndBlock cfiBlock1
//   66 }
//   67 
//   68 

        RSEG CODE:CODE:NOROOT(1)
//   69 unsigned int lungimeFunctie(unsigned int adr)
lungimeFunctie:
          CFI Block cfiBlock2 Using cfiCommon1
          CFI Function lungimeFunctie
//   70 {
        MOVW    R19:R18, R17:R16
//   71   unsigned int nrOcteti=0;
        LDI     R16, 0
        LDI     R17, 0
//   72   unsigned int data;
//   73   unsigned int realAdr=adr<<1;
        MOVW    R31:R30, R19:R18
        LSL     R30
        ROL     R31
//   74   
//   75   
//   76   do{
//   77     data=*(__flash unsigned int*)realAdr;
??lungimeFunctie_0:
        LPM     R22, Z+
        LPM     R23, Z
        SBIW    R31:R30, 1
        MOVW    R21:R20, R23:R22
//   78     realAdr+=2;
        ADIW    R31:R30, 2
//   79     nrOcteti++;
        SUBI    R16, 255
        SBCI    R17, 255
//   80   }while(data!=0X9508);
        CPI     R20, 8
        LDI     R22, 149
        CPC     R21, R22
        BRNE    ??lungimeFunctie_0
//   81   return nrOcteti<<1;
        LSL     R16
        ROL     R17
        RET
          CFI EndBlock cfiBlock2
//   82 }
//   83 
//   84 
//   85 

        RSEG CODE:CODE:NOROOT(1)
//   86 void myprint(unsigned int tip, unsigned int nr_car, void * val)
myprint:
          CFI Block cfiBlock3 Using cfiCommon1
          CFI Function myprint
//   87 {
        FUNCALL myprint, integerTransmit
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL myprint, hexadecimalTransmit
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL myprint, doubleTransmit
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL myprint, characterTransmit
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE6_L09
          CFI R5 Frame(CFA_Y, -1)
          CFI R4 Frame(CFA_Y, -2)
          CFI R27 Frame(CFA_Y, -3)
          CFI R26 Frame(CFA_Y, -4)
          CFI R25 Frame(CFA_Y, -5)
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOVW    R5:R4, R19:R18
        MOVW    R27:R26, R21:R20
//   88   switch(tip)
        MOVW    R17:R16, R25:R24
        LDI     R30, LOW(`?<Jumptable for myprint>_0`)
        LDI     R31, (`?<Jumptable for myprint>_0`) >> 8
        JMP     ?SV_SWITCH_L06
//   89   {
//   90   case 0:
//   91     integerTransmit(tip, nr_car, val);
??myprint_0:
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
        RCALL   integerTransmit
//   92     break;
        RJMP    ??myprint_1
//   93   case 1:
//   94     hexadecimalTransmit(tip, nr_car, val);
??myprint_2:
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
        RCALL   hexadecimalTransmit
//   95     break;
        RJMP    ??myprint_1
//   96   case 2:
//   97     doubleTransmit(tip, nr_car, val);
??myprint_3:
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
        RCALL   doubleTransmit
//   98     break;
        RJMP    ??myprint_1
//   99   case 3:
//  100     characterTransmit(tip, nr_car, val);
??myprint_4:
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R5:R4
        MOVW    R17:R16, R25:R24
        RCALL   characterTransmit
//  101     break;
//  102   }
//  103 }
??myprint_1:
        LDI     R30, 6
        JMP     ?EPILOGUE_B6_L09
          CFI EndBlock cfiBlock3
//  104 
//  105 //transmiterea unui întreg pe serialã

        RSEG CODE:CODE:NOROOT(1)
//  106 void integerTransmit (unsigned int p1, unsigned int p2, void * p3)
integerTransmit:
          CFI Block cfiBlock4 Using cfiCommon1
          CFI Function integerTransmit
//  107 {
        FUNCALL integerTransmit, USART_transmit
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL integerTransmit, USART_transmit
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE10_L09
          CFI R9 Frame(CFA_Y, -1)
          CFI R8 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -4)
          CFI R5 Frame(CFA_Y, -5)
          CFI R4 Frame(CFA_Y, -6)
          CFI R27 Frame(CFA_Y, -7)
          CFI R26 Frame(CFA_Y, -8)
          CFI R25 Frame(CFA_Y, -9)
          CFI R24 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        SBIW    R29:R28, 5
          CFI CFA_Y Y+15
        MOVW    R9:R8, R17:R16
        MOVW    R5:R4, R19:R18
        MOVW    R27:R26, R21:R20
//  108   int index=0;
        LDI     R24, 0
        LDI     R25, 0
//  109   char aux[5];
//  110   int x=*((int *)(p3));
        LD      R6, X+
        LD      R7, X
        SBIW    R27:R26, 1
//  111   if(x<0)
        TST     R7
        BRPL    ??integerTransmit_0
//  112   {
//  113     USART_transmit('-');
        LDI     R16, 45
        LDI     R17, 0
        CALL    USART_transmit
//  114     x*=(-1);
        LDI     R20, 255
        LDI     R21, 255
        MOVW    R17:R16, R7:R6
        CALL    ?S_EC_MUL_L02
        MOVW    R7:R6, R17:R16
//  115   }
//  116   while(x!=0)
??integerTransmit_0:
        MOV     R16, R6
        OR      R16, R7
        BREQ    ??integerTransmit_1
//  117   {
//  118     aux[index]=x%10+'0';
        LDI     R20, 10
        LDI     R21, 0
        MOVW    R17:R16, R7:R6
        CALL    ?SS_DIVMOD_L02
        SUBI    R20, 208
        MOVW    R31:R30, R29:R28
        ADD     R30, R24
        ADC     R31, R25
        ST      Z, R20
//  119     index++;
        ADIW    R25:R24, 1
//  120     x=x/10;
        LDI     R20, 10
        LDI     R21, 0
        MOVW    R17:R16, R7:R6
        CALL    ?SS_DIVMOD_L02
        MOVW    R7:R6, R17:R16
        RJMP    ??integerTransmit_0
//  121   }
//  122   while(p2>0 )
??integerTransmit_1:
        MOV     R16, R4
        OR      R16, R5
        BREQ    ??integerTransmit_2
//  123   {
//  124     USART_transmit(aux[index-1]);
        MOVW    R31:R30, R29:R28
        ADD     R30, R24
        ADC     R31, R25
        SBIW    R31:R30, 1
        LD      R16, Z
        LDI     R17, 0
        CALL    USART_transmit
//  125     index--;
        SBIW    R25:R24, 1
//  126     p2--;
        LDI     R16, 255
        ADD     R4, R16
        LDI     R16, 255
        ADC     R5, R16
        RJMP    ??integerTransmit_1
//  127   }
//  128 }
??integerTransmit_2:
        ADIW    R29:R28, 5
          CFI CFA_Y Y+10
        LDI     R30, 10
        JMP     ?EPILOGUE_B10_L09
          CFI EndBlock cfiBlock4
//  129 //transmiterea unui numãr hexazecimal pe serialã

        RSEG CODE:CODE:NOROOT(1)
//  130 void hexadecimalTransmit (unsigned int p1, unsigned int p2, void * p3)
hexadecimalTransmit:
          CFI Block cfiBlock5 Using cfiCommon1
          CFI Function hexadecimalTransmit
//  131 {
        FUNCALL hexadecimalTransmit, USART_transmit
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL hexadecimalTransmit, USART_transmit
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL hexadecimalTransmit, USART_transmit
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE14_L09
          CFI R13 Frame(CFA_Y, -1)
          CFI R12 Frame(CFA_Y, -2)
          CFI R11 Frame(CFA_Y, -3)
          CFI R10 Frame(CFA_Y, -4)
          CFI R9 Frame(CFA_Y, -5)
          CFI R8 Frame(CFA_Y, -6)
          CFI R7 Frame(CFA_Y, -7)
          CFI R6 Frame(CFA_Y, -8)
          CFI R5 Frame(CFA_Y, -9)
          CFI R4 Frame(CFA_Y, -10)
          CFI R27 Frame(CFA_Y, -11)
          CFI R26 Frame(CFA_Y, -12)
          CFI R25 Frame(CFA_Y, -13)
          CFI R24 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        SBIW    R29:R28, 10
          CFI CFA_Y Y+24
        MOVW    R13:R12, R17:R16
        MOVW    R7:R6, R19:R18
        MOVW    R11:R10, R21:R20
//  132   long x=*(( long *)(p3));
        MOVW    R31:R30, R11:R10
        LD      R24, Z
        LDD     R25, Z+1
        LDD     R26, Z+2
        LDD     R27, Z+3
//  133   char aux[10];
//  134   int index=0;
        CLR     R4
        CLR     R5
//  135   int p22=p2;
        MOVW    R9:R8, R7:R6
//  136   USART_transmit('0');
        LDI     R16, 48
        LDI     R17, 0
        CALL    USART_transmit
//  137   USART_transmit('x');
        LDI     R16, 120
        LDI     R17, 0
        CALL    USART_transmit
//  138   while(x!=0 && p22)
??hexadecimalTransmit_0:
        MOV     R16, R24
        OR      R16, R25
        OR      R16, R26
        OR      R16, R27
        BREQ    ??hexadecimalTransmit_1
        MOV     R16, R8
        OR      R16, R9
        BREQ    ??hexadecimalTransmit_1
//  139   {
//  140     aux[index]=x&0x0F;
        MOVW    R17:R16, R25:R24
        MOV     R17, R16
        ANDI    R17, 0x0F
        MOVW    R31:R30, R29:R28
        ADD     R30, R4
        ADC     R31, R5
        ST      Z, R17
//  141     if(aux[index]<=9)
        MOVW    R31:R30, R29:R28
        ADD     R30, R4
        ADC     R31, R5
        LD      R16, Z
        CPI     R16, 10
        BRCC    ??hexadecimalTransmit_2
//  142     {
//  143       aux[index]+='0';
        MOVW    R31:R30, R29:R28
        ADD     R30, R4
        ADC     R31, R5
        LD      R16, Z
        SUBI    R16, 208
        ST      Z, R16
        RJMP    ??hexadecimalTransmit_3
//  144     }
//  145     else
//  146     {
//  147       aux[index]=aux[index]+'A'-10;
??hexadecimalTransmit_2:
        MOVW    R31:R30, R29:R28
        ADD     R30, R4
        ADC     R31, R5
        LD      R16, Z
        SUBI    R16, 201
        ST      Z, R16
//  148     }
//  149     index++;
??hexadecimalTransmit_3:
        LDI     R16, 1
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
//  150     x>>=4;
        LDI     R20, 4
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?SL_SHR_L03
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//  151     p22--;
        LDI     R16, 255
        ADD     R8, R16
        LDI     R16, 255
        ADC     R9, R16
        RJMP    ??hexadecimalTransmit_0
//  152   }
//  153   while(p2>0 && index>0)
??hexadecimalTransmit_1:
        MOV     R16, R6
        OR      R16, R7
        BREQ    ??hexadecimalTransmit_4
        LDI     R16, 1
        CP      R4, R16
        LDI     R16, 0
        CPC     R5, R16
        BRLT    ??hexadecimalTransmit_4
//  154   {
//  155     USART_transmit(aux[index-1]);
        MOVW    R31:R30, R29:R28
        ADD     R30, R4
        ADC     R31, R5
        SBIW    R31:R30, 1
        LD      R16, Z
        LDI     R17, 0
        CALL    USART_transmit
//  156     index--;
        LDI     R16, 255
        ADD     R4, R16
        LDI     R16, 255
        ADC     R5, R16
//  157     p2--;
        LDI     R16, 255
        ADD     R6, R16
        LDI     R16, 255
        ADC     R7, R16
        RJMP    ??hexadecimalTransmit_1
//  158   }
//  159 }
??hexadecimalTransmit_4:
        ADIW    R29:R28, 10
          CFI CFA_Y Y+14
        LDI     R30, 14
        JMP     ?EPILOGUE_B14_L09
          CFI EndBlock cfiBlock5
//  160 //transmiterea unui numãr de tip double pe serialã

        RSEG CODE:CODE:NOROOT(1)
//  161 void doubleTransmit(unsigned int p1, unsigned int p2, void * p3)
doubleTransmit:
          CFI Block cfiBlock6 Using cfiCommon1
          CFI Function doubleTransmit
//  162 {
        FUNCALL doubleTransmit, USART_transmit
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL doubleTransmit, USART_transmit
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL doubleTransmit, USART_transmit
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL doubleTransmit, USART_transmit
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE14_L09
          CFI R13 Frame(CFA_Y, -1)
          CFI R12 Frame(CFA_Y, -2)
          CFI R11 Frame(CFA_Y, -3)
          CFI R10 Frame(CFA_Y, -4)
          CFI R9 Frame(CFA_Y, -5)
          CFI R8 Frame(CFA_Y, -6)
          CFI R7 Frame(CFA_Y, -7)
          CFI R6 Frame(CFA_Y, -8)
          CFI R5 Frame(CFA_Y, -9)
          CFI R4 Frame(CFA_Y, -10)
          CFI R27 Frame(CFA_Y, -11)
          CFI R26 Frame(CFA_Y, -12)
          CFI R25 Frame(CFA_Y, -13)
          CFI R24 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        SBIW    R29:R28, 10
          CFI CFA_Y Y+24
        MOVW    R13:R12, R17:R16
        MOVW    R11:R10, R19:R18
        MOVW    R9:R8, R21:R20
//  163   int index=0;
        CLR     R6
        CLR     R7
//  164   int dataIntreg;
//  165   char aux[10];
//  166   double x=*((double *)(p3));
        MOVW    R31:R30, R9:R8
        LD      R24, Z
        LDD     R25, Z+1
        LDD     R26, Z+2
        LDD     R27, Z+3
//  167   if(x<0)
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F_CMP_LT_L04
        BRCC    ??doubleTransmit_0
//  168   {USART_transmit('-');
        LDI     R16, 45
        LDI     R17, 0
        CALL    USART_transmit
//  169   x*=(-1);
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 128
        LDI     R23, 191
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F_MUL_L04
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//  170   }
//  171   dataIntreg=(int)x;
??doubleTransmit_0:
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F2SL_L04
        MOVW    R5:R4, R17:R16
//  172   while((int)dataIntreg!=0)
??doubleTransmit_1:
        MOV     R16, R4
        OR      R16, R5
        BREQ    ??doubleTransmit_2
//  173   {
//  174     aux[index]=(int)dataIntreg%10+'0';
        LDI     R20, 10
        LDI     R21, 0
        MOVW    R17:R16, R5:R4
        CALL    ?SS_DIVMOD_L02
        SUBI    R20, 208
        MOVW    R31:R30, R29:R28
        ADD     R30, R6
        ADC     R31, R7
        ST      Z, R20
//  175     index++;
        LDI     R16, 1
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
//  176     dataIntreg=dataIntreg/10;
        LDI     R20, 10
        LDI     R21, 0
        MOVW    R17:R16, R5:R4
        CALL    ?SS_DIVMOD_L02
        MOVW    R5:R4, R17:R16
        RJMP    ??doubleTransmit_1
//  177   }
//  178   while(index>0 )
??doubleTransmit_2:
        LDI     R16, 1
        CP      R6, R16
        LDI     R16, 0
        CPC     R7, R16
        BRLT    ??doubleTransmit_3
//  179   {
//  180     USART_transmit(aux[index-1]);
        MOVW    R31:R30, R29:R28
        ADD     R30, R6
        ADC     R31, R7
        SBIW    R31:R30, 1
        LD      R16, Z
        LDI     R17, 0
        CALL    USART_transmit
//  181     index--;
        LDI     R16, 255
        ADD     R6, R16
        LDI     R16, 255
        ADC     R7, R16
        RJMP    ??doubleTransmit_2
//  182   }
//  183   dataIntreg=(int)x;
??doubleTransmit_3:
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F2SL_L04
        MOVW    R5:R4, R17:R16
//  184   x=x-dataIntreg;
        MOVW    R17:R16, R5:R4
        MOV     R18, R17
        LSL     R18
        SBC     R18, R18
        MOV     R19, R18
        CALL    ?SL2F_L04
        MOVW    R21:R20, R17:R16
        MOVW    R23:R22, R19:R18
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F_SUB_L04
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//  185   if(x>0)
        LDI     R20, 1
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F_CMP_GE_L04
        BRCC    ??doubleTransmit_4
//  186   {
//  187     USART_transmit('.');
        LDI     R16, 46
        LDI     R17, 0
        CALL    USART_transmit
//  188   }
//  189   while(x>0 && p2>0)
??doubleTransmit_4:
        LDI     R20, 1
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F_CMP_GE_L04
        BRCC    ??doubleTransmit_5
        MOV     R16, R10
        OR      R16, R11
        BREQ    ??doubleTransmit_5
//  190   {
//  191     x=x*10;
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 32
        LDI     R23, 65
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F_MUL_L04
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//  192     dataIntreg=(int)x;
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F2SL_L04
        MOVW    R5:R4, R17:R16
//  193     USART_transmit(dataIntreg+'0');
        MOVW    R17:R16, R5:R4
        SUBI    R16, 208
        SBCI    R17, 255
        CALL    USART_transmit
//  194     x=x-dataIntreg;
        MOVW    R17:R16, R5:R4
        MOV     R18, R17
        LSL     R18
        SBC     R18, R18
        MOV     R19, R18
        CALL    ?SL2F_L04
        MOVW    R21:R20, R17:R16
        MOVW    R23:R22, R19:R18
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F_SUB_L04
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//  195     p2--;
        LDI     R16, 255
        ADD     R10, R16
        LDI     R16, 255
        ADC     R11, R16
        RJMP    ??doubleTransmit_4
//  196   }
//  197 }
??doubleTransmit_5:
        ADIW    R29:R28, 10
          CFI CFA_Y Y+14
        LDI     R30, 14
        JMP     ?EPILOGUE_B14_L09
          CFI EndBlock cfiBlock6
//  198 //transmiterea unui numar de tip float

        RSEG CODE:CODE:NOROOT(1)
//  199 void floatTransmit(unsigned int p1, unsigned int p2, void * p3)
floatTransmit:
          CFI Block cfiBlock7 Using cfiCommon1
          CFI Function floatTransmit
//  200 {
        FUNCALL floatTransmit, USART_transmit
        LOCFRAME CSTACK, 58, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL floatTransmit, USART_transmit
        LOCFRAME CSTACK, 58, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL floatTransmit, USART_transmit
        LOCFRAME CSTACK, 58, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE16_L09
          CFI R15 Frame(CFA_Y, -1)
          CFI R14 Frame(CFA_Y, -2)
          CFI R13 Frame(CFA_Y, -3)
          CFI R12 Frame(CFA_Y, -4)
          CFI R11 Frame(CFA_Y, -5)
          CFI R10 Frame(CFA_Y, -6)
          CFI R9 Frame(CFA_Y, -7)
          CFI R8 Frame(CFA_Y, -8)
          CFI R7 Frame(CFA_Y, -9)
          CFI R6 Frame(CFA_Y, -10)
          CFI R5 Frame(CFA_Y, -11)
          CFI R4 Frame(CFA_Y, -12)
          CFI R27 Frame(CFA_Y, -13)
          CFI R26 Frame(CFA_Y, -14)
          CFI R25 Frame(CFA_Y, -15)
          CFI R24 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        REQUIRE ?Register_R14_is_cg_reg
        REQUIRE ?Register_R15_is_cg_reg
        SBIW    R29:R28, 42
          CFI CFA_Y Y+58
        STD     Y+10, R16
        STD     Y+11, R17
        STD     Y+8, R18
        STD     Y+9, R19
        STD     Y+6, R20
        STD     Y+7, R21
//  201   char buff[30]={0};
        MOVW    R17:R16, R29:R28
        SUBI    R16, 244
        SBCI    R17, 255
        MOVW    R31:R30, R17:R16
        LDI     R18, 0
        LDI     R24, 30
??floatTransmit_0:
        ST      Z+, R18
        DEC     R24
        BRNE    ??floatTransmit_0
//  202   int j, nrCaract;
//  203   long long nr;
//  204   char nrNeg;
//  205   int i;
//  206   float floatNr;
//  207   floatNr=*((float *)p3);
        LDD     R30, Y+6
        LDD     R31, Y+7
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
//  208   nrCaract=0;
        LDI     R16, 0
        LDI     R17, 0
        ST      Y, R16
        STD     Y+1, R17
//  209   nr=(long long)floatNr;
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F2SLL_L12
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        MOVW    R13:R12, R21:R20
        MOVW    R15:R14, R23:R22
//  210   nrNeg=(nr<0);
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        MOVW    R21:R20, R13:R12
        MOVW    R23:R22, R15:R14
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        MOVW    R13:R12, R21:R20
        MOVW    R15:R14, R23:R22
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        MOVW    R21:R20, R13:R12
        MOVW    R23:R22, R15:R14
        CALL    ?LL_CMP_L12
        BRGE    ??floatTransmit_1
        LDI     R16, 1
        RJMP    ??floatTransmit_2
??floatTransmit_1:
        LDI     R16, 0
??floatTransmit_2:
        MOV     R25, R16
//  211   if (nrNeg)
        TST     R25
        BREQ    ??floatTransmit_3
//  212     nr*=-1;
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        MOVW    R21:R20, R13:R12
        MOVW    R23:R22, R15:R14
        LDI     R26, LOW(__Constant_ffffffff_ffffffff)
        LDI     R27, (__Constant_ffffffff_ffffffff) >> 8
        CALL    ?LL_MUL_L12
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        MOVW    R13:R12, R21:R20
        MOVW    R15:R14, R23:R22
//  213   while(nr!=0)
??floatTransmit_3:
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        MOVW    R21:R20, R13:R12
        MOVW    R23:R22, R15:R14
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        MOVW    R13:R12, R21:R20
        MOVW    R15:R14, R23:R22
        LDI     R30, LOW(__Constant_0_0)
        LDI     R31, (__Constant_0_0) >> 8
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        MOVW    R21:R20, R13:R12
        MOVW    R23:R22, R15:R14
        CALL    ?LL_CMP_L12
        BREQ    ??floatTransmit_4
//  214   {
//  215     j=nr%10;
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        MOVW    R21:R20, R13:R12
        MOVW    R23:R22, R15:R14
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        MOVW    R13:R12, R21:R20
        MOVW    R15:R14, R23:R22
        LDI     R26, LOW(__Constant_a_0)
        LDI     R27, (__Constant_a_0) >> 8
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        MOVW    R21:R20, R13:R12
        MOVW    R23:R22, R15:R14
        CALL    ?SLL_MOD_L12
        STD     Y+4, R16
        STD     Y+5, R17
//  216     nr=nr/10;
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        MOVW    R21:R20, R13:R12
        MOVW    R23:R22, R15:R14
        LDI     R26, LOW(__Constant_a_0)
        LDI     R27, (__Constant_a_0) >> 8
        CALL    ?SLL_DIV_L12
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        MOVW    R13:R12, R21:R20
        MOVW    R15:R14, R23:R22
//  217     buff[nrCaract]=j+'0';
        LDD     R18, Y+4
        LDD     R19, Y+5
        SUBI    R18, 208
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 12
        LD      R16, Y
        LDD     R17, Y+1
        ADD     R30, R16
        ADC     R31, R17
        ST      Z, R18
//  218     nrCaract++;
        LD      R16, Y
        LDD     R17, Y+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Y, R16
        STD     Y+1, R17
        RJMP    ??floatTransmit_3
//  219   }
//  220   if(nrCaract ==0)
??floatTransmit_4:
        LD      R16, Y
        LDD     R17, Y+1
        OR      R16, R17
        BRNE    ??floatTransmit_5
//  221   {
//  222     buff[0]='0';
        LDI     R16, 48
        STD     Y+12, R16
//  223     nrCaract=1;
        LDI     R16, 1
        LDI     R17, 0
        ST      Y, R16
        STD     Y+1, R17
//  224   }
//  225   if(nrNeg)
??floatTransmit_5:
        TST     R25
        BREQ    ??floatTransmit_6
//  226   {
//  227     buff[nrCaract]='-';
        LDI     R17, 45
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 12
        LD      R18, Y
        LDD     R19, Y+1
        ADD     R30, R18
        ADC     R31, R19
        ST      Z, R17
//  228     nrCaract++;
        LD      R16, Y
        LDD     R17, Y+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Y, R16
        STD     Y+1, R17
//  229   }
//  230   for(i=nrCaract-1; i>=0; i--)
??floatTransmit_6:
        LD      R16, Y
        LDD     R17, Y+1
        SUBI    R16, 1
        SBCI    R17, 0
        STD     Y+2, R16
        STD     Y+3, R17
??floatTransmit_7:
        LDD     R18, Y+2
        LDD     R19, Y+3
        TST     R19
        BRMI    ??floatTransmit_8
//  231   {
//  232     USART_transmit(buff[i]);
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 12
        LDD     R16, Y+2
        LDD     R17, Y+3
        ADD     R30, R16
        ADC     R31, R17
        LD      R16, Z
        LDI     R17, 0
        CALL    USART_transmit
//  233   }
        LDD     R16, Y+2
        LDD     R17, Y+3
        SUBI    R16, 1
        SBCI    R17, 0
        STD     Y+2, R16
        STD     Y+3, R17
        RJMP    ??floatTransmit_7
//  234   USART_transmit('.');
??floatTransmit_8:
        LDI     R16, 46
        LDI     R17, 0
        CALL    USART_transmit
//  235   if (floatNr<0)
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F_CMP_LT_L04
        BRCC    ??floatTransmit_9
//  236     floatNr*=-1;
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 128
        LDI     R23, 191
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F_MUL_L04
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
//  237   for (i=0; i<p2; i++)
??floatTransmit_9:
        LDI     R16, 0
        LDI     R17, 0
        STD     Y+2, R16
        STD     Y+3, R17
??floatTransmit_10:
        LDD     R16, Y+2
        LDD     R17, Y+3
        LDD     R18, Y+8
        LDD     R19, Y+9
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??floatTransmit_11
//  238   {
//  239     floatNr=floatNr-(long long)floatNr;
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F2SLL_L12
        CALL    ?SLL2F_L12
        MOVW    R21:R20, R17:R16
        MOVW    R23:R22, R19:R18
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F_SUB_L04
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
//  240     floatNr*=10;
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 32
        LDI     R23, 65
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F_MUL_L04
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
//  241     nr=(int)floatNr;
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F2SL_L04
        MOV     R18, R17
        LSL     R18
        SBC     R18, R18
        MOV     R19, R18
        MOV     R20, R18
        MOV     R21, R18
        MOV     R22, R18
        MOV     R23, R18
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        MOVW    R13:R12, R21:R20
        MOVW    R15:R14, R23:R22
//  242     USART_transmit(nr+'0');
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        MOVW    R21:R20, R13:R12
        MOVW    R23:R22, R15:R14
        SUBI    R16, 208
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        SBCI    R20, 255
        SBCI    R21, 255
        SBCI    R22, 255
        SBCI    R23, 255
        CALL    USART_transmit
//  243   }
        LDD     R16, Y+2
        LDD     R17, Y+3
        SUBI    R16, 255
        SBCI    R17, 255
        STD     Y+2, R16
        STD     Y+3, R17
        RJMP    ??floatTransmit_10
//  244 }
??floatTransmit_11:
        ADIW    R29:R28, 42
          CFI CFA_Y Y+16
        LDI     R30, 16
        JMP     ?EPILOGUE_B16_L09
          CFI EndBlock cfiBlock7
//  245 //transmiterea unui .ir de caractere pe seriala

        RSEG CODE:CODE:NOROOT(1)
//  246 void characterTransmit (unsigned int p1, unsigned int p2, void * p3)
characterTransmit:
          CFI Block cfiBlock8 Using cfiCommon1
          CFI Function characterTransmit
//  247 {
        FUNCALL characterTransmit, USART_transmit
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE10_L09
          CFI R9 Frame(CFA_Y, -1)
          CFI R8 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -4)
          CFI R5 Frame(CFA_Y, -5)
          CFI R4 Frame(CFA_Y, -6)
          CFI R27 Frame(CFA_Y, -7)
          CFI R26 Frame(CFA_Y, -8)
          CFI R25 Frame(CFA_Y, -9)
          CFI R24 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        MOVW    R5:R4, R17:R16
        MOVW    R25:R24, R19:R18
        MOVW    R27:R26, R21:R20
//  248   unsigned char *x=(unsigned char *)(p3);
        MOVW    R9:R8, R27:R26
//  249   int index=p2;
        MOVW    R7:R6, R25:R24
//  250   while(index!=0)
??characterTransmit_0:
        MOV     R16, R6
        OR      R16, R7
        BREQ    ??characterTransmit_1
//  251   {
//  252     USART_transmit(x[p2-index]);
        MOVW    R17:R16, R25:R24
        SUB     R16, R6
        SBC     R17, R7
        MOVW    R31:R30, R9:R8
        ADD     R30, R16
        ADC     R31, R17
        LD      R16, Z
        LDI     R17, 0
        CALL    USART_transmit
//  253     index--;
        LDI     R16, 255
        ADD     R6, R16
        LDI     R16, 255
        ADC     R7, R16
        RJMP    ??characterTransmit_0
//  254   }
//  255 }
??characterTransmit_1:
        LDI     R30, 10
        JMP     ?EPILOGUE_B10_L09
          CFI EndBlock cfiBlock8

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for 64 Bit Constant>_0`:
        DD 0, 0

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
__Constant_0_0:
        DS8 8
        REQUIRE `?<Initializer for 64 Bit Constant>_0`

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for 64 Bit Constant>_1`:
        DD 4294967295, 4294967295

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
__Constant_ffffffff_ffffffff:
        DS8 8
        REQUIRE `?<Initializer for 64 Bit Constant>_1`

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for 64 Bit Constant>_2`:
        DD 10, 0

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
__Constant_a_0:
        DS8 8
        REQUIRE `?<Initializer for 64 Bit Constant>_2`

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for myprint>_0`:
        DW      0
        DB      0
        DW      (??myprint_1) /2
        DW      4
        DW      (??myprint_0) /2
        DW      (??myprint_2) /2
        DW      (??myprint_3) /2
        DW      (??myprint_4) /2
        DB      0

        RSEG NEAR_F:CODE:NOROOT(0)
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        END
// 
// 1 564 bytes in segment CODE
//     6 bytes in segment INITTAB
//    30 bytes in segment NEAR_F
//    24 bytes in segment NEAR_I
//    24 bytes in segment NEAR_ID
//    16 bytes in segment SWITCH
// 
// 1 610 bytes of CODE memory (+ 30 bytes shared)
//     0 bytes of DATA memory (+ 24 bytes shared)
//
//Errors: none
//Warnings: 10

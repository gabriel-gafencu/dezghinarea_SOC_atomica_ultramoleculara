###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        22/Dec/2014  17:42:56 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Generare frecventa citita\main.c                #
#    Command line =  "D:\1307B\Generare frecventa citita\main.c" --cpu=m16    #
#                    -mt -o "D:\1307B\Generare frecventa citita\Debug\Obj\"   #
#                    -lC "D:\1307B\Generare frecventa citita\Debug\List\"     #
#                    -lA "D:\1307B\Generare frecventa citita\Debug\List\"     #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\1307B\Generare frecventa citita\Debug\List\main.lst   #
#    Object file  =  D:\1307B\Generare frecventa citita\Debug\Obj\main.r90    #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Generare frecventa citita\main.c
      1          #include <inavr.h> //include biblioteca inavr.h
      2          #include <iom16.h> //include biblioteca iom16.h

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1
      3          #include "usart.h"
      4          #include "genF.h"

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
      5          unsigned char frecv[10];
   \                     frecv:
   \   00000000                      DS8 10

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
      6          unsigned long Fx;
   \                     Fx:
   \   00000000                      DS8 4

   \                                 In  segment TINY_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_I>`
      7          unsigned long FOsc=4015102;
   \                     FOsc:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for FOsc>`

   \                                 In  segment TINY_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_I>`
      8          unsigned int fu=50;
   \                     fu:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for fu>`

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
      9          unsigned long nrCicli;
   \                     nrCicli:
   \   00000000                      DS8 4

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
     10          unsigned long DC;
   \                     DC:
   \   00000000                      DS8 4

   \                                 In  segment TINY_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_I>`
     11          int N=8;
   \                     N:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for N>`

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
     12          int index;
   \                     index:
   \   00000000                      DS8 2

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
     13          int flag;
   \                     flag:
   \   00000000                      DS8 2
     14          
     15          #pragma vector = USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     16          __interrupt void interrupt_routine_USART_RXC(void)
   \                     interrupt_routine_USART_RXC:
     17          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   93FA               ST      -Y, R31
   \   0000000A   93EA               ST      -Y, R30
   \   0000000C   923A               ST      -Y, R3
   \   0000000E   922A               ST      -Y, R2
   \   00000010   921A               ST      -Y, R1
   \   00000012   920A               ST      -Y, R0
   \   00000014   937A               ST      -Y, R23
   \   00000016   936A               ST      -Y, R22
   \   00000018   935A               ST      -Y, R21
   \   0000001A   934A               ST      -Y, R20
   \   0000001C   933A               ST      -Y, R19
   \   0000001E   932A               ST      -Y, R18
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   B79F               IN      R25, 0x3F
     18            unsigned char c=UDR;
   \   00000026   B18C               IN      R24, 0x0C
     19            
     20            if(flag==0)
   \   00000028   9100....           LDS     R16, flag
   \   0000002C   9110....           LDS     R17, (flag + 1)
   \   00000030   2B01               OR      R16, R17
   \   00000032   F009               BREQ    $+2+2
   \   00000034   C09C               RJMP    ??interrupt_routine_USART_RXC_0
     21            {
     22              if(c!='@' && c!='k' && c!='m' && c!='M' && c!='K')
   \   00000036   3480               CPI     R24, 64
   \   00000038   F0C9               BREQ    ??interrupt_routine_USART_RXC_1
   \   0000003A   368B               CPI     R24, 107
   \   0000003C   F0B9               BREQ    ??interrupt_routine_USART_RXC_1
   \   0000003E   368D               CPI     R24, 109
   \   00000040   F0A9               BREQ    ??interrupt_routine_USART_RXC_1
   \   00000042   348D               CPI     R24, 77
   \   00000044   F099               BREQ    ??interrupt_routine_USART_RXC_1
   \   00000046   348B               CPI     R24, 75
   \   00000048   F089               BREQ    ??interrupt_routine_USART_RXC_1
     23              {
     24                frecv[index]=c;
   \   0000004A   9100....           LDS     R16, index
   \   0000004E   9110....           LDS     R17, (index + 1)
   \   00000052   2FE0               MOV     R30, R16
   \   00000054   ....               SUBI    R30, (-(frecv) & 0xFF)
   \   00000056   E0F0               LDI     R31, 0
   \   00000058   8380               ST      Z, R24
     25                index++;
   \   0000005A   ....               LDI     R30, index
   \   0000005C   E0F0               LDI     R31, 0
   \   0000005E   8100               LD      R16, Z
   \   00000060   8111               LDD     R17, Z+1
   \   00000062   5F0F               SUBI    R16, 255
   \   00000064   4F1F               SBCI    R17, 255
   \   00000066   8300               ST      Z, R16
   \   00000068   8311               STD     Z+1, R17
   \   0000006A   C081               RJMP    ??interrupt_routine_USART_RXC_0
     26              }
     27              else
     28              {
     29                
     30                
     31                for(int i =0;i<index;++i)
   \                     ??interrupt_routine_USART_RXC_1:
   \   0000006C   E0A0               LDI     R26, 0
   \   0000006E   E0B0               LDI     R27, 0
   \                     ??interrupt_routine_USART_RXC_2:
   \   00000070   9100....           LDS     R16, index
   \   00000074   9110....           LDS     R17, (index + 1)
   \   00000078   17A0               CP      R26, R16
   \   0000007A   07B1               CPC     R27, R17
   \   0000007C   F594               BRGE    ??interrupt_routine_USART_RXC_3
     32                {
     33                  if(frecv[i]>='0' && frecv[i]<='9')
   \   0000007E   2F0A               MOV     R16, R26
   \   00000080   2FE0               MOV     R30, R16
   \   00000082   ....               SUBI    R30, (-(frecv) & 0xFF)
   \   00000084   E0F0               LDI     R31, 0
   \   00000086   8100               LD      R16, Z
   \   00000088   3300               CPI     R16, 48
   \   0000008A   F148               BRCS    ??interrupt_routine_USART_RXC_4
   \   0000008C   2F0A               MOV     R16, R26
   \   0000008E   2FE0               MOV     R30, R16
   \   00000090   ....               SUBI    R30, (-(frecv) & 0xFF)
   \   00000092   E0F0               LDI     R31, 0
   \   00000094   8100               LD      R16, Z
   \   00000096   330A               CPI     R16, 58
   \   00000098   F510               BRCC    ??interrupt_routine_USART_RXC_4
     34                  {
     35                    Fx=Fx*10 + (frecv[i]-'0');
   \   0000009A   E04A               LDI     R20, 10
   \   0000009C   E050               LDI     R21, 0
   \   0000009E   E060               LDI     R22, 0
   \   000000A0   E070               LDI     R23, 0
   \   000000A2   ....               LDI     R30, Fx
   \   000000A4   E0F0               LDI     R31, 0
   \   000000A6   8100               LD      R16, Z
   \   000000A8   8111               LDD     R17, Z+1
   \   000000AA   8122               LDD     R18, Z+2
   \   000000AC   8133               LDD     R19, Z+3
   \   000000AE   ........           CALL    ?L_EC_MUL_L03
   \   000000B2   2F4A               MOV     R20, R26
   \   000000B4   2FE4               MOV     R30, R20
   \   000000B6   ....               SUBI    R30, (-(frecv) & 0xFF)
   \   000000B8   E0F0               LDI     R31, 0
   \   000000BA   8140               LD      R20, Z
   \   000000BC   E050               LDI     R21, 0
   \   000000BE   5340               SUBI    R20, 48
   \   000000C0   4050               SBCI    R21, 0
   \   000000C2   2F65               MOV     R22, R21
   \   000000C4   0F66               LSL     R22
   \   000000C6   0B66               SBC     R22, R22
   \   000000C8   2F76               MOV     R23, R22
   \   000000CA   0F04               ADD     R16, R20
   \   000000CC   1F15               ADC     R17, R21
   \   000000CE   1F26               ADC     R18, R22
   \   000000D0   1F37               ADC     R19, R23
   \   000000D2   ....               LDI     R30, Fx
   \   000000D4   E0F0               LDI     R31, 0
   \   000000D6   8300               ST      Z, R16
   \   000000D8   8311               STD     Z+1, R17
   \   000000DA   8322               STD     Z+2, R18
   \   000000DC   8333               STD     Z+3, R19
     36                    
     37                  }
     38                }
   \                     ??interrupt_routine_USART_RXC_4:
   \   000000DE   9611               ADIW    R27:R26, 1
   \   000000E0   CFC7               RJMP    ??interrupt_routine_USART_RXC_2
     39                
     40                
     41                
     42                if(c=='k' || c=='K')
   \                     ??interrupt_routine_USART_RXC_3:
   \   000000E2   368B               CPI     R24, 107
   \   000000E4   F011               BREQ    ??interrupt_routine_USART_RXC_5
   \   000000E6   348B               CPI     R24, 75
   \   000000E8   F499               BRNE    ??interrupt_routine_USART_RXC_6
     43                {
     44                  Fx*=1000; 
   \                     ??interrupt_routine_USART_RXC_5:
   \   000000EA   EE48               LDI     R20, 232
   \   000000EC   E053               LDI     R21, 3
   \   000000EE   E060               LDI     R22, 0
   \   000000F0   E070               LDI     R23, 0
   \   000000F2   ....               LDI     R30, Fx
   \   000000F4   E0F0               LDI     R31, 0
   \   000000F6   8100               LD      R16, Z
   \   000000F8   8111               LDD     R17, Z+1
   \   000000FA   8122               LDD     R18, Z+2
   \   000000FC   8133               LDD     R19, Z+3
   \   000000FE   ........           CALL    ?L_EC_MUL_L03
   \   00000102   ....               LDI     R30, Fx
   \   00000104   E0F0               LDI     R31, 0
   \   00000106   8300               ST      Z, R16
   \   00000108   8311               STD     Z+1, R17
   \   0000010A   8322               STD     Z+2, R18
   \   0000010C   8333               STD     Z+3, R19
   \   0000010E   C029               RJMP    ??interrupt_routine_USART_RXC_7
     45                }
     46                else
     47                {
     48                  if(c=='M')
   \                     ??interrupt_routine_USART_RXC_6:
   \   00000110   348D               CPI     R24, 77
   \   00000112   F499               BRNE    ??interrupt_routine_USART_RXC_8
     49                  {
     50                    Fx*=1000000; 
   \   00000114   E440               LDI     R20, 64
   \   00000116   E452               LDI     R21, 66
   \   00000118   E06F               LDI     R22, 15
   \   0000011A   E070               LDI     R23, 0
   \   0000011C   ....               LDI     R30, Fx
   \   0000011E   E0F0               LDI     R31, 0
   \   00000120   8100               LD      R16, Z
   \   00000122   8111               LDD     R17, Z+1
   \   00000124   8122               LDD     R18, Z+2
   \   00000126   8133               LDD     R19, Z+3
   \   00000128   ........           CALL    ?L_EC_MUL_L03
   \   0000012C   ....               LDI     R30, Fx
   \   0000012E   E0F0               LDI     R31, 0
   \   00000130   8300               ST      Z, R16
   \   00000132   8311               STD     Z+1, R17
   \   00000134   8322               STD     Z+2, R18
   \   00000136   8333               STD     Z+3, R19
   \   00000138   C014               RJMP    ??interrupt_routine_USART_RXC_7
     51                  }
     52                  else
     53                  {
     54                    if(c=='m')
   \                     ??interrupt_routine_USART_RXC_8:
   \   0000013A   368D               CPI     R24, 109
   \   0000013C   F491               BRNE    ??interrupt_routine_USART_RXC_7
     55                    {
     56                      Fx/=1000; 
   \   0000013E   EE48               LDI     R20, 232
   \   00000140   E053               LDI     R21, 3
   \   00000142   E060               LDI     R22, 0
   \   00000144   E070               LDI     R23, 0
   \   00000146   ....               LDI     R30, Fx
   \   00000148   E0F0               LDI     R31, 0
   \   0000014A   8100               LD      R16, Z
   \   0000014C   8111               LDD     R17, Z+1
   \   0000014E   8122               LDD     R18, Z+2
   \   00000150   8133               LDD     R19, Z+3
   \   00000152   ........           CALL    ?UL_DIVMOD_L03
   \   00000156   ....               LDI     R30, Fx
   \   00000158   E0F0               LDI     R31, 0
   \   0000015A   8300               ST      Z, R16
   \   0000015C   8311               STD     Z+1, R17
   \   0000015E   8322               STD     Z+2, R18
   \   00000160   8333               STD     Z+3, R19
     57                    }
     58                  }
     59                  
     60                }
     61                 flag=1;
   \                     ??interrupt_routine_USART_RXC_7:
   \   00000162   E001               LDI     R16, 1
   \   00000164   E010               LDI     R17, 0
   \   00000166   9300....           STS     flag, R16
   \   0000016A   9310....           STS     (flag + 1), R17
     62              }
     63            }
     64             
     65          }
   \                     ??interrupt_routine_USART_RXC_0:
   \   0000016E   BF9F               OUT     0x3F, R25
   \   00000170   9109               LD      R16, Y+
   \   00000172   9119               LD      R17, Y+
   \   00000174   9129               LD      R18, Y+
   \   00000176   9139               LD      R19, Y+
   \   00000178   9149               LD      R20, Y+
   \   0000017A   9159               LD      R21, Y+
   \   0000017C   9169               LD      R22, Y+
   \   0000017E   9179               LD      R23, Y+
   \   00000180   9009               LD      R0, Y+
   \   00000182   9019               LD      R1, Y+
   \   00000184   9029               LD      R2, Y+
   \   00000186   9039               LD      R3, Y+
   \   00000188   91E9               LD      R30, Y+
   \   0000018A   91F9               LD      R31, Y+
   \   0000018C   9189               LD      R24, Y+
   \   0000018E   9199               LD      R25, Y+
   \   00000190   91A9               LD      R26, Y+
   \   00000192   91B9               LD      R27, Y+
   \   00000194   9518               RETI
   \   00000196                      REQUIRE _A_UDR
     66          
     67          
     68          
     69          

   \                                 In  segment CODE, align 2, keep-with-next
     70          void main( void )
   \                     main:
     71          {
     72            flag=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   E010               LDI     R17, 0
   \   00000004   9300....           STS     flag, R16
   \   00000008   9310....           STS     (flag + 1), R17
     73            Fx=0;
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   E010               LDI     R17, 0
   \   00000010   E020               LDI     R18, 0
   \   00000012   E030               LDI     R19, 0
   \   00000014   ....               LDI     R30, Fx
   \   00000016   E0F0               LDI     R31, 0
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
   \   0000001C   8322               STD     Z+2, R18
   \   0000001E   8333               STD     Z+3, R19
     74            USART_initialize(BAUD_RATE);
   \   00000020   E00C               LDI     R16, 12
   \   00000022   E010               LDI     R17, 0
   \   00000024   ........           CALL    USART_initialize
     75            __enable_interrupt();
   \   00000028   9478               SEI
     76            index=0;
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   9300....           STS     index, R16
   \   00000032   9310....           STS     (index + 1), R17
     77            
     78            
     79            while(1)
     80            {
     81              if(flag==1)
   \                     ??main_0:
   \   00000036   9100....           LDS     R16, flag
   \   0000003A   9110....           LDS     R17, (flag + 1)
   \   0000003E   3001               CPI     R16, 1
   \   00000040   E020               LDI     R18, 0
   \   00000042   0712               CPC     R17, R18
   \   00000044   F7C1               BRNE    ??main_0
     82              {
     83                TCCR1A = ( 1<<COM1A1 | 1<<WGM11 );
   \   00000046   E802               LDI     R16, 130
   \   00000048   BD0F               OUT     0x2F, R16
     84                TCCR1B = ( 1<<WGM13 | 1<<WGM12 | 1<<CS11) ; // prescaler de 8
   \   0000004A   E10A               LDI     R16, 26
   \   0000004C   BD0E               OUT     0x2E, R16
     85                TIMSK|=(1<<TOIE1);
   \   0000004E   B709               IN      R16, 0x39
   \   00000050   6004               ORI     R16, 0x04
   \   00000052   BF09               OUT     0x39, R16
     86                DDRD|=(1<<PD5);
   \   00000054   9A8D               SBI     0x11, 0x05
     87                PORTD&=(1<<PD5);
   \   00000056   B302               IN      R16, 0x12
   \   00000058   7200               ANDI    R16, 0x20
   \   0000005A   BB02               OUT     0x12, R16
     88                nrCicli=FOsc*1000/Fx/N;
   \   0000005C   EE48               LDI     R20, 232
   \   0000005E   E053               LDI     R21, 3
   \   00000060   E060               LDI     R22, 0
   \   00000062   E070               LDI     R23, 0
   \   00000064   ....               LDI     R30, FOsc
   \   00000066   E0F0               LDI     R31, 0
   \   00000068   8100               LD      R16, Z
   \   0000006A   8111               LDD     R17, Z+1
   \   0000006C   8122               LDD     R18, Z+2
   \   0000006E   8133               LDD     R19, Z+3
   \   00000070   ........           CALL    ?L_EC_MUL_L03
   \   00000074   ....               LDI     R30, Fx
   \   00000076   E0F0               LDI     R31, 0
   \   00000078   8140               LD      R20, Z
   \   0000007A   8151               LDD     R21, Z+1
   \   0000007C   8162               LDD     R22, Z+2
   \   0000007E   8173               LDD     R23, Z+3
   \   00000080   ........           CALL    ?UL_DIVMOD_L03
   \   00000084   9140....           LDS     R20, N
   \   00000088   9150....           LDS     R21, (N + 1)
   \   0000008C   2F65               MOV     R22, R21
   \   0000008E   0F66               LSL     R22
   \   00000090   0B66               SBC     R22, R22
   \   00000092   2F76               MOV     R23, R22
   \   00000094   ........           CALL    ?UL_DIVMOD_L03
   \   00000098   ....               LDI     R30, nrCicli
   \   0000009A   E0F0               LDI     R31, 0
   \   0000009C   8300               ST      Z, R16
   \   0000009E   8311               STD     Z+1, R17
   \   000000A0   8322               STD     Z+2, R18
   \   000000A2   8333               STD     Z+3, R19
     89                DC=fu*nrCicli/100000;
   \   000000A4   9140....           LDS     R20, fu
   \   000000A8   9150....           LDS     R21, (fu + 1)
   \   000000AC   E060               LDI     R22, 0
   \   000000AE   E070               LDI     R23, 0
   \   000000B0   ....               LDI     R30, nrCicli
   \   000000B2   E0F0               LDI     R31, 0
   \   000000B4   8100               LD      R16, Z
   \   000000B6   8111               LDD     R17, Z+1
   \   000000B8   8122               LDD     R18, Z+2
   \   000000BA   8133               LDD     R19, Z+3
   \   000000BC   ........           CALL    ?L_EC_MUL_L03
   \   000000C0   EA40               LDI     R20, 160
   \   000000C2   E856               LDI     R21, 134
   \   000000C4   E061               LDI     R22, 1
   \   000000C6   E070               LDI     R23, 0
   \   000000C8   ........           CALL    ?UL_DIVMOD_L03
   \   000000CC   ....               LDI     R30, DC
   \   000000CE   E0F0               LDI     R31, 0
   \   000000D0   8300               ST      Z, R16
   \   000000D2   8311               STD     Z+1, R17
   \   000000D4   8322               STD     Z+2, R18
   \   000000D6   8333               STD     Z+3, R19
     90                OCR1A=DC;   
   \   000000D8   ....               LDI     R30, DC
   \   000000DA   E0F0               LDI     R31, 0
   \   000000DC   8100               LD      R16, Z
   \   000000DE   8111               LDD     R17, Z+1
   \   000000E0   8122               LDD     R18, Z+2
   \   000000E2   8133               LDD     R19, Z+3
   \   000000E4   BD1B               OUT     0x2B, R17
   \   000000E6   BD0A               OUT     0x2A, R16
     91                ICR1=nrCicli/1000;
   \   000000E8   EE48               LDI     R20, 232
   \   000000EA   E053               LDI     R21, 3
   \   000000EC   E060               LDI     R22, 0
   \   000000EE   E070               LDI     R23, 0
   \   000000F0   ....               LDI     R30, nrCicli
   \   000000F2   E0F0               LDI     R31, 0
   \   000000F4   8100               LD      R16, Z
   \   000000F6   8111               LDD     R17, Z+1
   \   000000F8   8122               LDD     R18, Z+2
   \   000000FA   8133               LDD     R19, Z+3
   \   000000FC   ........           CALL    ?UL_DIVMOD_L03
   \   00000100   BD17               OUT     0x27, R17
   \   00000102   BD06               OUT     0x26, R16
   \   00000104   CF98               RJMP    ??main_0
   \   00000106                      REQUIRE _A_TCCR1A
   \   00000106                      REQUIRE _A_TCCR1B
   \   00000106                      REQUIRE _A_TIMSK
   \   00000106                      REQUIRE _A_DDRD
   \   00000106                      REQUIRE _A_PORTD
   \   00000106                      REQUIRE _A_OCR1A
   \   00000106                      REQUIRE _A_ICR1
     92              }
     93              
     94              
     95            }
     96            
     97            
     98          }

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??interrupt_routine_USART_RXC??INTVEC 44`:
   \   0000002C   ........           JMP     interrupt_routine_USART_RXC

   \                                 In  segment TINY_ID, align 1, keep-with-next
   \                     `?<Initializer for FOsc>`:
   \   00000000   43FE003D           DD 4015102

   \                                 In  segment TINY_ID, align 1, keep-with-next
   \                     `?<Initializer for fu>`:
   \   00000000   0032               DC16 50

   \                                 In  segment TINY_ID, align 1, keep-with-next
   \                     `?<Initializer for N>`:
   \   00000000   0008               DC16 8

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      18      4  interrupt_routine_USART_RXC
       0      4  main
                   0 2 -> USART_initialize


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for FOsc>
       2  ?<Initializer for N>
       2  ?<Initializer for fu>
       4  ??interrupt_routine_USART_RXC??INTVEC 44
       4  DC
       4  FOsc
       4  Fx
       2  N
       1  _A_DDRD
       2  _A_ICR1
       2  _A_OCR1A
       1  _A_PORTD
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TIMSK
       1  _A_UDR
       2  flag
      10  frecv
       2  fu
       2  index
     406  interrupt_routine_USART_RXC
     262  main
       4  nrCicli
      12  -- Other

 
  10 bytes in segment ABSOLUTE
 668 bytes in segment CODE
  12 bytes in segment INITTAB
   4 bytes in segment INTVEC
   8 bytes in segment TINY_I
   8 bytes in segment TINY_ID
  26 bytes in segment TINY_Z
 
 676 bytes of CODE memory (+ 16 bytes shared)
  34 bytes of DATA memory (+ 10 bytes shared)

Errors: none
Warnings: none

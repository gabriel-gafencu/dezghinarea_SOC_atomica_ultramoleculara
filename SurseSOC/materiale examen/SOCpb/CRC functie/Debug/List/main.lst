###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        22/Dec/2014  14:37:06 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\CRC functie\main.c                              #
#    Command line =  "D:\1307B\CRC functie\main.c" --cpu=m16 -ms -o           #
#                    "D:\1307B\CRC functie\Debug\Obj\" -lC "D:\1307B\CRC      #
#                    functie\Debug\List\" -lA "D:\1307B\CRC                   #
#                    functie\Debug\List\" --initializers_in_flash --no_cse    #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\CRC functie\Debug\List\main.lst                 #
#    Object file  =  D:\1307B\CRC functie\Debug\Obj\main.r90                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\CRC functie\main.c
      1          #include "functii.h"
      2          #include "usart.h"
      3          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          unsigned int mycrc16=0;
   \                     mycrc16:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      5          unsigned char str[]="CRC16ADR[";
   \                     str:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for str>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          unsigned int lung=0;
   \                     lung:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      7          unsigned int adresa;
   \                     adresa:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      8          unsigned long long adresaA;
   \                     adresaA:
   \   00000000                      DS8 8

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      9          unsigned long long adresaSF;
   \                     adresaSF:
   \   00000000                      DS8 8

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     10          unsigned long long* aStart;
   \                     aStart:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     11          unsigned long long* aFinal;
   \                     aFinal:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     12          unsigned int *hexCrc;
   \                     hexCrc:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     13          int i;
   \                     i:
   \   00000000                      DS8 2

   \                                 In  segment CODE, align 2, keep-with-next
     14          void main(void)
   \                     main:
     15          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   9728               SBIW    R29:R28, 8
     16            adresa=(unsigned int)min;
   \   00000004   ....               LDI     R16, LOW(min/2)
   \   00000006   ....               LDI     R17, (min/2) >> 8
   \   00000008   9300....           STS     adresa, R16
   \   0000000C   9310....           STS     (adresa + 1), R17
     17            adresaA=adresa<<1;
   \   00000010   9100....           LDS     R16, adresa
   \   00000014   9110....           LDS     R17, (adresa + 1)
   \   00000018   0F00               LSL     R16
   \   0000001A   1F11               ROL     R17
   \   0000001C   E020               LDI     R18, 0
   \   0000001E   E030               LDI     R19, 0
   \   00000020   E040               LDI     R20, 0
   \   00000022   E050               LDI     R21, 0
   \   00000024   E060               LDI     R22, 0
   \   00000026   E070               LDI     R23, 0
   \   00000028   ....               LDI     R30, LOW(adresaA)
   \   0000002A   ....               LDI     R31, (adresaA) >> 8
   \   0000002C   8300               ST      Z, R16
   \   0000002E   8311               STD     Z+1, R17
   \   00000030   8322               STD     Z+2, R18
   \   00000032   8333               STD     Z+3, R19
   \   00000034   8344               STD     Z+4, R20
   \   00000036   8355               STD     Z+5, R21
   \   00000038   8366               STD     Z+6, R22
   \   0000003A   8377               STD     Z+7, R23
     18            lung=lungimeFunctie(adresa);
   \   0000003C   9100....           LDS     R16, adresa
   \   00000040   9110....           LDS     R17, (adresa + 1)
   \   00000044   ........           CALL    lungimeFunctie
   \   00000048   9300....           STS     lung, R16
   \   0000004C   9310....           STS     (lung + 1), R17
     19            adresaSF=adresaA+lung;
   \   00000050   9100....           LDS     R16, lung
   \   00000054   9110....           LDS     R17, (lung + 1)
   \   00000058   E020               LDI     R18, 0
   \   0000005A   E030               LDI     R19, 0
   \   0000005C   E040               LDI     R20, 0
   \   0000005E   E050               LDI     R21, 0
   \   00000060   E060               LDI     R22, 0
   \   00000062   E070               LDI     R23, 0
   \   00000064   8308               ST      Y, R16
   \   00000066   8319               STD     Y+1, R17
   \   00000068   832A               STD     Y+2, R18
   \   0000006A   833B               STD     Y+3, R19
   \   0000006C   834C               STD     Y+4, R20
   \   0000006E   835D               STD     Y+5, R21
   \   00000070   836E               STD     Y+6, R22
   \   00000072   837F               STD     Y+7, R23
   \   00000074   ....               LDI     R30, LOW(adresaA)
   \   00000076   ....               LDI     R31, (adresaA) >> 8
   \   00000078   8100               LD      R16, Z
   \   0000007A   8111               LDD     R17, Z+1
   \   0000007C   8122               LDD     R18, Z+2
   \   0000007E   8133               LDD     R19, Z+3
   \   00000080   8144               LDD     R20, Z+4
   \   00000082   8155               LDD     R21, Z+5
   \   00000084   8166               LDD     R22, Z+6
   \   00000086   8177               LDD     R23, Z+7
   \   00000088   01FE               MOVW    R31:R30, R29:R28
   \   0000008A   ........           CALL    ?LL_ADD_L12
   \   0000008E   ....               LDI     R30, LOW(adresaSF)
   \   00000090   ....               LDI     R31, (adresaSF) >> 8
   \   00000092   8300               ST      Z, R16
   \   00000094   8311               STD     Z+1, R17
   \   00000096   8322               STD     Z+2, R18
   \   00000098   8333               STD     Z+3, R19
   \   0000009A   8344               STD     Z+4, R20
   \   0000009C   8355               STD     Z+5, R21
   \   0000009E   8366               STD     Z+6, R22
   \   000000A0   8377               STD     Z+7, R23
     20            aStart=&adresaA;
   \   000000A2   ....               LDI     R16, LOW(adresaA)
   \   000000A4   ....               LDI     R17, (adresaA) >> 8
   \   000000A6   9300....           STS     aStart, R16
   \   000000AA   9310....           STS     (aStart + 1), R17
     21            aFinal=&adresaSF;
   \   000000AE   ....               LDI     R16, LOW(adresaSF)
   \   000000B0   ....               LDI     R17, (adresaSF) >> 8
   \   000000B2   9300....           STS     aFinal, R16
   \   000000B6   9310....           STS     (aFinal + 1), R17
     22            
     23            
     24            mycrc16=crc16(CRC16_CCITT,0,adresa<<1,lung,MSBF);
   \   000000BA   E001               LDI     R16, 1
   \   000000BC   E010               LDI     R17, 0
   \   000000BE   931A               ST      -Y, R17
   \   000000C0   930A               ST      -Y, R16
   \   000000C2   9160....           LDS     R22, lung
   \   000000C6   9170....           LDS     R23, (lung + 1)
   \   000000CA   9140....           LDS     R20, adresa
   \   000000CE   9150....           LDS     R21, (adresa + 1)
   \   000000D2   0F44               LSL     R20
   \   000000D4   1F55               ROL     R21
   \   000000D6   E020               LDI     R18, 0
   \   000000D8   E030               LDI     R19, 0
   \   000000DA   E201               LDI     R16, 33
   \   000000DC   E110               LDI     R17, 16
   \   000000DE   ........           CALL    crc16
   \   000000E2   9300....           STS     mycrc16, R16
   \   000000E6   9310....           STS     (mycrc16 + 1), R17
     25            hexCrc=&mycrc16;
   \   000000EA   ....               LDI     R16, LOW(mycrc16)
   \   000000EC   ....               LDI     R17, (mycrc16) >> 8
   \   000000EE   9300....           STS     hexCrc, R16
   \   000000F2   9310....           STS     (hexCrc + 1), R17
     26            
     27            USART_initialize(BAUD_RATE);
   \   000000F6   E00C               LDI     R16, 12
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   ........           CALL    USART_initialize
     28            myprint(3,9, str);
   \   000000FE   ....               LDI     R20, LOW(str)
   \   00000100   ....               LDI     R21, (str) >> 8
   \   00000102   E029               LDI     R18, 9
   \   00000104   E030               LDI     R19, 0
   \   00000106   E003               LDI     R16, 3
   \   00000108   E010               LDI     R17, 0
   \   0000010A   ........           CALL    myprint
     29            myprint(1,4,aStart);
   \   0000010E   9140....           LDS     R20, aStart
   \   00000112   9150....           LDS     R21, (aStart + 1)
   \   00000116   E024               LDI     R18, 4
   \   00000118   E030               LDI     R19, 0
   \   0000011A   E001               LDI     R16, 1
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   ........           CALL    myprint
     30            USART_transmit('-');
   \   00000122   E20D               LDI     R16, 45
   \   00000124   ........           CALL    USART_transmit
     31            myprint(1,4,aFinal);
   \   00000128   9140....           LDS     R20, aFinal
   \   0000012C   9150....           LDS     R21, (aFinal + 1)
   \   00000130   E024               LDI     R18, 4
   \   00000132   E030               LDI     R19, 0
   \   00000134   E001               LDI     R16, 1
   \   00000136   E010               LDI     R17, 0
   \   00000138   ........           CALL    myprint
     32            USART_transmit(']');
   \   0000013C   E50D               LDI     R16, 93
   \   0000013E   ........           CALL    USART_transmit
     33            USART_transmit(' ');
   \   00000142   E200               LDI     R16, 32
   \   00000144   ........           CALL    USART_transmit
     34            myprint(1,4,hexCrc);
   \   00000148   9140....           LDS     R20, hexCrc
   \   0000014C   9150....           LDS     R21, (hexCrc + 1)
   \   00000150   E024               LDI     R18, 4
   \   00000152   E030               LDI     R19, 0
   \   00000154   E001               LDI     R16, 1
   \   00000156   E010               LDI     R17, 0
   \   00000158   ........           CALL    myprint
     35            USART_transmit(' ');
   \   0000015C   E200               LDI     R16, 32
   \   0000015E   ........           CALL    USART_transmit
     36            USART_transmit(0x0d);
   \   00000162   E00D               LDI     R16, 13
   \   00000164   ........           CALL    USART_transmit
     37            USART_transmit(0x0a);
   \   00000168   E00A               LDI     R16, 10
   \   0000016A   ........           CALL    USART_transmit
     38            
     39            
     40            
     41            
     42            
     43            
     44            while(1)
   \                     ??main_0:
   \   0000016E   CFFF               RJMP    ??main_0
     45            {
     46              
     47            }
     48            
     49          }

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for str>`:
   \   00000000   524331434136       DC8 "CRC16ADR["
   \              5244005B    

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      11      4  main
                    9 2 -> USART_initialize
                    9 2 -> USART_transmit
                   11 2 -> crc16
                    9 2 -> lungimeFunctie
                    9 2 -> myprint


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Initializer for str>
       2  aFinal
       2  aStart
       2  adresa
       8  adresaA
       8  adresaSF
       2  hexCrc
       2  i
       2  lung
     368  main
       2  mycrc16
      10  str
      12  -- Other

 
 368 bytes in segment CODE
  12 bytes in segment INITTAB
  10 bytes in segment NEAR_I
  10 bytes in segment NEAR_ID
  30 bytes in segment NEAR_Z
 
 378 bytes of CODE memory (+ 12 bytes shared)
  40 bytes of DATA memory

Errors: none
Warnings: none

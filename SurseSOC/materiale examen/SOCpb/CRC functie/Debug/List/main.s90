///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       22/Dec/2014  14:37:06 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\1307B\CRC functie\main.c                             /
//    Command line =  "D:\1307B\CRC functie\main.c" --cpu=m16 -ms -o          /
//                    "D:\1307B\CRC functie\Debug\Obj\" -lC "D:\1307B\CRC     /
//                    functie\Debug\List\" -lA "D:\1307B\CRC                  /
//                    functie\Debug\List\" --initializers_in_flash --no_cse   /
//                    --no_inline --no_code_motion --no_cross_call            /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib    /
//                    -On                                                     /
//    List file    =  D:\1307B\CRC functie\Debug\List\main.s90                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?LL_ADD_L12
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC aFinal
        PUBLIC aStart
        PUBLIC adresa
        PUBLIC adresaA
        PUBLIC adresaSF
        PUBLIC hexCrc
        PUBLIC i
        PUBLIC lung
        PUBLIC main
        FUNCTION main,021a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 11, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC mycrc16
        PUBLIC str
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN USART_initialize
        FUNCTION USART_initialize,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN USART_transmit
        FUNCTION USART_transmit,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN crc16
        FUNCTION crc16,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN lungimeFunctie
        FUNCTION lungimeFunctie,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN min
        FUNCTION min,0602H
        EXTERN myprint
        FUNCTION myprint,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\1307B\CRC functie\main.c
//    1 #include "functii.h"
//    2 #include "usart.h"
//    3 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    4 unsigned int mycrc16=0;
mycrc16:
        DS8 2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//    5 unsigned char str[]="CRC16ADR[";
str:
        DS8 10
        REQUIRE `?<Initializer for str>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    6 unsigned int lung=0;
lung:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    7 unsigned int adresa;
adresa:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    8 unsigned long long adresaA;
adresaA:
        DS8 8

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    9 unsigned long long adresaSF;
adresaSF:
        DS8 8

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   10 unsigned long long* aStart;
aStart:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   11 unsigned long long* aFinal;
aFinal:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   12 unsigned int *hexCrc;
hexCrc:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   13 int i;
i:
        DS8 2

        RSEG CODE:CODE:NOROOT(1)
//   14 void main(void)
main:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function main
//   15 {
        FUNCALL main, lungimeFunctie
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, crc16
        LOCFRAME CSTACK, 11, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_initialize
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, myprint
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, myprint
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, myprint
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, myprint
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        SBIW    R29:R28, 8
          CFI CFA_Y Y+9
//   16   adresa=(unsigned int)min;
        LDI     R16, LOW(min/2)
        LDI     R17, (min/2) >> 8
        STS     adresa, R16
        STS     (adresa + 1), R17
//   17   adresaA=adresa<<1;
        LDS     R16, adresa
        LDS     R17, (adresa + 1)
        LSL     R16
        ROL     R17
        LDI     R18, 0
        LDI     R19, 0
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, LOW(adresaA)
        LDI     R31, (adresaA) >> 8
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        STD     Z+4, R20
        STD     Z+5, R21
        STD     Z+6, R22
        STD     Z+7, R23
//   18   lung=lungimeFunctie(adresa);
        LDS     R16, adresa
        LDS     R17, (adresa + 1)
        CALL    lungimeFunctie
        STS     lung, R16
        STS     (lung + 1), R17
//   19   adresaSF=adresaA+lung;
        LDS     R16, lung
        LDS     R17, (lung + 1)
        LDI     R18, 0
        LDI     R19, 0
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        ST      Y, R16
        STD     Y+1, R17
        STD     Y+2, R18
        STD     Y+3, R19
        STD     Y+4, R20
        STD     Y+5, R21
        STD     Y+6, R22
        STD     Y+7, R23
        LDI     R30, LOW(adresaA)
        LDI     R31, (adresaA) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        MOVW    R31:R30, R29:R28
        CALL    ?LL_ADD_L12
        LDI     R30, LOW(adresaSF)
        LDI     R31, (adresaSF) >> 8
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        STD     Z+4, R20
        STD     Z+5, R21
        STD     Z+6, R22
        STD     Z+7, R23
//   20   aStart=&adresaA;
        LDI     R16, LOW(adresaA)
        LDI     R17, (adresaA) >> 8
        STS     aStart, R16
        STS     (aStart + 1), R17
//   21   aFinal=&adresaSF;
        LDI     R16, LOW(adresaSF)
        LDI     R17, (adresaSF) >> 8
        STS     aFinal, R16
        STS     (aFinal + 1), R17
//   22   
//   23   
//   24   mycrc16=crc16(CRC16_CCITT,0,adresa<<1,lung,MSBF);
        LDI     R16, 1
        LDI     R17, 0
        ST      -Y, R17
          CFI CFA_Y Y+10
        ST      -Y, R16
          CFI CFA_Y Y+11
        LDS     R22, lung
        LDS     R23, (lung + 1)
        LDS     R20, adresa
        LDS     R21, (adresa + 1)
        LSL     R20
        ROL     R21
        LDI     R18, 0
        LDI     R19, 0
        LDI     R16, 33
        LDI     R17, 16
        CALL    crc16
          CFI CFA_Y Y+9
        STS     mycrc16, R16
        STS     (mycrc16 + 1), R17
//   25   hexCrc=&mycrc16;
        LDI     R16, LOW(mycrc16)
        LDI     R17, (mycrc16) >> 8
        STS     hexCrc, R16
        STS     (hexCrc + 1), R17
//   26   
//   27   USART_initialize(BAUD_RATE);
        LDI     R16, 12
        LDI     R17, 0
        CALL    USART_initialize
//   28   myprint(3,9, str);
        LDI     R20, LOW(str)
        LDI     R21, (str) >> 8
        LDI     R18, 9
        LDI     R19, 0
        LDI     R16, 3
        LDI     R17, 0
        CALL    myprint
//   29   myprint(1,4,aStart);
        LDS     R20, aStart
        LDS     R21, (aStart + 1)
        LDI     R18, 4
        LDI     R19, 0
        LDI     R16, 1
        LDI     R17, 0
        CALL    myprint
//   30   USART_transmit('-');
        LDI     R16, 45
        CALL    USART_transmit
//   31   myprint(1,4,aFinal);
        LDS     R20, aFinal
        LDS     R21, (aFinal + 1)
        LDI     R18, 4
        LDI     R19, 0
        LDI     R16, 1
        LDI     R17, 0
        CALL    myprint
//   32   USART_transmit(']');
        LDI     R16, 93
        CALL    USART_transmit
//   33   USART_transmit(' ');
        LDI     R16, 32
        CALL    USART_transmit
//   34   myprint(1,4,hexCrc);
        LDS     R20, hexCrc
        LDS     R21, (hexCrc + 1)
        LDI     R18, 4
        LDI     R19, 0
        LDI     R16, 1
        LDI     R17, 0
        CALL    myprint
//   35   USART_transmit(' ');
        LDI     R16, 32
        CALL    USART_transmit
//   36   USART_transmit(0x0d);
        LDI     R16, 13
        CALL    USART_transmit
//   37   USART_transmit(0x0a);
        LDI     R16, 10
        CALL    USART_transmit
//   38   
//   39   
//   40   
//   41   
//   42   
//   43   
//   44   while(1)
??main_0:
        RJMP    ??main_0
          CFI EndBlock cfiBlock0
//   45   {
//   46     
//   47   }
//   48   
//   49 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for str>`:
        DC8 "CRC16ADR["

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        END
// 
// 368 bytes in segment CODE
//  12 bytes in segment INITTAB
//  10 bytes in segment NEAR_I
//  10 bytes in segment NEAR_ID
//  30 bytes in segment NEAR_Z
// 
// 378 bytes of CODE memory (+ 12 bytes shared)
//  40 bytes of DATA memory
//
//Errors: none
//Warnings: none

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        05/Jan/2015  15:01:35 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Work6 frecv\main.c                              #
#    Command line =  "D:\1307B\Work6 frecv\main.c" --cpu=m16 -ms -o           #
#                    "D:\1307B\Work6 frecv\Debug\Obj\" -lC "D:\1307B\Work6    #
#                    frecv\Debug\List\" -lA "D:\1307B\Work6                   #
#                    frecv\Debug\List\" --initializers_in_flash --no_cse      #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\Work6 frecv\Debug\List\main.lst                 #
#    Object file  =  D:\1307B\Work6 frecv\Debug\Obj\main.r90                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Work6 frecv\main.c
      1          #include<inavr.h>
      2          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      3          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          int cnt=0; //variabila pentru întrerupere
   \                     cnt:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      5          long int FOsc=4006012; //Hz
   \                     FOsc:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for FOsc>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      6          int Fx=5000; //Hz
   \                     Fx:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for Fx>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      7          int N=1;
   \                     N:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for N>`
      8          
      9          //întreruperea de overflow la timer1
     10          #pragma vector=TIMER1_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     11          __interrupt void T1int(void)
   \                     T1int:
     12          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
     13             cnt++;
   \   0000000C   ....               LDI     R30, LOW(cnt)
   \   0000000E   ....               LDI     R31, (cnt) >> 8
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
     14          }
   \   0000001C   BF2F               OUT     0x3F, R18
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   91E9               LD      R30, Y+
   \   00000026   91F9               LD      R31, Y+
   \   00000028   9518               RETI
     15          

   \                                 In  segment CODE, align 2, keep-with-next
     16          void timer1_INIT()
   \                     timer1_INIT:
     17          {
     18          /*
     19          Modul Fast PWM: WGM13:10=1110;
     20          Fãrã prescaler: CS12:10=001;
     21          Compare Output Mode: 10
     22          */
     23          TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS10);
   \   00000000   B50E               IN      R16, 0x2E
   \   00000002   6109               ORI     R16, 0x19
   \   00000004   BD0E               OUT     0x2E, R16
     24          TCCR1A|=(1<<COM1A1)|(1<<WGM11);
   \   00000006   B50F               IN      R16, 0x2F
   \   00000008   6802               ORI     R16, 0x82
   \   0000000A   BD0F               OUT     0x2F, R16
     25          TIMSK|=(1<<TOIE1);
   \   0000000C   B709               IN      R16, 0x39
   \   0000000E   6004               ORI     R16, 0x04
   \   00000010   BF09               OUT     0x39, R16
     26          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_TCCR1B
   \   00000014                      REQUIRE _A_TCCR1A
   \   00000014                      REQUIRE _A_TIMSK
     27          
     28          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     29          long long int duty=15;//duty*10
   \                     duty:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for duty>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     30          int nrCicli=0;
   \                     nrCicli:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     31          int fu=50; //fu*10 initial
   \                     fu:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for fu>`
     32          
     33          

   \                                 In  segment CODE, align 2, keep-with-next
     34          void main()
   \                     main:
     35          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
     36            __enable_interrupt();
   \   00000004   9478               SEI
     37            int sw=0;
   \   00000006   E080               LDI     R24, 0
   \   00000008   E090               LDI     R25, 0
     38            //Alegerea pinului de ie.ire
     39            DDRD|=(1<<PD5);
   \   0000000A   9A8D               SBI     0x11, 0x05
     40            PORTD&=(1<<PD5);
   \   0000000C   B302               IN      R16, 0x12
   \   0000000E   7200               ANDI    R16, 0x20
   \   00000010   BB02               OUT     0x12, R16
     41            //Initializarea timer-ului
     42            timer1_INIT();
   \   00000012   ....               RCALL   timer1_INIT
     43            nrCicli=FOsc/Fx/N; //nrCicli
   \   00000014   9140....           LDS     R20, Fx
   \   00000018   9150....           LDS     R21, (Fx + 1)
   \   0000001C   2F65               MOV     R22, R21
   \   0000001E   0F66               LSL     R22
   \   00000020   0B66               SBC     R22, R22
   \   00000022   2F76               MOV     R23, R22
   \   00000024   ....               LDI     R30, LOW(FOsc)
   \   00000026   ....               LDI     R31, (FOsc) >> 8
   \   00000028   8100               LD      R16, Z
   \   0000002A   8111               LDD     R17, Z+1
   \   0000002C   8122               LDD     R18, Z+2
   \   0000002E   8133               LDD     R19, Z+3
   \   00000030   ........           CALL    ?SL_DIVMOD_L03
   \   00000034   9140....           LDS     R20, N
   \   00000038   9150....           LDS     R21, (N + 1)
   \   0000003C   2F65               MOV     R22, R21
   \   0000003E   0F66               LSL     R22
   \   00000040   0B66               SBC     R22, R22
   \   00000042   2F76               MOV     R23, R22
   \   00000044   ........           CALL    ?SL_DIVMOD_L03
   \   00000048   9300....           STS     nrCicli, R16
   \   0000004C   9310....           STS     (nrCicli + 1), R17
     44            
     45            OCR1A=nrCicli*fu/1000;
   \   00000050   9140....           LDS     R20, fu
   \   00000054   9150....           LDS     R21, (fu + 1)
   \   00000058   9100....           LDS     R16, nrCicli
   \   0000005C   9110....           LDS     R17, (nrCicli + 1)
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   EE48               LDI     R20, 232
   \   00000066   E053               LDI     R21, 3
   \   00000068   ........           CALL    ?SS_DIVMOD_L02
   \   0000006C   BD1B               OUT     0x2B, R17
   \   0000006E   BD0A               OUT     0x2A, R16
     46            ICR1=nrCicli;
   \   00000070   9100....           LDS     R16, nrCicli
   \   00000074   9110....           LDS     R17, (nrCicli + 1)
   \   00000078   BD17               OUT     0x27, R17
   \   0000007A   BD06               OUT     0x26, R16
     47            
     48            
     49           
     50            while(1)
     51            {
     52             
     53              if(cnt==12)
   \                     ??main_0:
   \   0000007C   9100....           LDS     R16, cnt
   \   00000080   9110....           LDS     R17, (cnt + 1)
   \   00000084   300C               CPI     R16, 12
   \   00000086   E020               LDI     R18, 0
   \   00000088   0712               CPC     R17, R18
   \   0000008A   F7C1               BRNE    ??main_0
     54              {
     55               
     56                if(sw==0)
   \   0000008C   2F08               MOV     R16, R24
   \   0000008E   2B09               OR      R16, R25
   \   00000090   F539               BRNE    ??main_1
     57                {
     58                  fu+=duty;
   \   00000092   ....               LDI     R30, LOW(duty)
   \   00000094   ....               LDI     R31, (duty) >> 8
   \   00000096   8100               LD      R16, Z
   \   00000098   8111               LDD     R17, Z+1
   \   0000009A   8122               LDD     R18, Z+2
   \   0000009C   8133               LDD     R19, Z+3
   \   0000009E   8144               LDD     R20, Z+4
   \   000000A0   8155               LDD     R21, Z+5
   \   000000A2   8166               LDD     R22, Z+6
   \   000000A4   8177               LDD     R23, Z+7
   \   000000A6   ....               LDI     R30, LOW(fu)
   \   000000A8   ....               LDI     R31, (fu) >> 8
   \   000000AA   8120               LD      R18, Z
   \   000000AC   8131               LDD     R19, Z+1
   \   000000AE   0F20               ADD     R18, R16
   \   000000B0   1F31               ADC     R19, R17
   \   000000B2   8320               ST      Z, R18
   \   000000B4   8331               STD     Z+1, R19
     59                  OCR1A=fu*nrCicli/1000;
   \   000000B6   9140....           LDS     R20, nrCicli
   \   000000BA   9150....           LDS     R21, (nrCicli + 1)
   \   000000BE   9100....           LDS     R16, fu
   \   000000C2   9110....           LDS     R17, (fu + 1)
   \   000000C6   ........           CALL    ?S_EC_MUL_L02
   \   000000CA   EE48               LDI     R20, 232
   \   000000CC   E053               LDI     R21, 3
   \   000000CE   ........           CALL    ?SS_DIVMOD_L02
   \   000000D2   BD1B               OUT     0x2B, R17
   \   000000D4   BD0A               OUT     0x2A, R16
     60                  if(OCR1A>=95*nrCicli/100);
   \   000000D6   B50A               IN      R16, 0x2A
   \   000000D8   B51B               IN      R17, 0x2B
     61                     sw=1;
   \   000000DA   E081               LDI     R24, 1
   \   000000DC   E090               LDI     R25, 0
   \   000000DE   C035               RJMP    ??main_2
     62                }
     63                else
     64                {
     65                  fu-=duty;
   \                     ??main_1:
   \   000000E0   ....               LDI     R30, LOW(duty)
   \   000000E2   ....               LDI     R31, (duty) >> 8
   \   000000E4   8100               LD      R16, Z
   \   000000E6   8111               LDD     R17, Z+1
   \   000000E8   8122               LDD     R18, Z+2
   \   000000EA   8133               LDD     R19, Z+3
   \   000000EC   8144               LDD     R20, Z+4
   \   000000EE   8155               LDD     R21, Z+5
   \   000000F0   8166               LDD     R22, Z+6
   \   000000F2   8177               LDD     R23, Z+7
   \   000000F4   ....               LDI     R30, LOW(fu)
   \   000000F6   ....               LDI     R31, (fu) >> 8
   \   000000F8   8120               LD      R18, Z
   \   000000FA   8131               LDD     R19, Z+1
   \   000000FC   1B20               SUB     R18, R16
   \   000000FE   0B31               SBC     R19, R17
   \   00000100   8320               ST      Z, R18
   \   00000102   8331               STD     Z+1, R19
     66                  OCR1A=fu*nrCicli/1000;
   \   00000104   9140....           LDS     R20, nrCicli
   \   00000108   9150....           LDS     R21, (nrCicli + 1)
   \   0000010C   9100....           LDS     R16, fu
   \   00000110   9110....           LDS     R17, (fu + 1)
   \   00000114   ........           CALL    ?S_EC_MUL_L02
   \   00000118   EE48               LDI     R20, 232
   \   0000011A   E053               LDI     R21, 3
   \   0000011C   ........           CALL    ?SS_DIVMOD_L02
   \   00000120   BD1B               OUT     0x2B, R17
   \   00000122   BD0A               OUT     0x2A, R16
     67                  if(OCR1A<5*nrCicli/100)
   \   00000124   B5AA               IN      R26, 0x2A
   \   00000126   B5BB               IN      R27, 0x2B
   \   00000128   E005               LDI     R16, 5
   \   0000012A   E010               LDI     R17, 0
   \   0000012C   9140....           LDS     R20, nrCicli
   \   00000130   9150....           LDS     R21, (nrCicli + 1)
   \   00000134   ........           CALL    ?S_EC_MUL_L02
   \   00000138   E644               LDI     R20, 100
   \   0000013A   E050               LDI     R21, 0
   \   0000013C   ........           CALL    ?SS_DIVMOD_L02
   \   00000140   17A0               CP      R26, R16
   \   00000142   07B1               CPC     R27, R17
   \   00000144   F410               BRCC    ??main_2
     68                     sw=0;
   \   00000146   E080               LDI     R24, 0
   \   00000148   E090               LDI     R25, 0
     69                }
     70              cnt=0;   
   \                     ??main_2:
   \   0000014A   E000               LDI     R16, 0
   \   0000014C   E010               LDI     R17, 0
   \   0000014E   9300....           STS     cnt, R16
   \   00000152   9310....           STS     (cnt + 1), R17
   \   00000156   CF92               RJMP    ??main_0
   \   00000158                      REQUIRE _A_DDRD
   \   00000158                      REQUIRE _A_PORTD
   \   00000158                      REQUIRE _A_OCR1A
   \   00000158                      REQUIRE _A_ICR1
     71              }
     72          
     73            }
     74            
     75            
     76          }

   \                                 In  segment INTVEC, offset 0x20, root
   \                     `??T1int??INTVEC 32`:
   \   00000020   ........           JMP     T1int

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for FOsc>`:
   \   00000000   207C003D           DD 4006012

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Fx>`:
   \   00000000   1388               DC16 5000

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for N>`:
   \   00000000   0001               DC16 1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for duty>`:
   \   00000000   000F00000000       DD 15, 0
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for fu>`:
   \   00000000   0032               DC16 50
     77          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       5      2  T1int
       4      4  main
                   4 2 -> timer1_INIT
       0      2  timer1_INIT


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for FOsc>
       2  ?<Initializer for Fx>
       2  ?<Initializer for N>
       8  ?<Initializer for duty>
       2  ?<Initializer for fu>
       4  ??T1int??INTVEC 32
       4  FOsc
       2  Fx
       2  N
      42  T1int
       1  _A_DDRD
       2  _A_ICR1
       2  _A_OCR1A
       1  _A_PORTD
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TIMSK
       2  cnt
       8  duty
       2  fu
     344  main
       2  nrCicli
      20  timer1_INIT
      12  -- Other

 
   9 bytes in segment ABSOLUTE
 406 bytes in segment CODE
  12 bytes in segment INITTAB
   4 bytes in segment INTVEC
  18 bytes in segment NEAR_I
  18 bytes in segment NEAR_ID
   4 bytes in segment NEAR_Z
 
 424 bytes of CODE memory (+ 16 bytes shared)
  22 bytes of DATA memory (+  9 bytes shared)

Errors: none
Warnings: none

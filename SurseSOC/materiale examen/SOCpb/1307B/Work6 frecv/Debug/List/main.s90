///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       05/Jan/2015  15:01:35 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\1307B\Work6 frecv\main.c                             /
//    Command line =  "D:\1307B\Work6 frecv\main.c" --cpu=m16 -ms -o          /
//                    "D:\1307B\Work6 frecv\Debug\Obj\" -lC "D:\1307B\Work6   /
//                    frecv\Debug\List\" -lA "D:\1307B\Work6                  /
//                    frecv\Debug\List\" --initializers_in_flash --no_cse     /
//                    --no_inline --no_code_motion --no_cross_call            /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib    /
//                    -On                                                     /
//    List file    =  D:\1307B\Work6 frecv\Debug\List\main.s90                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?PROLOGUE4_L09
        EXTERN ?SL_DIVMOD_L03
        EXTERN ?SS_DIVMOD_L02
        EXTERN ?S_EC_MUL_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??T1int??INTVEC 32`
        PUBLIC FOsc
        PUBLIC Fx
        PUBLIC N
        PUBLIC T1int
        FUNCTION T1int,0233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_DDRD
        PUBWEAK _A_ICR1
        PUBWEAK _A_OCR1A
        PUBWEAK _A_PORTD
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TIMSK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC cnt
        PUBLIC duty
        PUBLIC fu
        PUBLIC main
        FUNCTION main,021a01H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC nrCicli
        PUBLIC timer1_INIT
        FUNCTION timer1_INIT,0201H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
T1int               SYMBOL "T1int"
`??T1int??INTVEC 32` SYMBOL "??INTVEC 32", T1int

// D:\1307B\Work6 frecv\main.c
//    1 #include<inavr.h>
//    2 #include<iom16.h>

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04fH
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04aH
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,046H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,032H
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1
//    3 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    4 int cnt=0; //variabila pentru întrerupere
cnt:
        DS8 2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//    5 long int FOsc=4006012; //Hz
FOsc:
        DS8 4
        REQUIRE `?<Initializer for FOsc>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//    6 int Fx=5000; //Hz
Fx:
        DS8 2
        REQUIRE `?<Initializer for Fx>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//    7 int N=1;
N:
        DS8 2
        REQUIRE `?<Initializer for N>`
//    8 
//    9 //întreruperea de overflow la timer1
//   10 #pragma vector=TIMER1_OVF_vect

        RSEG CODE:CODE:NOROOT(1)
//   11 __interrupt void T1int(void)
T1int:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function T1int
//   12 {
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        IN      R18, 0x3F
//   13    cnt++;
        LDI     R30, LOW(cnt)
        LDI     R31, (cnt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
//   14 }
        OUT     0x3F, R18
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+4
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+3
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+2
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+1
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
//   15 

        RSEG CODE:CODE:NOROOT(1)
//   16 void timer1_INIT()
timer1_INIT:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function timer1_INIT
//   17 {
//   18 /*
//   19 Modul Fast PWM: WGM13:10=1110;
//   20 Fãrã prescaler: CS12:10=001;
//   21 Compare Output Mode: 10
//   22 */
//   23 TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS10);
        IN      R16, 0x2E
        ORI     R16, 0x19
        OUT     0x2E, R16
//   24 TCCR1A|=(1<<COM1A1)|(1<<WGM11);
        IN      R16, 0x2F
        ORI     R16, 0x82
        OUT     0x2F, R16
//   25 TIMSK|=(1<<TOIE1);
        IN      R16, 0x39
        ORI     R16, 0x04
        OUT     0x39, R16
//   26 }
        RET
          CFI EndBlock cfiBlock1
        REQUIRE _A_TCCR1B
        REQUIRE _A_TCCR1A
        REQUIRE _A_TIMSK
//   27 
//   28 

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//   29 long long int duty=15;//duty*10
duty:
        DS8 8
        REQUIRE `?<Initializer for duty>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   30 int nrCicli=0;
nrCicli:
        DS8 2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//   31 int fu=50; //fu*10 initial
fu:
        DS8 2
        REQUIRE `?<Initializer for fu>`
//   32 
//   33 

        RSEG CODE:CODE:NOROOT(1)
//   34 void main()
main:
          CFI Block cfiBlock2 Using cfiCommon1
          CFI Function main
//   35 {
        FUNCALL main, timer1_INIT
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -1)
          CFI R26 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -3)
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
//   36   __enable_interrupt();
        SEI
//   37   int sw=0;
        LDI     R24, 0
        LDI     R25, 0
//   38   //Alegerea pinului de ie.ire
//   39   DDRD|=(1<<PD5);
        SBI     0x11, 0x05
//   40   PORTD&=(1<<PD5);
        IN      R16, 0x12
        ANDI    R16, 0x20
        OUT     0x12, R16
//   41   //Initializarea timer-ului
//   42   timer1_INIT();
        RCALL   timer1_INIT
//   43   nrCicli=FOsc/Fx/N; //nrCicli
        LDS     R20, Fx
        LDS     R21, (Fx + 1)
        MOV     R22, R21
        LSL     R22
        SBC     R22, R22
        MOV     R23, R22
        LDI     R30, LOW(FOsc)
        LDI     R31, (FOsc) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?SL_DIVMOD_L03
        LDS     R20, N
        LDS     R21, (N + 1)
        MOV     R22, R21
        LSL     R22
        SBC     R22, R22
        MOV     R23, R22
        CALL    ?SL_DIVMOD_L03
        STS     nrCicli, R16
        STS     (nrCicli + 1), R17
//   44   
//   45   OCR1A=nrCicli*fu/1000;
        LDS     R20, fu
        LDS     R21, (fu + 1)
        LDS     R16, nrCicli
        LDS     R17, (nrCicli + 1)
        CALL    ?S_EC_MUL_L02
        LDI     R20, 232
        LDI     R21, 3
        CALL    ?SS_DIVMOD_L02
        OUT     0x2B, R17
        OUT     0x2A, R16
//   46   ICR1=nrCicli;
        LDS     R16, nrCicli
        LDS     R17, (nrCicli + 1)
        OUT     0x27, R17
        OUT     0x26, R16
//   47   
//   48   
//   49  
//   50   while(1)
//   51   {
//   52    
//   53     if(cnt==12)
??main_0:
        LDS     R16, cnt
        LDS     R17, (cnt + 1)
        CPI     R16, 12
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??main_0
//   54     {
//   55      
//   56       if(sw==0)
        MOV     R16, R24
        OR      R16, R25
        BRNE    ??main_1
//   57       {
//   58         fu+=duty;
        LDI     R30, LOW(duty)
        LDI     R31, (duty) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        LDI     R30, LOW(fu)
        LDI     R31, (fu) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        ADD     R18, R16
        ADC     R19, R17
        ST      Z, R18
        STD     Z+1, R19
//   59         OCR1A=fu*nrCicli/1000;
        LDS     R20, nrCicli
        LDS     R21, (nrCicli + 1)
        LDS     R16, fu
        LDS     R17, (fu + 1)
        CALL    ?S_EC_MUL_L02
        LDI     R20, 232
        LDI     R21, 3
        CALL    ?SS_DIVMOD_L02
        OUT     0x2B, R17
        OUT     0x2A, R16
//   60         if(OCR1A>=95*nrCicli/100);
        IN      R16, 0x2A
        IN      R17, 0x2B
//   61            sw=1;
        LDI     R24, 1
        LDI     R25, 0
        RJMP    ??main_2
//   62       }
//   63       else
//   64       {
//   65         fu-=duty;
??main_1:
        LDI     R30, LOW(duty)
        LDI     R31, (duty) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        LDI     R30, LOW(fu)
        LDI     R31, (fu) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        SUB     R18, R16
        SBC     R19, R17
        ST      Z, R18
        STD     Z+1, R19
//   66         OCR1A=fu*nrCicli/1000;
        LDS     R20, nrCicli
        LDS     R21, (nrCicli + 1)
        LDS     R16, fu
        LDS     R17, (fu + 1)
        CALL    ?S_EC_MUL_L02
        LDI     R20, 232
        LDI     R21, 3
        CALL    ?SS_DIVMOD_L02
        OUT     0x2B, R17
        OUT     0x2A, R16
//   67         if(OCR1A<5*nrCicli/100)
        IN      R26, 0x2A
        IN      R27, 0x2B
        LDI     R16, 5
        LDI     R17, 0
        LDS     R20, nrCicli
        LDS     R21, (nrCicli + 1)
        CALL    ?S_EC_MUL_L02
        LDI     R20, 100
        LDI     R21, 0
        CALL    ?SS_DIVMOD_L02
        CP      R26, R16
        CPC     R27, R17
        BRCC    ??main_2
//   68            sw=0;
        LDI     R24, 0
        LDI     R25, 0
//   69       }
//   70     cnt=0;   
??main_2:
        LDI     R16, 0
        LDI     R17, 0
        STS     cnt, R16
        STS     (cnt + 1), R17
        RJMP    ??main_0
          CFI EndBlock cfiBlock2
        REQUIRE _A_DDRD
        REQUIRE _A_PORTD
        REQUIRE _A_OCR1A
        REQUIRE _A_ICR1
//   71     }
//   72 
//   73   }
//   74   
//   75   
//   76 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 32
`??T1int??INTVEC 32`:
        JMP     T1int

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for FOsc>`:
        DD 4006012

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for Fx>`:
        DC16 5000

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for N>`:
        DC16 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for duty>`:
        DD 15, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for fu>`:
        DC16 50

        END
//   77 
// 
//   9 bytes in segment ABSOLUTE
// 406 bytes in segment CODE
//  12 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//  18 bytes in segment NEAR_I
//  18 bytes in segment NEAR_ID
//   4 bytes in segment NEAR_Z
// 
// 424 bytes of CODE memory (+ 16 bytes shared)
//  22 bytes of DATA memory (+  9 bytes shared)
//
//Errors: none
//Warnings: none

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        13/Dec/2014  13:48:36 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Work4\main.c                                    #
#    Command line =  D:\1307B\Work4\main.c --cpu=m16 -ms -o                   #
#                    D:\1307B\Work4\Debug\Obj\ -lC                            #
#                    D:\1307B\Work4\Debug\List\ -lA                           #
#                    D:\1307B\Work4\Debug\List\ --initializers_in_flash       #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\Work4\Debug\List\main.lst                       #
#    Object file  =  D:\1307B\Work4\Debug\Obj\main.r90                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Work4\main.c
      1          #include<inavr.h>
      2          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      3          #include "usart.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          int cnt=0; //variabila pentru întrerupere
   \                     cnt:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      5          double aux_per;  // va fi 2 %
   \                     aux_per:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          double durata_pas;
   \                     durata_pas:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      7          double aux2=0.05;
   \                     aux2:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for aux2>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      8          char aux[20];
   \                     aux:
   \   00000000                      DS8 20
      9          
     10          //întreruperea de overflow la timer1
     11          #pragma vector=TIMER1_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     12          __interrupt void T1int(void)
   \                     T1int:
     13          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
     14            cnt++;
   \   0000000C   ....               LDI     R30, LOW(cnt)
   \   0000000E   ....               LDI     R31, (cnt) >> 8
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
     15          }
   \   0000001C   BF2F               OUT     0x3F, R18
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   91E9               LD      R30, Y+
   \   00000026   91F9               LD      R31, Y+
   \   00000028   9518               RETI
     16          //configurarea timer 1

   \                                 In  segment CODE, align 2, keep-with-next
     17          void timer1_INIT()
   \                     timer1_INIT:
     18          {
     19            /*
     20            Modul Fast PWM: WGM13:10=1110;
     21            Fãrã prescaler: CS12:10=001;
     22            Compare Output Mode: 10
     23            */
     24            TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS10);
   \   00000000   B50E               IN      R16, 0x2E
   \   00000002   6109               ORI     R16, 0x19
   \   00000004   BD0E               OUT     0x2E, R16
     25            TCCR1A|=(1<<COM1A1)|(1<<WGM11);
   \   00000006   B50F               IN      R16, 0x2F
   \   00000008   6802               ORI     R16, 0x82
   \   0000000A   BD0F               OUT     0x2F, R16
     26            TIMSK|=(1<<TOIE1);
   \   0000000C   B709               IN      R16, 0x39
   \   0000000E   6004               ORI     R16, 0x04
   \   00000010   BF09               OUT     0x39, R16
     27          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_TCCR1B
   \   00000014                      REQUIRE _A_TCCR1A
   \   00000014                      REQUIRE _A_TIMSK

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     28           int aux_iana;   // in aux_iana vom avea factorul de umplere
   \                     aux_iana:
   \   00000000                      DS8 2

   \                                 In  segment CODE, align 2, keep-with-next
     29          void main()
   \                     main:
     30          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
     31            USART_initialize(BAUD_RATE);
   \   00000004   E00C               LDI     R16, 12
   \   00000006   E010               LDI     R17, 0
   \   00000008   ........           CALL    USART_initialize
     32            
     33            //Alegerea pinului de ie.ire
     34            DDRD|=(1<<PD5);
   \   0000000C   9A8D               SBI     0x11, 0x05
     35            PORTD&=(1<<PD5);
   \   0000000E   B302               IN      R16, 0x12
   \   00000010   7200               ANDI    R16, 0x20
   \   00000012   BB02               OUT     0x12, R16
     36            //Initializarea timer-ului
     37            timer1_INIT();
   \   00000014   ....               RCALL   timer1_INIT
     38            //Valoarea care se încarca în registru în functie de frecventa necesara
     39           // ICR1=4000;
     40            //Factor de umplere de 50%
     41            //OCR1A=ICR1>>1;
     42            
     43            double frecv=5;  // kHz
   \   00000016   24CC               CLR     R12
   \   00000018   24DD               CLR     R13
   \   0000001A   EA00               LDI     R16, 160
   \   0000001C   2EE0               MOV     R14, R16
   \   0000001E   E400               LDI     R16, 64
   \   00000020   2EF0               MOV     R15, R16
     44            double perioada=1/frecv; // ms
   \   00000022   01A6               MOVW    R21:R20, R13:R12
   \   00000024   01B7               MOVW    R23:R22, R15:R14
   \   00000026   E000               LDI     R16, 0
   \   00000028   E010               LDI     R17, 0
   \   0000002A   E820               LDI     R18, 128
   \   0000002C   E33F               LDI     R19, 63
   \   0000002E   ........           CALL    ?F_DIV_L04
   \   00000032   01C8               MOVW    R25:R24, R17:R16
   \   00000034   01D9               MOVW    R27:R26, R19:R18
     45            ICR1 = perioada/0.00025;  
                        ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00000036   E64F               LDI     R20, 111
   \   00000038   E152               LDI     R21, 18
   \   0000003A   E863               LDI     R22, 131
   \   0000003C   E379               LDI     R23, 57
   \   0000003E   018C               MOVW    R17:R16, R25:R24
   \   00000040   019D               MOVW    R19:R18, R27:R26
   \   00000042   ........           CALL    ?F_DIV_L04
   \   00000046   ........           CALL    ?F2SL_L04
   \   0000004A   BD17               OUT     0x27, R17
   \   0000004C   BD06               OUT     0x26, R16
     46            OCR1A = aux2*ICR1; //factor de umplere de 5% pt hi
                         ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   0000004E   B506               IN      R16, 0x26
   \   00000050   B517               IN      R17, 0x27
   \   00000052   E020               LDI     R18, 0
   \   00000054   E030               LDI     R19, 0
   \   00000056   ........           CALL    ?UL2F_L04
   \   0000005A   ....               LDI     R30, LOW(aux2)
   \   0000005C   ....               LDI     R31, (aux2) >> 8
   \   0000005E   8140               LD      R20, Z
   \   00000060   8151               LDD     R21, Z+1
   \   00000062   8162               LDD     R22, Z+2
   \   00000064   8173               LDD     R23, Z+3
   \   00000066   ........           CALL    ?F_MUL_L04
   \   0000006A   ........           CALL    ?F2SL_L04
   \   0000006E   BD1B               OUT     0x2B, R17
   \   00000070   BD0A               OUT     0x2A, R16
     47            
     48            // Calculam aux_per de 2% din perioada (ICR1, nu se modifica ! )
     49            
     50            aux_per = 0.02*ICR1;
   \   00000072   B506               IN      R16, 0x26
   \   00000074   B517               IN      R17, 0x27
   \   00000076   E020               LDI     R18, 0
   \   00000078   E030               LDI     R19, 0
   \   0000007A   ........           CALL    ?UL2F_L04
   \   0000007E   E04A               LDI     R20, 10
   \   00000080   ED57               LDI     R21, 215
   \   00000082   EA63               LDI     R22, 163
   \   00000084   E37C               LDI     R23, 60
   \   00000086   ........           CALL    ?F_MUL_L04
   \   0000008A   ....               LDI     R30, LOW(aux_per)
   \   0000008C   ....               LDI     R31, (aux_per) >> 8
   \   0000008E   8300               ST      Z, R16
   \   00000090   8311               STD     Z+1, R17
   \   00000092   8322               STD     Z+2, R18
   \   00000094   8333               STD     Z+3, R19
     51            
     52           
     53            
     54            // (95-5)/2 = 45 pasi
     55            
     56            durata_pas = 500/(double)45/perioada;   // in ms; 11/0.2=55
   \   00000096   01AC               MOVW    R21:R20, R25:R24
   \   00000098   01BD               MOVW    R23:R22, R27:R26
   \   0000009A   E10C               LDI     R16, 28
   \   0000009C   EC17               LDI     R17, 199
   \   0000009E   E321               LDI     R18, 49
   \   000000A0   E431               LDI     R19, 65
   \   000000A2   ........           CALL    ?F_DIV_L04
   \   000000A6   ....               LDI     R30, LOW(durata_pas)
   \   000000A8   ....               LDI     R31, (durata_pas) >> 8
   \   000000AA   8300               ST      Z, R16
   \   000000AC   8311               STD     Z+1, R17
   \   000000AE   8322               STD     Z+2, R18
   \   000000B0   8333               STD     Z+3, R19
     57            
     58            //durata_pas=30000;
     59            
     60            int flag=0;
   \   000000B2   2488               CLR     R8
   \   000000B4   2499               CLR     R9
     61            //pornirea întreruperii
     62            __enable_interrupt();
   \   000000B6   9478               SEI
     63             
     64           
     65             
     66            
     67            while(1)
     68            {
     69              if(cnt == (int)durata_pas)
   \                     ??main_0:
   \   000000B8   9160....           LDS     R22, cnt
   \   000000BC   9170....           LDS     R23, (cnt + 1)
   \   000000C0   ....               LDI     R30, LOW(durata_pas)
   \   000000C2   ....               LDI     R31, (durata_pas) >> 8
   \   000000C4   8100               LD      R16, Z
   \   000000C6   8111               LDD     R17, Z+1
   \   000000C8   8122               LDD     R18, Z+2
   \   000000CA   8133               LDD     R19, Z+3
   \   000000CC   ........           CALL    ?F2SL_L04
   \   000000D0   1760               CP      R22, R16
   \   000000D2   0771               CPC     R23, R17
   \   000000D4   F789               BRNE    ??main_0
     70              {
     71                cnt = 0;
   \   000000D6   E000               LDI     R16, 0
   \   000000D8   E010               LDI     R17, 0
   \   000000DA   9300....           STS     cnt, R16
   \   000000DE   9310....           STS     (cnt + 1), R17
     72                //USART_transmit(0x0d);     // CR
     73               // USART_transmit(0x0a);     // LF -> cele 2 = '\n'
     74                USART_transmit('F');
   \   000000E2   E406               LDI     R16, 70
   \   000000E4   ........           CALL    USART_transmit
     75                USART_transmit('U');
   \   000000E8   E505               LDI     R16, 85
   \   000000EA   ........           CALL    USART_transmit
     76                USART_transmit('=');
   \   000000EE   E30D               LDI     R16, 61
   \   000000F0   ........           CALL    USART_transmit
     77                aux_iana = aux2*100;
                                ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   000000F4   E040               LDI     R20, 0
   \   000000F6   E050               LDI     R21, 0
   \   000000F8   EC68               LDI     R22, 200
   \   000000FA   E472               LDI     R23, 66
   \   000000FC   ....               LDI     R30, LOW(aux2)
   \   000000FE   ....               LDI     R31, (aux2) >> 8
   \   00000100   8100               LD      R16, Z
   \   00000102   8111               LDD     R17, Z+1
   \   00000104   8122               LDD     R18, Z+2
   \   00000106   8133               LDD     R19, Z+3
   \   00000108   ........           CALL    ?F_MUL_L04
   \   0000010C   ........           CALL    ?F2SL_L04
   \   00000110   9300....           STS     aux_iana, R16
   \   00000114   9310....           STS     (aux_iana + 1), R17
     78                myprint (0, 2, &aux_iana);
   \   00000118   ....               LDI     R20, LOW(aux_iana)
   \   0000011A   ....               LDI     R21, (aux_iana) >> 8
   \   0000011C   E022               LDI     R18, 2
   \   0000011E   E030               LDI     R19, 0
   \   00000120   E000               LDI     R16, 0
   \   00000122   E010               LDI     R17, 0
   \   00000124   ........           CALL    myprint
     79                USART_transmit('%');
   \   00000128   E205               LDI     R16, 37
   \   0000012A   ........           CALL    USART_transmit
     80                if(flag == 0)
   \   0000012E   2D08               MOV     R16, R8
   \   00000130   2909               OR      R16, R9
   \   00000132   F009               BREQ    $+2+2
   \   00000134   C048               RJMP    ??main_1
     81                {
     82                  aux2 += 0.02;
   \   00000136   E04A               LDI     R20, 10
   \   00000138   ED57               LDI     R21, 215
   \   0000013A   EA63               LDI     R22, 163
   \   0000013C   E37C               LDI     R23, 60
   \   0000013E   ....               LDI     R30, LOW(aux2)
   \   00000140   ....               LDI     R31, (aux2) >> 8
   \   00000142   8100               LD      R16, Z
   \   00000144   8111               LDD     R17, Z+1
   \   00000146   8122               LDD     R18, Z+2
   \   00000148   8133               LDD     R19, Z+3
   \   0000014A   ........           CALL    ?F_ADD_L04
   \   0000014E   ....               LDI     R30, LOW(aux2)
   \   00000150   ....               LDI     R31, (aux2) >> 8
   \   00000152   8300               ST      Z, R16
   \   00000154   8311               STD     Z+1, R17
   \   00000156   8322               STD     Z+2, R18
   \   00000158   8333               STD     Z+3, R19
     83                  OCR1A = aux2*ICR1;
                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   0000015A   B506               IN      R16, 0x26
   \   0000015C   B517               IN      R17, 0x27
   \   0000015E   E020               LDI     R18, 0
   \   00000160   E030               LDI     R19, 0
   \   00000162   ........           CALL    ?UL2F_L04
   \   00000166   ....               LDI     R30, LOW(aux2)
   \   00000168   ....               LDI     R31, (aux2) >> 8
   \   0000016A   8140               LD      R20, Z
   \   0000016C   8151               LDD     R21, Z+1
   \   0000016E   8162               LDD     R22, Z+2
   \   00000170   8173               LDD     R23, Z+3
   \   00000172   ........           CALL    ?F_MUL_L04
   \   00000176   ........           CALL    ?F2SL_L04
   \   0000017A   BD1B               OUT     0x2B, R17
   \   0000017C   BD0A               OUT     0x2A, R16
     84                  if(OCR1A >= 0.95 * ICR1)
   \   0000017E   B50A               IN      R16, 0x2A
   \   00000180   B51B               IN      R17, 0x2B
   \   00000182   E020               LDI     R18, 0
   \   00000184   E030               LDI     R19, 0
   \   00000186   ........           CALL    ?UL2F_L04
   \   0000018A   0128               MOVW    R5:R4, R17:R16
   \   0000018C   0139               MOVW    R7:R6, R19:R18
   \   0000018E   B506               IN      R16, 0x26
   \   00000190   B517               IN      R17, 0x27
   \   00000192   E020               LDI     R18, 0
   \   00000194   E030               LDI     R19, 0
   \   00000196   ........           CALL    ?UL2F_L04
   \   0000019A   0108               MOVW    R1:R0, R17:R16
   \   0000019C   0119               MOVW    R3:R2, R19:R18
   \   0000019E   E343               LDI     R20, 51
   \   000001A0   E353               LDI     R21, 51
   \   000001A2   E763               LDI     R22, 115
   \   000001A4   E37F               LDI     R23, 63
   \   000001A6   0180               MOVW    R17:R16, R1:R0
   \   000001A8   0191               MOVW    R19:R18, R3:R2
   \   000001AA   ........           CALL    ?F_MUL_L04
   \   000001AE   01A8               MOVW    R21:R20, R17:R16
   \   000001B0   01B9               MOVW    R23:R22, R19:R18
   \   000001B2   0182               MOVW    R17:R16, R5:R4
   \   000001B4   0193               MOVW    R19:R18, R7:R6
   \   000001B6   ........           CALL    ?F_CMP_GE_L04
   \   000001BA   F008               BRCS    $+2+2
   \   000001BC   CF7D               RJMP    ??main_0
     85                    flag=1;
   \   000001BE   2499               CLR     R9
   \   000001C0   2488               CLR     R8
   \   000001C2   9483               INC     R8
   \   000001C4   CF79               RJMP    ??main_0
     86                  
     87                }
     88                else
     89                {
     90                    aux2 -= 0.02;
   \                     ??main_1:
   \   000001C6   E04A               LDI     R20, 10
   \   000001C8   ED57               LDI     R21, 215
   \   000001CA   EA63               LDI     R22, 163
   \   000001CC   EB7C               LDI     R23, 188
   \   000001CE   ....               LDI     R30, LOW(aux2)
   \   000001D0   ....               LDI     R31, (aux2) >> 8
   \   000001D2   8100               LD      R16, Z
   \   000001D4   8111               LDD     R17, Z+1
   \   000001D6   8122               LDD     R18, Z+2
   \   000001D8   8133               LDD     R19, Z+3
   \   000001DA   ........           CALL    ?F_ADD_L04
   \   000001DE   ....               LDI     R30, LOW(aux2)
   \   000001E0   ....               LDI     R31, (aux2) >> 8
   \   000001E2   8300               ST      Z, R16
   \   000001E4   8311               STD     Z+1, R17
   \   000001E6   8322               STD     Z+2, R18
   \   000001E8   8333               STD     Z+3, R19
     91                    OCR1A = aux2*ICR1;
                                 ^
Warning[Pa093]: implicit conversion from floating point to integer

          if(OCR1A >= 0.95 * ICR1)
          ^
"D:\1307B\Work4\main.c",84  Warning[Pa082]: undefined behavior: the order of
          volatile accesses is undefined in this statement
   \   000001EA   B506               IN      R16, 0x26
   \   000001EC   B517               IN      R17, 0x27
   \   000001EE   E020               LDI     R18, 0
   \   000001F0   E030               LDI     R19, 0
   \   000001F2   ........           CALL    ?UL2F_L04
   \   000001F6   ....               LDI     R30, LOW(aux2)
   \   000001F8   ....               LDI     R31, (aux2) >> 8
   \   000001FA   8140               LD      R20, Z
   \   000001FC   8151               LDD     R21, Z+1
   \   000001FE   8162               LDD     R22, Z+2
   \   00000200   8173               LDD     R23, Z+3
   \   00000202   ........           CALL    ?F_MUL_L04
   \   00000206   ........           CALL    ?F2SL_L04
   \   0000020A   BD1B               OUT     0x2B, R17
   \   0000020C   BD0A               OUT     0x2A, R16
     92                    if(OCR1A <= 0.05 * ICR1)
                           ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   0000020E   B506               IN      R16, 0x26
   \   00000210   B517               IN      R17, 0x27
   \   00000212   E020               LDI     R18, 0
   \   00000214   E030               LDI     R19, 0
   \   00000216   ........           CALL    ?UL2F_L04
   \   0000021A   0108               MOVW    R1:R0, R17:R16
   \   0000021C   0119               MOVW    R3:R2, R19:R18
   \   0000021E   EC4D               LDI     R20, 205
   \   00000220   EC5C               LDI     R21, 204
   \   00000222   E46C               LDI     R22, 76
   \   00000224   E37D               LDI     R23, 61
   \   00000226   0180               MOVW    R17:R16, R1:R0
   \   00000228   0191               MOVW    R19:R18, R3:R2
   \   0000022A   ........           CALL    ?F_MUL_L04
   \   0000022E   0128               MOVW    R5:R4, R17:R16
   \   00000230   0139               MOVW    R7:R6, R19:R18
   \   00000232   B50A               IN      R16, 0x2A
   \   00000234   B51B               IN      R17, 0x2B
   \   00000236   E020               LDI     R18, 0
   \   00000238   E030               LDI     R19, 0
   \   0000023A   ........           CALL    ?UL2F_L04
   \   0000023E   01A8               MOVW    R21:R20, R17:R16
   \   00000240   01B9               MOVW    R23:R22, R19:R18
   \   00000242   0182               MOVW    R17:R16, R5:R4
   \   00000244   0193               MOVW    R19:R18, R7:R6
   \   00000246   ........           CALL    ?F_CMP_GE_L04
   \   0000024A   F008               BRCS    $+2+2
   \   0000024C   CF35               RJMP    ??main_0
     93                      flag=0;
   \   0000024E   2488               CLR     R8
   \   00000250   2499               CLR     R9
   \   00000252   CF32               RJMP    ??main_0
   \   00000254                      REQUIRE _A_DDRD
   \   00000254                      REQUIRE _A_PORTD
   \   00000254                      REQUIRE _A_ICR1
   \   00000254                      REQUIRE _A_OCR1A
     94                }
     95              }
     96            }
     97          }

   \                                 In  segment INTVEC, offset 0x20, root
   \                     `??T1int??INTVEC 32`:
   \   00000020   ........           JMP     T1int

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for aux2>`:
   \   00000000   CCCD3D4C           DD 3D4CCCCDH

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       5      2  T1int
      16      4  main
                   16 2 -> USART_initialize
                   16 2 -> USART_transmit
                   16 2 -> myprint
                   16 2 -> timer1_INIT
       0      2  timer1_INIT


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for aux2>
       4  ??T1int??INTVEC 32
      42  T1int
       1  _A_DDRD
       2  _A_ICR1
       2  _A_OCR1A
       1  _A_PORTD
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TIMSK
      20  aux
       4  aux2
       2  aux_iana
       4  aux_per
       2  cnt
       4  durata_pas
     596  main
      20  timer1_INIT
      12  -- Other

 
   9 bytes in segment ABSOLUTE
 658 bytes in segment CODE
  12 bytes in segment INITTAB
   4 bytes in segment INTVEC
   4 bytes in segment NEAR_I
   4 bytes in segment NEAR_ID
  32 bytes in segment NEAR_Z
 
 662 bytes of CODE memory (+ 16 bytes shared)
  36 bytes of DATA memory (+  9 bytes shared)

Errors: none
Warnings: 7

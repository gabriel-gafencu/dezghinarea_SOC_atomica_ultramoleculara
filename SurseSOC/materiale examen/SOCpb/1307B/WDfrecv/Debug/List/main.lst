###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        05/Jan/2015  18:10:56 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\WDfrecv\main.c                                  #
#    Command line =  D:\1307B\WDfrecv\main.c --cpu=m16 -ms -o                 #
#                    D:\1307B\WDfrecv\Debug\Obj\ -lC                          #
#                    D:\1307B\WDfrecv\Debug\List\ -lA                         #
#                    D:\1307B\WDfrecv\Debug\List\ --initializers_in_flash     #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\WDfrecv\Debug\List\main.lst                     #
#    Object file  =  D:\1307B\WDfrecv\Debug\Obj\main.r90                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\WDfrecv\main.c
      1          #include <iom16.h>

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include <inavr.h>
      3          #include "usart.h"
      4          
      5          //generare frecventa de 5KHz cu fu=66%;
      6          //perioada de transmitere a unui char pe seriala ~ 500us
      7          

   \                                 In  segment CODE, align 2, keep-with-next
      8          void timer1_INIT()
   \                     timer1_INIT:
      9          {
     10            /*
     11            Modul Normal: WGM13:10=0000;
     12            Cu prescaler: CS12:10=010;
     13            */
     14            TCCR1B|=(1<<CS11);
   \   00000000   B50E               IN      R16, 0x2E
   \   00000002   6002               ORI     R16, 0x02
   \   00000004   BD0E               OUT     0x2E, R16
     15            TCNT1=0;
   \   00000006   E000               LDI     R16, 0
   \   00000008   E010               LDI     R17, 0
   \   0000000A   BD1D               OUT     0x2D, R17
   \   0000000C   BD0C               OUT     0x2C, R16
     16           
     17          }
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_TCCR1B
   \   00000010                      REQUIRE _A_TCNT1
     18          
     19          

   \                                 In  segment NEAR_N, align 1, keep-with-next
     20          __no_init unsigned int HI;
   \                     HI:
   \   00000000                      DS8 2
     21          

   \                                 In  segment CODE, align 2, keep-with-next
     22          void main()
   \                     main:
     23          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
     24            int nrChars=0;
                       ^
Warning[Pe177]: variable "nrChars" was declared but never referenced
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
     25            USART_initialize(BAUD_RATE);
   \   00000008   E00C               LDI     R16, 12
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   ........           CALL    USART_initialize
     26            DDRD  |=(1<<PD5);
   \   00000010   9A8D               SBI     0x11, 0x05
     27            
     28            if(HI==1)
   \   00000012   9100....           LDS     R16, HI
   \   00000016   9110....           LDS     R17, (HI + 1)
   \   0000001A   3001               CPI     R16, 1
   \   0000001C   E020               LDI     R18, 0
   \   0000001E   0712               CPC     R17, R18
   \   00000020   F459               BRNE    ??main_0
     29            {
     30              PORTD |=(HI<<PD5);
   \   00000022   9100....           LDS     R16, HI
   \   00000026   9110....           LDS     R17, (HI + 1)
   \   0000002A   9502               SWAP    R16
   \   0000002C   7F00               ANDI    R16, 0xF0
   \   0000002E   0F00               LSL     R16
   \   00000030   B312               IN      R17, 0x12
   \   00000032   2B10               OR      R17, R16
   \   00000034   BB12               OUT     0x12, R17
   \   00000036   C00B               RJMP    ??main_1
     31            }
     32            else
     33            {
     34              PORTD &=~(HI<<PD5);
   \                     ??main_0:
   \   00000038   9100....           LDS     R16, HI
   \   0000003C   9110....           LDS     R17, (HI + 1)
   \   00000040   9502               SWAP    R16
   \   00000042   7F00               ANDI    R16, 0xF0
   \   00000044   0F00               LSL     R16
   \   00000046   9500               COM     R16
   \   00000048   B312               IN      R17, 0x12
   \   0000004A   2310               AND     R17, R16
   \   0000004C   BB12               OUT     0x12, R17
     35              
     36            }
     37           
     38            //TCNT1=0;
     39            
     40             if((MCUCSR>>WDRF)&1)
   \                     ??main_1:
   \   0000004E   B704               IN      R16, 0x34
   \   00000050   2F10               MOV     R17, R16
   \   00000052   FF13               SBRS    R17, 3
   \   00000054   C031               RJMP    ??main_2
     41            {
     42                
     43             if(HI==1)
   \   00000056   9100....           LDS     R16, HI
   \   0000005A   9110....           LDS     R17, (HI + 1)
   \   0000005E   3001               CPI     R16, 1
   \   00000060   E020               LDI     R18, 0
   \   00000062   0712               CPC     R17, R18
   \   00000064   F4A9               BRNE    ??main_3
     44             {
     45               
     46             timer1_INIT();
   \   00000066   ....               RCALL   timer1_INIT
     47             while(TCNT1<2750);    //8430
   \                     ??main_4:
   \   00000068   B50C               IN      R16, 0x2C
   \   0000006A   B51D               IN      R17, 0x2D
   \   0000006C   3B0E               CPI     R16, 190
   \   0000006E   E02A               LDI     R18, 10
   \   00000070   0712               CPC     R17, R18
   \   00000072   F3D0               BRCS    ??main_4
     48            /*nrChars=11;
     49             while(nrChars)
     50             {
     51              USART_transmit('*');
     52              nrChars--;
     53             }*/
     54               
     55             WDTCR|= (1<<WDP0);
   \   00000074   B501               IN      R16, 0x21
   \   00000076   6001               ORI     R16, 0x01
   \   00000078   BD01               OUT     0x21, R16
     56             WDTCR|= (0<<WDP1);
   \   0000007A   B501               IN      R16, 0x21
   \   0000007C   BD01               OUT     0x21, R16
     57             WDTCR|= (0<<WDP2); 
   \   0000007E   B501               IN      R16, 0x21
   \   00000080   BD01               OUT     0x21, R16
     58             HI=0;  
   \   00000082   E000               LDI     R16, 0
   \   00000084   E010               LDI     R17, 0
   \   00000086   9300....           STS     HI, R16
   \   0000008A   9310....           STS     (HI + 1), R17
   \   0000008E   C014               RJMP    ??main_2
     59             }
     60             else
     61             {
     62               
     63               timer1_INIT();
   \                     ??main_3:
   \   00000090   ....               RCALL   timer1_INIT
     64               while(TCNT1<5750); //4160
   \                     ??main_5:
   \   00000092   B50C               IN      R16, 0x2C
   \   00000094   B51D               IN      R17, 0x2D
   \   00000096   3706               CPI     R16, 118
   \   00000098   E126               LDI     R18, 22
   \   0000009A   0712               CPC     R17, R18
   \   0000009C   F3D0               BRCS    ??main_5
     65               /* nrChars=22;
     66                while(nrChars--)
     67                {
     68                  USART_transmit('*'); 
     69                }*/
     70                WDTCR|= (0<<WDP0);
   \   0000009E   B501               IN      R16, 0x21
   \   000000A0   BD01               OUT     0x21, R16
     71                WDTCR|= (1<<WDP1);
   \   000000A2   B501               IN      R16, 0x21
   \   000000A4   6002               ORI     R16, 0x02
   \   000000A6   BD01               OUT     0x21, R16
     72                WDTCR|= (0<<WDP2);
   \   000000A8   B501               IN      R16, 0x21
   \   000000AA   BD01               OUT     0x21, R16
     73                HI=1;
   \   000000AC   E001               LDI     R16, 1
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   9300....           STS     HI, R16
   \   000000B4   9310....           STS     (HI + 1), R17
     74              }
     75            }
     76            
     77            asm("WDR");
   \                     ??main_2:
   \   000000B8   95A8               WDR
     78            WDTCR|=(1<<WDE);  
   \   000000BA   B501               IN      R16, 0x21
   \   000000BC   6008               ORI     R16, 0x08
   \   000000BE   BD01               OUT     0x21, R16
     79            while(1)
   \                     ??main_6:
   \   000000C0   CFFF               RJMP    ??main_6
   \   000000C2                      REQUIRE _A_DDRD
   \   000000C2                      REQUIRE _A_PORTD
   \   000000C2                      REQUIRE _A_MCUCSR
   \   000000C2                      REQUIRE _A_TCNT1
   \   000000C2                      REQUIRE _A_WDTCR
     80             {
     81                 
     82             }
     83          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       2      2  main
                   2 2 -> USART_initialize
                   2 2 -> timer1_INIT
       0      2  timer1_INIT


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  HI
       1  _A_DDRD
       1  _A_MCUCSR
       1  _A_PORTD
       1  _A_TCCR1B
       2  _A_TCNT1
       1  _A_WDTCR
     194  main
      16  timer1_INIT

 
   7 bytes in segment ABSOLUTE
 210 bytes in segment CODE
   2 bytes in segment NEAR_N
 
 210 bytes of CODE memory
   2 bytes of DATA memory (+ 7 bytes shared)

Errors: none
Warnings: 1

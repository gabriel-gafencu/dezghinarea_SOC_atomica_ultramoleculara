///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       10/Jan/2015  21:07:59 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\1307B\Nou\Voltmetru ADC\main.c                       /
//    Command line =  "D:\1307B\Nou\Voltmetru ADC\main.c" --cpu=m16 -ms -o    /
//                    "D:\1307B\Nou\Voltmetru ADC\Debug\Obj\" -lC             /
//                    "D:\1307B\Nou\Voltmetru ADC\Debug\List\" -lA            /
//                    "D:\1307B\Nou\Voltmetru ADC\Debug\List\"                /
//                    --initializers_in_flash --no_cse --no_inline            /
//                    --no_code_motion --no_cross_call --no_clustering        /
//                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e           /
//                    --eeprom_size 512 --clib -On                            /
//    List file    =  D:\1307B\Nou\Voltmetru ADC\Debug\List\main.s90          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?F_CMP_GE_L04
        EXTERN ?F_CMP_LT_L04
        EXTERN ?F_DIV_L04
        EXTERN ?L_EC_MUL_L03
        EXTERN ?UL2F_L04
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??OnADC??INTVEC 56`
        PUBLIC OnADC
        FUNCTION OnADC,0233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_ADC
        PUBWEAK _A_ADCSRA
        PUBWEAK _A_ADMUX
        PUBWEAK _A_DDRA
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC flag
        PUBLIC `high`
        PUBLIC `low`
        PUBLIC main
        FUNCTION main,021a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC valoare
        PUBLIC value
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
OnADC               SYMBOL "OnADC"
`??OnADC??INTVEC 56` SYMBOL "??INTVEC 56", OnADC

        EXTERN PRINTF
        FUNCTION PRINTF,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN USART_Init
        FUNCTION USART_Init,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN USART_Transmit
        FUNCTION USART_Transmit,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\1307B\Nou\Voltmetru ADC\main.c
//    1 #include <inavr.h>
//    2 #include <iom16.h>

        ASEGN ABSOLUTE:DATA:NOROOT,03aH
// union <unnamed> volatile __io _A_DDRA
_A_DDRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,027H
// union <unnamed> volatile __io _A_ADMUX
_A_ADMUX:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,026H
// union <unnamed> volatile __io _A_ADCSRA
_A_ADCSRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,024H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS8 2
//    3 #include "usart.h"

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    4 unsigned char flag=0;
flag:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    5 unsigned long value=0;
value:
        DS8 4

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    6 float valoare;
valoare:
        DS8 4

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    7 unsigned char low,high;
`low`:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
`high`:
        DS8 1
//    8 
//    9 #pragma vector = ADC_vect

        RSEG CODE:CODE:NOROOT(1)
//   10 __interrupt void OnADC(void)
OnADC:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function OnADC
//   11 {
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        IN      R17, 0x3F
//   12   flag = 1;
        LDI     R16, 1
        STS     flag, R16
//   13 }
        OUT     0x3F, R17
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+1
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
//   14 

        RSEG CODE:CODE:NOROOT(1)
//   15 void main(void)
main:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function main
//   16 {
//   17  
//   18   DDRA &= ~(1<<PA1);
        FUNCALL main, USART_Init
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, PRINTF
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_Transmit
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_Transmit
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_Transmit
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CBI     0x1A, 0x01
//   19   USART_Init(MYUBRR);
        LDI     R16, 12
        LDI     R17, 0
        CALL    USART_Init
//   20   __enable_interrupt();
        SEI
//   21   //ADMUX |= (1<<REFS0);//teoretic referinta de 5v
//   22   ADMUX=(1<<REFS1)|(1<<REFS0)|(1<<MUX0);//intrare
        LDI     R16, 193
        OUT     0x07, R16
//   23   ADCSRA |= (1<<ADEN);//enable adc
        SBI     0x06, 0x07
//   24   ADCSRA |= (1<<ADPS2);//prescaler 16
        SBI     0x06, 0x02
//   25   ADCSRA |= (1<<ADIE); //activare intrerupere
        SBI     0x06, 0x03
//   26   ADCSRA |= (1<<ADSC);//start conversie
        SBI     0x06, 0x06
//   27   
//   28   while(1)
//   29   {
//   30     if(flag)
??main_0:
        LDS     R16, flag
        TST     R16
        BREQ    ??main_0
//   31     {
//   32       low = ADCL;
        IN      R16, 0x04
        STS     `low`, R16
//   33       high = ADCH;
        IN      R16, 0x05
        STS     `high`, R16
//   34       value = ((high&0x03)<<8)|low;
        LDS     R16, `high`
        LDI     R17, 0
        ANDI    R16, 0x03
        ANDI    R17, 0x00
        MOV     R17, R16
        LDI     R16, 0
        LDS     R18, `low`
        LDI     R19, 0
        OR      R16, R18
        OR      R17, R19
        MOV     R18, R17
        LSL     R18
        SBC     R18, R18
        MOV     R19, R18
        LDI     R30, LOW(value)
        LDI     R31, (value) >> 8
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
//   35       valoare = (value*5)/1024.;
        LDI     R20, 5
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, LOW(value)
        LDI     R31, (value) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?L_EC_MUL_L03
        CALL    ?UL2F_L04
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 128
        LDI     R23, 68
        CALL    ?F_DIV_L04
        LDI     R30, LOW(valoare)
        LDI     R31, (valoare) >> 8
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
//   36       //parteIntreaga=(unsigned long)valoare;
//   37       //parteFractionara=(valoare-parteIntreaga)*1000;
//   38       
//   39       
//   40       if(valoare>=0 && valoare<=1.5)
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, LOW(valoare)
        LDI     R31, (valoare) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?F_CMP_GE_L04
        BRCC    ??main_1
        LDI     R20, 1
        LDI     R21, 0
        LDI     R22, 192
        LDI     R23, 63
        LDI     R30, LOW(valoare)
        LDI     R31, (valoare) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?F_CMP_LT_L04
        BRCC    ??main_1
//   41       {
//   42          PRINTF((void*)(&valoare),FLOAT);
        LDI     R18, 3
        LDI     R16, LOW(valoare)
        LDI     R17, (valoare) >> 8
        CALL    PRINTF
//   43          USART_Transmit('V');
        LDI     R16, 86
        CALL    USART_Transmit
//   44          USART_Transmit(0xd);
        LDI     R16, 13
        CALL    USART_Transmit
//   45          USART_Transmit(0xa);
        LDI     R16, 10
        CALL    USART_Transmit
//   46       }
//   47      
//   48      
//   49       flag = 0;
??main_1:
        LDI     R16, 0
        STS     flag, R16
//   50       ADCSRA |= (1<<ADSC);
        SBI     0x06, 0x06
        RJMP    ??main_0
          CFI EndBlock cfiBlock1
        REQUIRE _A_DDRA
        REQUIRE _A_ADMUX
        REQUIRE _A_ADCSRA
        REQUIRE _A_ADC
//   51     }
//   52   }
//   53 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 56
`??OnADC??INTVEC 56`:
        JMP     OnADC

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
//   54 /*
//   55 
//   56 #include <inavr.h>
//   57 #include <iom16.h>
//   58 #include "usart.h"
//   59 
//   60 #define RANGE 50000   // 10000
//   61 #define STEP RANGE/1024.0
//   62 #define PRECISION 100*/
//   63 /*
//   64 	Ground sursa a 2-a conectat la pin 11 pe placa
//   65 	VCC sursa a 2-a conectat la pin PA1(39 pe placa)
//   66 */
//   67 	/*
//   68 int voltage;
//   69 int SC_flag=0;
//   70 
//   71 #pragma vector=ADC_vect
//   72 __interrupt void ADC_INT(void)
//   73 {
//   74    voltage=(int)ADC;
//   75    SC_flag=1;
//   76 }
//   77 
//   78 
//   79 void PRINT_freq(int number, int precizion);
//   80 
//   81 void main( void )
//   82 {
//   83   int voltaj;
//   84   DDRA=(0<<PA1);
//   85   __enable_interrupt();
//   86   USART_Init(MYUBRR);
//   87   ADMUX=(1<<REFS1)|(1<<REFS0)|(1<<MUX0);//intrare
//   88   ADCSRA=(1<<ADIE)|(1<<ADPS1)|(1<<ADEN);//ADEN AD enable ADSC porneste o noua canversie pentru single ended
//   89   ADCSRA|=(1<<ADSC);
//   90   while(1)
//   91   {
//   92     if(SC_flag)
//   93     {
//   94       voltaj=(int)(voltage*STEP)/100;
//   95       PRINT_freq(voltaj,2);
//   96       ADCSRA|=(1<<ADSC);
//   97       SC_flag=0;
//   98       
//   99     }
//  100   }
//  101 }
//  102 
//  103 
//  104 void PRINT_freq(int number, int precizion)
//  105 {
//  106   unsigned char sir[10]={0,0,0,0,0,0,0,0,0,0,};
//  107   int n=0;
//  108   if(number>PRECISION)
//  109   {
//  110   while(number)
//  111   {
//  112      if(n==precizion)
//  113      {
//  114       sir[n]='.'; 
//  115       n++;
//  116      }
//  117      sir[n]=((number%10)+'0');
//  118      number/=10;
//  119      n++;
//  120      
//  121   }
//  122   n--;
//  123   while(n>-1)
//  124   {
//  125      USART_transmit(sir[n]);
//  126      n--;
//  127   }
//  128 
//  129   }
//  130   else
//  131   {
//  132    while(number)
//  133      {
//  134          sir[n]=((number%10)+'0');
//  135          number/=10;
//  136          n++;
//  137        
//  138     }
//  139    while(n<2)
//  140    {
//  141     sir[n]='0';
//  142     n++;
//  143    }
//  144    sir[n]='.'; 
//  145    sir[n+1]='0';
//  146    n+=2;
//  147   }
//  148   n--;
//  149   while(n>-1)
//  150   {
//  151      USART_transmit(sir[n+1]);
//  152      n--;
//  153   }
//  154   USART_transmit('V');
//  155   USART_transmit(0x0D);
//  156   USART_transmit(0x0A);
//  157 }
//  158 */
// 
//   5 bytes in segment ABSOLUTE
// 250 bytes in segment CODE
//   6 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//  11 bytes in segment NEAR_Z
// 
// 250 bytes of CODE memory (+ 10 bytes shared)
//  11 bytes of DATA memory (+  5 bytes shared)
//
//Errors: none
//Warnings: none

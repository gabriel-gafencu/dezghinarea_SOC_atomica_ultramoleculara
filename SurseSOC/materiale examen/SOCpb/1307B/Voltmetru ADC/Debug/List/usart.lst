###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        10/Jan/2015  21:03:04 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Nou\Voltmetru ADC\usart.c                       #
#    Command line =  "D:\1307B\Nou\Voltmetru ADC\usart.c" --cpu=m16 -ms -o    #
#                    "D:\1307B\Nou\Voltmetru ADC\Debug\Obj\" -lC              #
#                    "D:\1307B\Nou\Voltmetru ADC\Debug\List\" -lA             #
#                    "D:\1307B\Nou\Voltmetru ADC\Debug\List\"                 #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\1307B\Nou\Voltmetru ADC\Debug\List\usart.lst          #
#    Object file  =  D:\1307B\Nou\Voltmetru ADC\Debug\Obj\usart.r90           #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Nou\Voltmetru ADC\usart.c
      1          #include <iom16.h>

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS8 1
      2          #include "usart.h"

   \                                 In  segment CODE, align 2, keep-with-next
      3          void USART_Transmit( unsigned char data )
   \                     USART_Transmit:
   \                     ??USART_Transmit_0:
      4          {
      5            /* Wait for empty transmit buffer */
      6            while ( !( UCSRA & (1<<UDRE)) )
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??USART_Transmit_0
      7              ;
      8            /* Put data into buffer, sends the data */
      9            UDR = data;
   \   00000004   B90C               OUT     0x0C, R16
     10          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_UCSRA
   \   00000008                      REQUIRE _A_UDR

   \                                 In  segment CODE, align 2, keep-with-next
     11          unsigned char USART_Receive( void )
   \                     USART_Receive:
   \                     ??USART_Receive_0:
     12          {
     13            /* Wait for data to be received */
     14            while ( !(UCSRA & (1<<RXC)) )
   \   00000000   9B5F               SBIS    0x0B, 0x07
   \   00000002   CFFE               RJMP    ??USART_Receive_0
     15              ;
     16            /* Get and return received data from buffer */
     17            return UDR;
   \   00000004   B10C               IN      R16, 0x0C
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_UCSRA
   \   00000008                      REQUIRE _A_UDR
     18          }

   \                                 In  segment CODE, align 2, keep-with-next
     19          void USART_Init( unsigned int ubrr)
   \                     USART_Init:
     20          {
     21            /* Set baud rate */
     22            UBRRH = (unsigned char)(ubrr>>8);
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   2F23               MOV     R18, R19
   \   00000004   E030               LDI     R19, 0
   \   00000006   BD20               OUT     0x20, R18
     23            UBRRL = (unsigned char)ubrr;
   \   00000008   2F20               MOV     R18, R16
   \   0000000A   B929               OUT     0x09, R18
     24            /* Enable receiver and transmitter */
     25            UCSRB = (1<<RXEN)|(1<<TXEN);
   \   0000000C   E128               LDI     R18, 24
   \   0000000E   B92A               OUT     0x0A, R18
     26            /* Set frame format: 8data, 2stop bit */
     27            UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0);
   \   00000010   E826               LDI     R18, 134
   \   00000012   BD20               OUT     0x20, R18
     28            /*Enable interrupt on recive*/
     29            UCSRB |= (1<<RXCIE);
   \   00000014   9A57               SBI     0x0A, 0x07
     30          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_UBRRH
   \   00000018                      REQUIRE _A_UBRRL
   \   00000018                      REQUIRE _A_UCSRB
     31          
     32          
     33          #define PRECISION 2 //numarul de cifre dupa virgula

   \                                 In  segment CODE, align 2, keep-with-next
     34          void printHex(unsigned  int data)
   \                     printHex:
     35          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   01C8               MOVW    R25:R24, R17:R16
     36          	unsigned char buffer[5];
     37          	unsigned char i,j=0;
   \   00000008   E0A0               LDI     R26, 0
     38          	
     39          	for(i = 0;i < 5;i++)
   \   0000000A   E0B0               LDI     R27, 0
   \                     ??printHex_0:
   \   0000000C   30B5               CPI     R27, 5
   \   0000000E   F448               BRCC    ??printHex_1
     40          		buffer[i] = 0;
   \   00000010   E020               LDI     R18, 0
   \   00000012   01FE               MOVW    R31:R30, R29:R28
   \   00000014   2F0B               MOV     R16, R27
   \   00000016   E010               LDI     R17, 0
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   8320               ST      Z, R18
   \   0000001E   95B3               INC     R27
   \   00000020   CFF5               RJMP    ??printHex_0
     41          	if(!data)
   \                     ??printHex_1:
   \   00000022   2F08               MOV     R16, R24
   \   00000024   2B09               OR      R16, R25
   \   00000026   F439               BRNE    ??printHex_2
     42          	{
     43          		USART_Transmit('0');
   \   00000028   E300               LDI     R16, 48
   \   0000002A   ....               RCALL   USART_Transmit
     44          		USART_Transmit('x');
   \   0000002C   E708               LDI     R16, 120
   \   0000002E   ....               RCALL   USART_Transmit
     45          		USART_Transmit('0');
   \   00000030   E300               LDI     R16, 48
   \   00000032   ....               RCALL   USART_Transmit
     46          		return;
   \   00000034   C067               RJMP    ??printHex_3
     47          	}
     48          
     49          	for(i = 0; i < 4;i++)
   \                     ??printHex_2:
   \   00000036   E0B0               LDI     R27, 0
   \                     ??printHex_4:
   \   00000038   30B4               CPI     R27, 4
   \   0000003A   F008               BRCS    $+2+2
   \   0000003C   C04D               RJMP    ??printHex_5
     50          	{
     51          		buffer[j] = (data&0xFFFF)>>12;
   \   0000003E   018C               MOVW    R17:R16, R25:R24
   \   00000040   2F01               MOV     R16, R17
   \   00000042   E010               LDI     R17, 0
   \   00000044   9506               LSR     R16
   \   00000046   9506               LSR     R16
   \   00000048   9506               LSR     R16
   \   0000004A   9506               LSR     R16
   \   0000004C   2F20               MOV     R18, R16
   \   0000004E   01FE               MOVW    R31:R30, R29:R28
   \   00000050   2F0A               MOV     R16, R26
   \   00000052   E010               LDI     R17, 0
   \   00000054   0FE0               ADD     R30, R16
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   8320               ST      Z, R18
     52          		data<<=4;
   \   0000005A   E044               LDI     R20, 4
   \   0000005C   018C               MOVW    R17:R16, R25:R24
   \   0000005E   ........           CALL    ?S_SHL_L02
   \   00000062   01C8               MOVW    R25:R24, R17:R16
     53          		if(!buffer[j])
   \   00000064   01FE               MOVW    R31:R30, R29:R28
   \   00000066   2F0A               MOV     R16, R26
   \   00000068   E010               LDI     R17, 0
   \   0000006A   0FE0               ADD     R30, R16
   \   0000006C   1FF1               ADC     R31, R17
   \   0000006E   8100               LD      R16, Z
   \   00000070   2300               TST     R16
   \   00000072   F4B1               BRNE    ??printHex_6
     54          		{
     55          			if(j)
   \   00000074   23AA               TST     R26
   \   00000076   F171               BREQ    ??printHex_7
     56          			{				
     57          				if(buffer[j-1])
   \   00000078   01FE               MOVW    R31:R30, R29:R28
   \   0000007A   2F0A               MOV     R16, R26
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   0FE0               ADD     R30, R16
   \   00000080   1FF1               ADC     R31, R17
   \   00000082   9731               SBIW    R31:R30, 1
   \   00000084   8100               LD      R16, Z
   \   00000086   2300               TST     R16
   \   00000088   F049               BREQ    ??printHex_8
     58          				{
     59          					buffer[j] = '0';
   \   0000008A   E320               LDI     R18, 48
   \   0000008C   01FE               MOVW    R31:R30, R29:R28
   \   0000008E   2F0A               MOV     R16, R26
   \   00000090   E010               LDI     R17, 0
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   8320               ST      Z, R18
     60          					j++;
   \   00000098   95A3               INC     R26
     61          					continue;
   \   0000009A   C01C               RJMP    ??printHex_7
     62          				}
     63          				j--;
   \                     ??printHex_8:
   \   0000009C   95AA               DEC     R26
     64          			}
     65          			
     66          			continue;
   \   0000009E   C01A               RJMP    ??printHex_7
     67          		}
     68          		if(buffer[j]<=9)
   \                     ??printHex_6:
   \   000000A0   01FE               MOVW    R31:R30, R29:R28
   \   000000A2   2F0A               MOV     R16, R26
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   0FE0               ADD     R30, R16
   \   000000A8   1FF1               ADC     R31, R17
   \   000000AA   8100               LD      R16, Z
   \   000000AC   300A               CPI     R16, 10
   \   000000AE   F448               BRCC    ??printHex_9
     69          		{
     70          			buffer[j]+='0';
   \   000000B0   01FE               MOVW    R31:R30, R29:R28
   \   000000B2   2F0A               MOV     R16, R26
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   0FE0               ADD     R30, R16
   \   000000B8   1FF1               ADC     R31, R17
   \   000000BA   8100               LD      R16, Z
   \   000000BC   5D00               SUBI    R16, 208
   \   000000BE   8300               ST      Z, R16
   \   000000C0   C008               RJMP    ??printHex_10
     71          		}
     72          		else
     73          		{
     74          			buffer[j]+=('A'-10);
   \                     ??printHex_9:
   \   000000C2   01FE               MOVW    R31:R30, R29:R28
   \   000000C4   2F0A               MOV     R16, R26
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   0FE0               ADD     R30, R16
   \   000000CA   1FF1               ADC     R31, R17
   \   000000CC   8100               LD      R16, Z
   \   000000CE   5C09               SUBI    R16, 201
   \   000000D0   8300               ST      Z, R16
     75          		}
     76          		j++;
   \                     ??printHex_10:
   \   000000D2   95A3               INC     R26
     77          	}
   \                     ??printHex_7:
   \   000000D4   95B3               INC     R27
   \   000000D6   CFB0               RJMP    ??printHex_4
     78          	i = 0;
   \                     ??printHex_5:
   \   000000D8   E0B0               LDI     R27, 0
     79          	USART_Transmit('0');
   \   000000DA   E300               LDI     R16, 48
   \   000000DC   ....               RCALL   USART_Transmit
     80          	USART_Transmit('x');
   \   000000DE   E708               LDI     R16, 120
   \   000000E0   ....               RCALL   USART_Transmit
     81          	while(buffer[i])
   \                     ??printHex_11:
   \   000000E2   01FE               MOVW    R31:R30, R29:R28
   \   000000E4   2F0B               MOV     R16, R27
   \   000000E6   E010               LDI     R17, 0
   \   000000E8   0FE0               ADD     R30, R16
   \   000000EA   1FF1               ADC     R31, R17
   \   000000EC   8100               LD      R16, Z
   \   000000EE   2300               TST     R16
   \   000000F0   F049               BREQ    ??printHex_3
     82          		USART_Transmit(buffer[i++]);
   \   000000F2   01FE               MOVW    R31:R30, R29:R28
   \   000000F4   2F0B               MOV     R16, R27
   \   000000F6   E010               LDI     R17, 0
   \   000000F8   0FE0               ADD     R30, R16
   \   000000FA   1FF1               ADC     R31, R17
   \   000000FC   8100               LD      R16, Z
   \   000000FE   ....               RCALL   USART_Transmit
   \   00000100   95B3               INC     R27
   \   00000102   CFEF               RJMP    ??printHex_11
     83          	
     84          }
   \                     ??printHex_3:
   \   00000104   9625               ADIW    R29:R28, 5
   \   00000106   E0E4               LDI     R30, 4
   \   00000108   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
     85          void printInt(int number)
   \                     printInt:
     86          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   9727               SBIW    R29:R28, 7
   \   00000006   0128               MOVW    R5:R4, R17:R16
     87          	unsigned char buffer[7];
     88          	unsigned char index = 0;
   \   00000008   2466               CLR     R6
     89          	long max=10;
   \   0000000A   E08A               LDI     R24, 10
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   E0A0               LDI     R26, 0
   \   00000010   E0B0               LDI     R27, 0
     90          
     91          	for(index = 0; index < 7; index++)
   \   00000012   2466               CLR     R6
   \                     ??printInt_0:
   \   00000014   E007               LDI     R16, 7
   \   00000016   1660               CP      R6, R16
   \   00000018   F440               BRCC    ??printInt_1
     92          		buffer[index] = 0;
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   01FE               MOVW    R31:R30, R29:R28
   \   0000001E   2477               CLR     R7
   \   00000020   0DE6               ADD     R30, R6
   \   00000022   1DF7               ADC     R31, R7
   \   00000024   8300               ST      Z, R16
   \   00000026   9463               INC     R6
   \   00000028   CFF5               RJMP    ??printInt_0
     93          
     94          	index = 0;
   \                     ??printInt_1:
   \   0000002A   2466               CLR     R6
     95          
     96          	if(number<0)
   \   0000002C   2055               TST     R5
   \   0000002E   F442               BRPL    ??printInt_2
     97          	{
     98          		index = 1;
   \   00000030   2466               CLR     R6
   \   00000032   9463               INC     R6
     99          		buffer[0] = '-';
   \   00000034   E20D               LDI     R16, 45
   \   00000036   8308               ST      Y, R16
    100          		number = -number;
   \   00000038   9451               NEG     R5
   \   0000003A   9441               NEG     R4
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   0A50               SBC     R5, R16
    101          	}	
    102          	
    103          	while(1)
    104          	{
    105          		if(max <= number)
   \                     ??printInt_2:
   \   00000040   0182               MOVW    R17:R16, R5:R4
   \   00000042   2F21               MOV     R18, R17
   \   00000044   0F22               LSL     R18
   \   00000046   0B22               SBC     R18, R18
   \   00000048   2F32               MOV     R19, R18
   \   0000004A   1708               CP      R16, R24
   \   0000004C   0719               CPC     R17, R25
   \   0000004E   072A               CPC     R18, R26
   \   00000050   073B               CPC     R19, R27
   \   00000052   F05C               BRLT    ??printInt_3
    106          		{
    107          			max*=10;
   \   00000054   E00A               LDI     R16, 10
   \   00000056   E010               LDI     R17, 0
   \   00000058   E020               LDI     R18, 0
   \   0000005A   E030               LDI     R19, 0
   \   0000005C   01AC               MOVW    R21:R20, R25:R24
   \   0000005E   01BD               MOVW    R23:R22, R27:R26
   \   00000060   ........           CALL    ?L_EC_MUL_L03
   \   00000064   01C8               MOVW    R25:R24, R17:R16
   \   00000066   01D9               MOVW    R27:R26, R19:R18
   \   00000068   CFEB               RJMP    ??printInt_2
    108          		}
    109          		else
    110          			break;
    111          	}
    112          	max/=10;
   \                     ??printInt_3:
   \   0000006A   E04A               LDI     R20, 10
   \   0000006C   E050               LDI     R21, 0
   \   0000006E   E060               LDI     R22, 0
   \   00000070   E070               LDI     R23, 0
   \   00000072   018C               MOVW    R17:R16, R25:R24
   \   00000074   019D               MOVW    R19:R18, R27:R26
   \   00000076   ........           CALL    ?SL_DIVMOD_L03
   \   0000007A   01C8               MOVW    R25:R24, R17:R16
   \   0000007C   01D9               MOVW    R27:R26, R19:R18
    113          	while(max)
   \                     ??printInt_4:
   \   0000007E   2F08               MOV     R16, R24
   \   00000080   2B09               OR      R16, R25
   \   00000082   2B0A               OR      R16, R26
   \   00000084   2B0B               OR      R16, R27
   \   00000086   F129               BREQ    ??printInt_5
    114          	{
    115          		buffer[index++]=(number/max)+'0';
   \   00000088   0182               MOVW    R17:R16, R5:R4
   \   0000008A   2F21               MOV     R18, R17
   \   0000008C   0F22               LSL     R18
   \   0000008E   0B22               SBC     R18, R18
   \   00000090   2F32               MOV     R19, R18
   \   00000092   01AC               MOVW    R21:R20, R25:R24
   \   00000094   01BD               MOVW    R23:R22, R27:R26
   \   00000096   ........           CALL    ?SL_DIVMOD_L03
   \   0000009A   5D00               SUBI    R16, 208
   \   0000009C   01FE               MOVW    R31:R30, R29:R28
   \   0000009E   2477               CLR     R7
   \   000000A0   0DE6               ADD     R30, R6
   \   000000A2   1DF7               ADC     R31, R7
   \   000000A4   8300               ST      Z, R16
   \   000000A6   9463               INC     R6
    116          		number%=max;
   \   000000A8   0182               MOVW    R17:R16, R5:R4
   \   000000AA   2F21               MOV     R18, R17
   \   000000AC   0F22               LSL     R18
   \   000000AE   0B22               SBC     R18, R18
   \   000000B0   2F32               MOV     R19, R18
   \   000000B2   01AC               MOVW    R21:R20, R25:R24
   \   000000B4   01BD               MOVW    R23:R22, R27:R26
   \   000000B6   ........           CALL    ?SL_DIVMOD_L03
   \   000000BA   012A               MOVW    R5:R4, R21:R20
    117          		max/=10;
   \   000000BC   E04A               LDI     R20, 10
   \   000000BE   E050               LDI     R21, 0
   \   000000C0   E060               LDI     R22, 0
   \   000000C2   E070               LDI     R23, 0
   \   000000C4   018C               MOVW    R17:R16, R25:R24
   \   000000C6   019D               MOVW    R19:R18, R27:R26
   \   000000C8   ........           CALL    ?SL_DIVMOD_L03
   \   000000CC   01C8               MOVW    R25:R24, R17:R16
   \   000000CE   01D9               MOVW    R27:R26, R19:R18
   \   000000D0   CFD6               RJMP    ??printInt_4
    118          	}
    119          	
    120          	index = 0;
   \                     ??printInt_5:
   \   000000D2   2466               CLR     R6
    121          	while(buffer[index])
   \                     ??printInt_6:
   \   000000D4   01FE               MOVW    R31:R30, R29:R28
   \   000000D6   2477               CLR     R7
   \   000000D8   0DE6               ADD     R30, R6
   \   000000DA   1DF7               ADC     R31, R7
   \   000000DC   8100               LD      R16, Z
   \   000000DE   2300               TST     R16
   \   000000E0   F041               BREQ    ??printInt_7
    122          		USART_Transmit(buffer[index++]);
   \   000000E2   01FE               MOVW    R31:R30, R29:R28
   \   000000E4   2477               CLR     R7
   \   000000E6   0DE6               ADD     R30, R6
   \   000000E8   1DF7               ADC     R31, R7
   \   000000EA   8100               LD      R16, Z
   \   000000EC   ....               RCALL   USART_Transmit
   \   000000EE   9463               INC     R6
   \   000000F0   CFF1               RJMP    ??printInt_6
    123          }
   \                     ??printInt_7:
   \   000000F2   9627               ADIW    R29:R28, 7
   \   000000F4   E0E8               LDI     R30, 8
   \   000000F6   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    124          unsigned char buffer[11];
   \                     buffer:
   \   00000000                      DS8 11

   \                                 In  segment CODE, align 2, keep-with-next
    125          void printLong(long number)
   \                     printLong:
    126          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
    127          	
    128          	unsigned char index = 0;
   \   00000008   2488               CLR     R8
    129          	long max=10;
   \   0000000A   E08A               LDI     R24, 10
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   E0A0               LDI     R26, 0
   \   00000010   E0B0               LDI     R27, 0
    130          
    131          	for(index = 0; index < 11; index++)
   \   00000012   2488               CLR     R8
   \                     ??printLong_0:
   \   00000014   E00B               LDI     R16, 11
   \   00000016   1680               CP      R8, R16
   \   00000018   F440               BRCC    ??printLong_1
    132          		buffer[index] = 0;
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   2499               CLR     R9
   \   0000001E   01F4               MOVW    R31:R30, R9:R8
   \   00000020   ....               SUBI    R30, LOW((-(buffer) & 0xFFFF))
   \   00000022   ....               SBCI    R31, (-(buffer) & 0xFFFF) >> 8
   \   00000024   8300               ST      Z, R16
   \   00000026   9483               INC     R8
   \   00000028   CFF5               RJMP    ??printLong_0
    133          
    134          	index = 0;
   \                     ??printLong_1:
   \   0000002A   2488               CLR     R8
    135          
    136          	if(number<0)
   \   0000002C   2077               TST     R7
   \   0000002E   F46A               BRPL    ??printLong_2
    137          	{
    138          		index = 1;
   \   00000030   2488               CLR     R8
   \   00000032   9483               INC     R8
    139          		buffer[0] = '-';
   \   00000034   E20D               LDI     R16, 45
   \   00000036   9300....           STS     buffer, R16
    140          		number = -number;
   \   0000003A   9450               COM     R5
   \   0000003C   9460               COM     R6
   \   0000003E   9470               COM     R7
   \   00000040   0B00               SBC     R16, R16
   \   00000042   9441               NEG     R4
   \   00000044   0A50               SBC     R5, R16
   \   00000046   0A60               SBC     R6, R16
   \   00000048   0A70               SBC     R7, R16
    141          	}	
    142          	
    143          	while(1)
    144          	{
    145          		if(max <= number)
   \                     ??printLong_2:
   \   0000004A   1648               CP      R4, R24
   \   0000004C   0659               CPC     R5, R25
   \   0000004E   066A               CPC     R6, R26
   \   00000050   067B               CPC     R7, R27
   \   00000052   F05C               BRLT    ??printLong_3
    146          		{
    147          			max*=10;
   \   00000054   E00A               LDI     R16, 10
   \   00000056   E010               LDI     R17, 0
   \   00000058   E020               LDI     R18, 0
   \   0000005A   E030               LDI     R19, 0
   \   0000005C   01AC               MOVW    R21:R20, R25:R24
   \   0000005E   01BD               MOVW    R23:R22, R27:R26
   \   00000060   ........           CALL    ?L_EC_MUL_L03
   \   00000064   01C8               MOVW    R25:R24, R17:R16
   \   00000066   01D9               MOVW    R27:R26, R19:R18
   \   00000068   CFF0               RJMP    ??printLong_2
    148          		}
    149          		else
    150          			break;
    151          	}
    152          	max/=10;
   \                     ??printLong_3:
   \   0000006A   E04A               LDI     R20, 10
   \   0000006C   E050               LDI     R21, 0
   \   0000006E   E060               LDI     R22, 0
   \   00000070   E070               LDI     R23, 0
   \   00000072   018C               MOVW    R17:R16, R25:R24
   \   00000074   019D               MOVW    R19:R18, R27:R26
   \   00000076   ........           CALL    ?SL_DIVMOD_L03
   \   0000007A   01C8               MOVW    R25:R24, R17:R16
   \   0000007C   01D9               MOVW    R27:R26, R19:R18
    153          	while(max)
   \                     ??printLong_4:
   \   0000007E   2F08               MOV     R16, R24
   \   00000080   2B09               OR      R16, R25
   \   00000082   2B0A               OR      R16, R26
   \   00000084   2B0B               OR      R16, R27
   \   00000086   F101               BREQ    ??printLong_5
    154          	{
    155          		buffer[index++]=(unsigned char)(number/max)+'0';
   \   00000088   01AC               MOVW    R21:R20, R25:R24
   \   0000008A   01BD               MOVW    R23:R22, R27:R26
   \   0000008C   0182               MOVW    R17:R16, R5:R4
   \   0000008E   0193               MOVW    R19:R18, R7:R6
   \   00000090   ........           CALL    ?SL_DIVMOD_L03
   \   00000094   5D00               SUBI    R16, 208
   \   00000096   2499               CLR     R9
   \   00000098   01F4               MOVW    R31:R30, R9:R8
   \   0000009A   ....               SUBI    R30, LOW((-(buffer) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(buffer) & 0xFFFF) >> 8
   \   0000009E   8300               ST      Z, R16
   \   000000A0   9483               INC     R8
    156          		number%=max;
   \   000000A2   01AC               MOVW    R21:R20, R25:R24
   \   000000A4   01BD               MOVW    R23:R22, R27:R26
   \   000000A6   0182               MOVW    R17:R16, R5:R4
   \   000000A8   0193               MOVW    R19:R18, R7:R6
   \   000000AA   ........           CALL    ?SL_DIVMOD_L03
   \   000000AE   012A               MOVW    R5:R4, R21:R20
   \   000000B0   013B               MOVW    R7:R6, R23:R22
    157          		max/=10;
   \   000000B2   E04A               LDI     R20, 10
   \   000000B4   E050               LDI     R21, 0
   \   000000B6   E060               LDI     R22, 0
   \   000000B8   E070               LDI     R23, 0
   \   000000BA   018C               MOVW    R17:R16, R25:R24
   \   000000BC   019D               MOVW    R19:R18, R27:R26
   \   000000BE   ........           CALL    ?SL_DIVMOD_L03
   \   000000C2   01C8               MOVW    R25:R24, R17:R16
   \   000000C4   01D9               MOVW    R27:R26, R19:R18
   \   000000C6   CFDB               RJMP    ??printLong_4
    158          	}
    159          	
    160          	index = 0;
   \                     ??printLong_5:
   \   000000C8   2488               CLR     R8
    161          	while(buffer[index])
   \                     ??printLong_6:
   \   000000CA   2499               CLR     R9
   \   000000CC   01F4               MOVW    R31:R30, R9:R8
   \   000000CE   ....               SUBI    R30, LOW((-(buffer) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(buffer) & 0xFFFF) >> 8
   \   000000D2   8100               LD      R16, Z
   \   000000D4   2300               TST     R16
   \   000000D6   F041               BREQ    ??printLong_7
    162          		USART_Transmit(buffer[index++]);
   \   000000D8   2499               CLR     R9
   \   000000DA   01F4               MOVW    R31:R30, R9:R8
   \   000000DC   ....               SUBI    R30, LOW((-(buffer) & 0xFFFF))
   \   000000DE   ....               SBCI    R31, (-(buffer) & 0xFFFF) >> 8
   \   000000E0   8100               LD      R16, Z
   \   000000E2   ....               RCALL   USART_Transmit
   \   000000E4   9483               INC     R8
   \   000000E6   CFF1               RJMP    ??printLong_6
    163          }
   \                     ??printLong_7:
   \   000000E8   E0EA               LDI     R30, 10
   \   000000EA   ........           JMP     ?EPILOGUE_B10_L09

   \                                 In  segment CODE, align 2, keep-with-next
    164          void printString(unsigned char*str)
   \                     printString:
    165          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    166          	while(*str)
   \                     ??printString_0:
   \   00000006   910C               LD      R16, X
   \   00000008   2300               TST     R16
   \   0000000A   F021               BREQ    ??printString_1
    167          		USART_Transmit(*str++);
   \   0000000C   910C               LD      R16, X
   \   0000000E   ....               RCALL   USART_Transmit
   \   00000010   9611               ADIW    R27:R26, 1
   \   00000012   CFF9               RJMP    ??printString_0
    168          }
   \                     ??printString_1:
   \   00000014   91A9               LD      R26, Y+
   \   00000016   91B9               LD      R27, Y+
   \   00000018   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    169          void printFloat(float number)
   \                     printFloat:
    170          {
   \   00000000   ........           CALL    ?PROLOGUE13_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004   0148               MOVW    R9:R8, R17:R16
   \   00000006   0159               MOVW    R11:R10, R19:R18
    171          	long integerPart = (long)number;
   \   00000008   0184               MOVW    R17:R16, R9:R8
   \   0000000A   0195               MOVW    R19:R18, R11:R10
   \   0000000C   ........           CALL    ?F2SL_L04
   \   00000010   0128               MOVW    R5:R4, R17:R16
   \   00000012   0139               MOVW    R7:R6, R19:R18
    172          	float realPart = number - integerPart;
   \   00000014   0182               MOVW    R17:R16, R5:R4
   \   00000016   0193               MOVW    R19:R18, R7:R6
   \   00000018   ........           CALL    ?SL2F_L04
   \   0000001C   01A8               MOVW    R21:R20, R17:R16
   \   0000001E   01B9               MOVW    R23:R22, R19:R18
   \   00000020   0184               MOVW    R17:R16, R9:R8
   \   00000022   0195               MOVW    R19:R18, R11:R10
   \   00000024   ........           CALL    ?F_SUB_L04
   \   00000028   01C8               MOVW    R25:R24, R17:R16
   \   0000002A   01D9               MOVW    R27:R26, R19:R18
    173          	unsigned char i=0;
   \   0000002C   24CC               CLR     R12
    174          	printLong(integerPart);
   \   0000002E   0182               MOVW    R17:R16, R5:R4
   \   00000030   0193               MOVW    R19:R18, R7:R6
   \   00000032   ....               RCALL   printLong
    175          	USART_Transmit('.');
   \   00000034   E20E               LDI     R16, 46
   \   00000036   ....               RCALL   USART_Transmit
    176          	if(realPart < 0)
   \   00000038   E040               LDI     R20, 0
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   E060               LDI     R22, 0
   \   0000003E   E070               LDI     R23, 0
   \   00000040   018C               MOVW    R17:R16, R25:R24
   \   00000042   019D               MOVW    R19:R18, R27:R26
   \   00000044   ........           CALL    ?F_CMP_LT_L04
   \   00000048   F408               BRCC    ??printFloat_0
    177          		realPart = -realPart;
   \   0000004A   58B0               SUBI    R27, 128
    178          	for(;i<PRECISION;i++)
   \                     ??printFloat_0:
   \   0000004C   E002               LDI     R16, 2
   \   0000004E   16C0               CP      R12, R16
   \   00000050   F518               BRCC    ??printFloat_1
    179          	{
    180          		integerPart = (long)(realPart*10);
   \   00000052   E040               LDI     R20, 0
   \   00000054   E050               LDI     R21, 0
   \   00000056   E260               LDI     R22, 32
   \   00000058   E471               LDI     R23, 65
   \   0000005A   018C               MOVW    R17:R16, R25:R24
   \   0000005C   019D               MOVW    R19:R18, R27:R26
   \   0000005E   ........           CALL    ?F_MUL_L04
   \   00000062   ........           CALL    ?F2SL_L04
   \   00000066   0128               MOVW    R5:R4, R17:R16
   \   00000068   0139               MOVW    R7:R6, R19:R18
    181          		realPart*=10;
   \   0000006A   E040               LDI     R20, 0
   \   0000006C   E050               LDI     R21, 0
   \   0000006E   E260               LDI     R22, 32
   \   00000070   E471               LDI     R23, 65
   \   00000072   018C               MOVW    R17:R16, R25:R24
   \   00000074   019D               MOVW    R19:R18, R27:R26
   \   00000076   ........           CALL    ?F_MUL_L04
   \   0000007A   01C8               MOVW    R25:R24, R17:R16
   \   0000007C   01D9               MOVW    R27:R26, R19:R18
    182                          USART_Transmit((unsigned char)(integerPart%10+'0'));
   \   0000007E   E04A               LDI     R20, 10
   \   00000080   E050               LDI     R21, 0
   \   00000082   E060               LDI     R22, 0
   \   00000084   E070               LDI     R23, 0
   \   00000086   0182               MOVW    R17:R16, R5:R4
   \   00000088   0193               MOVW    R19:R18, R7:R6
   \   0000008A   ........           CALL    ?SL_DIVMOD_L03
   \   0000008E   2F04               MOV     R16, R20
   \   00000090   5D00               SUBI    R16, 208
   \   00000092   ....               RCALL   USART_Transmit
    183          	}	
   \   00000094   94C3               INC     R12
   \   00000096   CFDA               RJMP    ??printFloat_0
    184          }
   \                     ??printFloat_1:
   \   00000098   E0ED               LDI     R30, 13
   \   0000009A   ........           JMP     ?EPILOGUE_B13_L09
    185          

   \                                 In  segment CODE, align 2, keep-with-next
    186          void printUnsignedInt(unsigned int number)
   \                     printUnsignedInt:
    187          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   9726               SBIW    R29:R28, 6
   \   00000006   0128               MOVW    R5:R4, R17:R16
    188          	unsigned char buffer[6];
    189          	unsigned char index = 0;
   \   00000008   2466               CLR     R6
    190          	long max=10;
   \   0000000A   E08A               LDI     R24, 10
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   E0A0               LDI     R26, 0
   \   00000010   E0B0               LDI     R27, 0
    191          
    192          	for(index = 0; index < 7; index++)
   \   00000012   2466               CLR     R6
   \                     ??printUnsignedInt_0:
   \   00000014   E007               LDI     R16, 7
   \   00000016   1660               CP      R6, R16
   \   00000018   F440               BRCC    ??printUnsignedInt_1
    193          		buffer[index] = 0;
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   01FE               MOVW    R31:R30, R29:R28
   \   0000001E   2477               CLR     R7
   \   00000020   0DE6               ADD     R30, R6
   \   00000022   1DF7               ADC     R31, R7
   \   00000024   8300               ST      Z, R16
   \   00000026   9463               INC     R6
   \   00000028   CFF5               RJMP    ??printUnsignedInt_0
    194          
    195          	index = 0;	
   \                     ??printUnsignedInt_1:
   \   0000002A   2466               CLR     R6
    196          	while(1)
    197          	{
    198          		if(max <= number)
   \                     ??printUnsignedInt_2:
   \   0000002C   0182               MOVW    R17:R16, R5:R4
   \   0000002E   E020               LDI     R18, 0
   \   00000030   E030               LDI     R19, 0
   \   00000032   1708               CP      R16, R24
   \   00000034   0719               CPC     R17, R25
   \   00000036   072A               CPC     R18, R26
   \   00000038   073B               CPC     R19, R27
   \   0000003A   F05C               BRLT    ??printUnsignedInt_3
    199          		{
    200          			max*=10;
   \   0000003C   E00A               LDI     R16, 10
   \   0000003E   E010               LDI     R17, 0
   \   00000040   E020               LDI     R18, 0
   \   00000042   E030               LDI     R19, 0
   \   00000044   01AC               MOVW    R21:R20, R25:R24
   \   00000046   01BD               MOVW    R23:R22, R27:R26
   \   00000048   ........           CALL    ?L_EC_MUL_L03
   \   0000004C   01C8               MOVW    R25:R24, R17:R16
   \   0000004E   01D9               MOVW    R27:R26, R19:R18
   \   00000050   CFED               RJMP    ??printUnsignedInt_2
    201          		}
    202          		else
    203          			break;
    204          	}
    205          	max/=10;
   \                     ??printUnsignedInt_3:
   \   00000052   E04A               LDI     R20, 10
   \   00000054   E050               LDI     R21, 0
   \   00000056   E060               LDI     R22, 0
   \   00000058   E070               LDI     R23, 0
   \   0000005A   018C               MOVW    R17:R16, R25:R24
   \   0000005C   019D               MOVW    R19:R18, R27:R26
   \   0000005E   ........           CALL    ?SL_DIVMOD_L03
   \   00000062   01C8               MOVW    R25:R24, R17:R16
   \   00000064   01D9               MOVW    R27:R26, R19:R18
    206          	while(max)
   \                     ??printUnsignedInt_4:
   \   00000066   2F08               MOV     R16, R24
   \   00000068   2B09               OR      R16, R25
   \   0000006A   2B0A               OR      R16, R26
   \   0000006C   2B0B               OR      R16, R27
   \   0000006E   F109               BREQ    ??printUnsignedInt_5
    207          	{
    208          		buffer[index++]=(number/max)+'0';
   \   00000070   0182               MOVW    R17:R16, R5:R4
   \   00000072   E020               LDI     R18, 0
   \   00000074   E030               LDI     R19, 0
   \   00000076   01AC               MOVW    R21:R20, R25:R24
   \   00000078   01BD               MOVW    R23:R22, R27:R26
   \   0000007A   ........           CALL    ?SL_DIVMOD_L03
   \   0000007E   5D00               SUBI    R16, 208
   \   00000080   01FE               MOVW    R31:R30, R29:R28
   \   00000082   2477               CLR     R7
   \   00000084   0DE6               ADD     R30, R6
   \   00000086   1DF7               ADC     R31, R7
   \   00000088   8300               ST      Z, R16
   \   0000008A   9463               INC     R6
    209          		number%=max;
   \   0000008C   0182               MOVW    R17:R16, R5:R4
   \   0000008E   E020               LDI     R18, 0
   \   00000090   E030               LDI     R19, 0
   \   00000092   01AC               MOVW    R21:R20, R25:R24
   \   00000094   01BD               MOVW    R23:R22, R27:R26
   \   00000096   ........           CALL    ?SL_DIVMOD_L03
   \   0000009A   012A               MOVW    R5:R4, R21:R20
    210          		max/=10;
   \   0000009C   E04A               LDI     R20, 10
   \   0000009E   E050               LDI     R21, 0
   \   000000A0   E060               LDI     R22, 0
   \   000000A2   E070               LDI     R23, 0
   \   000000A4   018C               MOVW    R17:R16, R25:R24
   \   000000A6   019D               MOVW    R19:R18, R27:R26
   \   000000A8   ........           CALL    ?SL_DIVMOD_L03
   \   000000AC   01C8               MOVW    R25:R24, R17:R16
   \   000000AE   01D9               MOVW    R27:R26, R19:R18
   \   000000B0   CFDA               RJMP    ??printUnsignedInt_4
    211          	}
    212          	
    213          	index = 0;
   \                     ??printUnsignedInt_5:
   \   000000B2   2466               CLR     R6
    214          	while(buffer[index])
   \                     ??printUnsignedInt_6:
   \   000000B4   01FE               MOVW    R31:R30, R29:R28
   \   000000B6   2477               CLR     R7
   \   000000B8   0DE6               ADD     R30, R6
   \   000000BA   1DF7               ADC     R31, R7
   \   000000BC   8100               LD      R16, Z
   \   000000BE   2300               TST     R16
   \   000000C0   F041               BREQ    ??printUnsignedInt_7
    215          		USART_Transmit(buffer[index++]);
   \   000000C2   01FE               MOVW    R31:R30, R29:R28
   \   000000C4   2477               CLR     R7
   \   000000C6   0DE6               ADD     R30, R6
   \   000000C8   1DF7               ADC     R31, R7
   \   000000CA   8100               LD      R16, Z
   \   000000CC   ....               RCALL   USART_Transmit
   \   000000CE   9463               INC     R6
   \   000000D0   CFF1               RJMP    ??printUnsignedInt_6
    216          }
   \                     ??printUnsignedInt_7:
   \   000000D2   9626               ADIW    R29:R28, 6
   \   000000D4   E0E8               LDI     R30, 8
   \   000000D6   ........           JMP     ?EPILOGUE_B8_L09
    217          
    218          
    219          
    220          

   \                                 In  segment CODE, align 2, keep-with-next
    221          void PRINTF(void*data,enum TYPE type)
   \                     PRINTF:
    222          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
    223          	switch(type)
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   5000               SUBI    R16, 0
   \   0000000C   F0A9               BREQ    ??PRINTF_0
   \   0000000E   950A               DEC     R16
   \   00000010   F061               BREQ    ??PRINTF_1
   \   00000012   950A               DEC     R16
   \   00000014   F039               BREQ    ??PRINTF_2
   \   00000016   950A               DEC     R16
   \   00000018   F091               BREQ    ??PRINTF_3
   \   0000001A   950A               DEC     R16
   \   0000001C   F0B9               BREQ    ??PRINTF_4
   \   0000001E   950A               DEC     R16
   \   00000020   F0C1               BREQ    ??PRINTF_5
   \   00000022   C019               RJMP    ??PRINTF_6
    224          	{
    225          	case STRING :
    226          		printString((unsigned char*)data);
   \                     ??PRINTF_2:
   \   00000024   018D               MOVW    R17:R16, R27:R26
   \   00000026   ....               RCALL   printString
    227          		break;
   \   00000028   C016               RJMP    ??PRINTF_6
    228          	case LONG:
    229          		printLong(*(long*)data);
   \                     ??PRINTF_1:
   \   0000002A   910D               LD      R16, X+
   \   0000002C   911D               LD      R17, X+
   \   0000002E   912D               LD      R18, X+
   \   00000030   913C               LD      R19, X
   \   00000032   9713               SBIW    R27:R26, 3
   \   00000034   ....               RCALL   printLong
    230          		break;
   \   00000036   C00F               RJMP    ??PRINTF_6
    231          	case INT:
    232          		printInt((int)data);
   \                     ??PRINTF_0:
   \   00000038   018D               MOVW    R17:R16, R27:R26
   \   0000003A   ....               RCALL   printInt
    233          		break;
   \   0000003C   C00C               RJMP    ??PRINTF_6
    234          	case FLOAT:
    235          		printFloat(*(float *)data);
   \                     ??PRINTF_3:
   \   0000003E   910D               LD      R16, X+
   \   00000040   911D               LD      R17, X+
   \   00000042   912D               LD      R18, X+
   \   00000044   913C               LD      R19, X
   \   00000046   9713               SBIW    R27:R26, 3
   \   00000048   ....               RCALL   printFloat
    236          		break;
   \   0000004A   C005               RJMP    ??PRINTF_6
    237          	case UNSIGNED:
    238          		printUnsignedInt((unsigned int)data);
   \                     ??PRINTF_4:
   \   0000004C   018D               MOVW    R17:R16, R27:R26
   \   0000004E   ....               RCALL   printUnsignedInt
    239          		break;
   \   00000050   C002               RJMP    ??PRINTF_6
    240          	case HEX:
    241          		printHex((unsigned int)data);
   \                     ??PRINTF_5:
   \   00000052   018D               MOVW    R17:R16, R27:R26
   \   00000054   ....               RCALL   printHex
    242          		break;
    243          	default:
    244          		break;
    245          	}
    246          }
   \                     ??PRINTF_6:
   \   00000056   E0E4               LDI     R30, 4
   \   00000058   ........           JMP     ?EPILOGUE_B4_L09
    247          
    248          /*
    249          Manual de utilizare
    250          pentru int:
    251          int x = 12555;(2 octeti)
    252          PRINTF((void*)(x),INT);
    253          
    254          pentru unsigned int:
    255          unsigned int x = 12555;(2 octeti)
    256          PRINTF((void*)(x),UNSIGNED);
    257          
    258          pentru long:
    259          long x = 854441122;(4 octeti)
    260          PRINTF((void*)(&x),LONG);
    261          
    262          pentru float:
    263          float x = 21547.4577;(4 octeti)
    264          PRINTF((void*)(&x),FLOAT);
    265          
    266          pentru char*, sir terminat cu '\0' :
    267          
    268          char* x = "test";
    269          PRINTF((void*)(x),STRING);
    270          
    271          pentru hex:
    272          unsigned int x = 345;
    273          PRINTF((void*)(x),HEX);
    274          
    275          Copyright Raileanu,2014
    276          All rights reserved
    277          */
    278          
    279          
    280          
    281          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       4      2  PRINTF
                    4 2 -> printFloat
                    4 2 -> printHex
                    4 2 -> printInt
                    4 2 -> printLong
                    4 2 -> printString
                    4 2 -> printUnsignedInt
       0      2  USART_Init
       0      2  USART_Receive
       0      2  USART_Transmit
      13      4  printFloat
                   13 2 -> USART_Transmit
                   13 2 -> printLong
       9      4  printHex
                    9 2 -> USART_Transmit
      15      4  printInt
                   15 2 -> USART_Transmit
      10      4  printLong
                   10 2 -> USART_Transmit
       2      2  printString
                    2 2 -> USART_Transmit
      14      4  printUnsignedInt
                   14 2 -> USART_Transmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      92  PRINTF
      24  USART_Init
       8  USART_Receive
       8  USART_Transmit
       1  _A_UBRRH
       1  _A_UBRRL
       1  _A_UCSRA
       1  _A_UCSRB
       1  _A_UDR
      11  buffer
     158  printFloat
     268  printHex
     250  printInt
     238  printLong
      26  printString
     218  printUnsignedInt
       6  -- Other

 
     5 bytes in segment ABSOLUTE
 1 290 bytes in segment CODE
     6 bytes in segment INITTAB
    11 bytes in segment NEAR_Z
 
 1 290 bytes of CODE memory (+ 6 bytes shared)
    11 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none

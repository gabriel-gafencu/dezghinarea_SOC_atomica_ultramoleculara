###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        10/Jan/2015  21:07:59 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Nou\Voltmetru ADC\main.c                        #
#    Command line =  "D:\1307B\Nou\Voltmetru ADC\main.c" --cpu=m16 -ms -o     #
#                    "D:\1307B\Nou\Voltmetru ADC\Debug\Obj\" -lC              #
#                    "D:\1307B\Nou\Voltmetru ADC\Debug\List\" -lA             #
#                    "D:\1307B\Nou\Voltmetru ADC\Debug\List\"                 #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\1307B\Nou\Voltmetru ADC\Debug\List\main.lst           #
#    Object file  =  D:\1307B\Nou\Voltmetru ADC\Debug\Obj\main.r90            #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Nou\Voltmetru ADC\main.c
      1          #include <inavr.h>
      2          #include <iom16.h>

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x26
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                      DS8 2
      3          #include "usart.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          unsigned char flag=0;
   \                     flag:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      5          unsigned long value=0;
   \                     value:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          float valoare;
   \                     valoare:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      7          unsigned char low,high;
   \                     `low`:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     `high`:
   \   00000000                      DS8 1
      8          
      9          #pragma vector = ADC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     10          __interrupt void OnADC(void)
   \                     OnADC:
     11          {
   \   00000000   931A               ST      -Y, R17
   \   00000002   930A               ST      -Y, R16
   \   00000004   B71F               IN      R17, 0x3F
     12            flag = 1;
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     flag, R16
     13          }
   \   0000000C   BF1F               OUT     0x3F, R17
   \   0000000E   9109               LD      R16, Y+
   \   00000010   9119               LD      R17, Y+
   \   00000012   9518               RETI
     14          

   \                                 In  segment CODE, align 2, keep-with-next
     15          void main(void)
   \                     main:
     16          {
     17           
     18            DDRA &= ~(1<<PA1);
   \   00000000   98D1               CBI     0x1A, 0x01
     19            USART_Init(MYUBRR);
   \   00000002   E00C               LDI     R16, 12
   \   00000004   E010               LDI     R17, 0
   \   00000006   ........           CALL    USART_Init
     20            __enable_interrupt();
   \   0000000A   9478               SEI
     21            //ADMUX |= (1<<REFS0);//teoretic referinta de 5v
     22            ADMUX=(1<<REFS1)|(1<<REFS0)|(1<<MUX0);//intrare
   \   0000000C   EC01               LDI     R16, 193
   \   0000000E   B907               OUT     0x07, R16
     23            ADCSRA |= (1<<ADEN);//enable adc
   \   00000010   9A37               SBI     0x06, 0x07
     24            ADCSRA |= (1<<ADPS2);//prescaler 16
   \   00000012   9A32               SBI     0x06, 0x02
     25            ADCSRA |= (1<<ADIE); //activare intrerupere
   \   00000014   9A33               SBI     0x06, 0x03
     26            ADCSRA |= (1<<ADSC);//start conversie
   \   00000016   9A36               SBI     0x06, 0x06
     27            
     28            while(1)
     29            {
     30              if(flag)
   \                     ??main_0:
   \   00000018   9100....           LDS     R16, flag
   \   0000001C   2300               TST     R16
   \   0000001E   F3E1               BREQ    ??main_0
     31              {
     32                low = ADCL;
   \   00000020   B104               IN      R16, 0x04
   \   00000022   9300....           STS     `low`, R16
     33                high = ADCH;
   \   00000026   B105               IN      R16, 0x05
   \   00000028   9300....           STS     `high`, R16
     34                value = ((high&0x03)<<8)|low;
   \   0000002C   9100....           LDS     R16, `high`
   \   00000030   E010               LDI     R17, 0
   \   00000032   7003               ANDI    R16, 0x03
   \   00000034   7010               ANDI    R17, 0x00
   \   00000036   2F10               MOV     R17, R16
   \   00000038   E000               LDI     R16, 0
   \   0000003A   9120....           LDS     R18, `low`
   \   0000003E   E030               LDI     R19, 0
   \   00000040   2B02               OR      R16, R18
   \   00000042   2B13               OR      R17, R19
   \   00000044   2F21               MOV     R18, R17
   \   00000046   0F22               LSL     R18
   \   00000048   0B22               SBC     R18, R18
   \   0000004A   2F32               MOV     R19, R18
   \   0000004C   ....               LDI     R30, LOW(value)
   \   0000004E   ....               LDI     R31, (value) >> 8
   \   00000050   8300               ST      Z, R16
   \   00000052   8311               STD     Z+1, R17
   \   00000054   8322               STD     Z+2, R18
   \   00000056   8333               STD     Z+3, R19
     35                valoare = (value*5)/1024.;
   \   00000058   E045               LDI     R20, 5
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   E060               LDI     R22, 0
   \   0000005E   E070               LDI     R23, 0
   \   00000060   ....               LDI     R30, LOW(value)
   \   00000062   ....               LDI     R31, (value) >> 8
   \   00000064   8100               LD      R16, Z
   \   00000066   8111               LDD     R17, Z+1
   \   00000068   8122               LDD     R18, Z+2
   \   0000006A   8133               LDD     R19, Z+3
   \   0000006C   ........           CALL    ?L_EC_MUL_L03
   \   00000070   ........           CALL    ?UL2F_L04
   \   00000074   E040               LDI     R20, 0
   \   00000076   E050               LDI     R21, 0
   \   00000078   E860               LDI     R22, 128
   \   0000007A   E474               LDI     R23, 68
   \   0000007C   ........           CALL    ?F_DIV_L04
   \   00000080   ....               LDI     R30, LOW(valoare)
   \   00000082   ....               LDI     R31, (valoare) >> 8
   \   00000084   8300               ST      Z, R16
   \   00000086   8311               STD     Z+1, R17
   \   00000088   8322               STD     Z+2, R18
   \   0000008A   8333               STD     Z+3, R19
     36                //parteIntreaga=(unsigned long)valoare;
     37                //parteFractionara=(valoare-parteIntreaga)*1000;
     38                
     39                
     40                if(valoare>=0 && valoare<=1.5)
   \   0000008C   E040               LDI     R20, 0
   \   0000008E   E050               LDI     R21, 0
   \   00000090   E060               LDI     R22, 0
   \   00000092   E070               LDI     R23, 0
   \   00000094   ....               LDI     R30, LOW(valoare)
   \   00000096   ....               LDI     R31, (valoare) >> 8
   \   00000098   8100               LD      R16, Z
   \   0000009A   8111               LDD     R17, Z+1
   \   0000009C   8122               LDD     R18, Z+2
   \   0000009E   8133               LDD     R19, Z+3
   \   000000A0   ........           CALL    ?F_CMP_GE_L04
   \   000000A4   F4D8               BRCC    ??main_1
   \   000000A6   E041               LDI     R20, 1
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   EC60               LDI     R22, 192
   \   000000AC   E37F               LDI     R23, 63
   \   000000AE   ....               LDI     R30, LOW(valoare)
   \   000000B0   ....               LDI     R31, (valoare) >> 8
   \   000000B2   8100               LD      R16, Z
   \   000000B4   8111               LDD     R17, Z+1
   \   000000B6   8122               LDD     R18, Z+2
   \   000000B8   8133               LDD     R19, Z+3
   \   000000BA   ........           CALL    ?F_CMP_LT_L04
   \   000000BE   F470               BRCC    ??main_1
     41                {
     42                   PRINTF((void*)(&valoare),FLOAT);
   \   000000C0   E023               LDI     R18, 3
   \   000000C2   ....               LDI     R16, LOW(valoare)
   \   000000C4   ....               LDI     R17, (valoare) >> 8
   \   000000C6   ........           CALL    PRINTF
     43                   USART_Transmit('V');
   \   000000CA   E506               LDI     R16, 86
   \   000000CC   ........           CALL    USART_Transmit
     44                   USART_Transmit(0xd);
   \   000000D0   E00D               LDI     R16, 13
   \   000000D2   ........           CALL    USART_Transmit
     45                   USART_Transmit(0xa);
   \   000000D6   E00A               LDI     R16, 10
   \   000000D8   ........           CALL    USART_Transmit
     46                }
     47               
     48               
     49                flag = 0;
   \                     ??main_1:
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   9300....           STS     flag, R16
     50                ADCSRA |= (1<<ADSC);
   \   000000E2   9A36               SBI     0x06, 0x06
   \   000000E4   CF99               RJMP    ??main_0
   \   000000E6                      REQUIRE _A_DDRA
   \   000000E6                      REQUIRE _A_ADMUX
   \   000000E6                      REQUIRE _A_ADCSRA
   \   000000E6                      REQUIRE _A_ADC
     51              }
     52            }
     53          }

   \                                 In  segment INTVEC, offset 0x38, root
   \                     `??OnADC??INTVEC 56`:
   \   00000038   ........           JMP     OnADC
     54          /*
     55          
     56          #include <inavr.h>
     57          #include <iom16.h>
     58          #include "usart.h"
     59          
     60          #define RANGE 50000   // 10000
     61          #define STEP RANGE/1024.0
     62          #define PRECISION 100*/
     63          /*
     64          	Ground sursa a 2-a conectat la pin 11 pe placa
     65          	VCC sursa a 2-a conectat la pin PA1(39 pe placa)
     66          */
     67          	/*
     68          int voltage;
     69          int SC_flag=0;
     70          
     71          #pragma vector=ADC_vect
     72          __interrupt void ADC_INT(void)
     73          {
     74             voltage=(int)ADC;
     75             SC_flag=1;
     76          }
     77          
     78          
     79          void PRINT_freq(int number, int precizion);
     80          
     81          void main( void )
     82          {
     83            int voltaj;
     84            DDRA=(0<<PA1);
     85            __enable_interrupt();
     86            USART_Init(MYUBRR);
     87            ADMUX=(1<<REFS1)|(1<<REFS0)|(1<<MUX0);//intrare
     88            ADCSRA=(1<<ADIE)|(1<<ADPS1)|(1<<ADEN);//ADEN AD enable ADSC porneste o noua canversie pentru single ended
     89            ADCSRA|=(1<<ADSC);
     90            while(1)
     91            {
     92              if(SC_flag)
     93              {
     94                voltaj=(int)(voltage*STEP)/100;
     95                PRINT_freq(voltaj,2);
     96                ADCSRA|=(1<<ADSC);
     97                SC_flag=0;
     98                
     99              }
    100            }
    101          }
    102          
    103          
    104          void PRINT_freq(int number, int precizion)
    105          {
    106            unsigned char sir[10]={0,0,0,0,0,0,0,0,0,0,};
    107            int n=0;
    108            if(number>PRECISION)
    109            {
    110            while(number)
    111            {
    112               if(n==precizion)
    113               {
    114                sir[n]='.'; 
    115                n++;
    116               }
    117               sir[n]=((number%10)+'0');
    118               number/=10;
    119               n++;
    120               
    121            }
    122            n--;
    123            while(n>-1)
    124            {
    125               USART_transmit(sir[n]);
    126               n--;
    127            }
    128          
    129            }
    130            else
    131            {
    132             while(number)
    133               {
    134                   sir[n]=((number%10)+'0');
    135                   number/=10;
    136                   n++;
    137                 
    138              }
    139             while(n<2)
    140             {
    141              sir[n]='0';
    142              n++;
    143             }
    144             sir[n]='.'; 
    145             sir[n+1]='0';
    146             n+=2;
    147            }
    148            n--;
    149            while(n>-1)
    150            {
    151               USART_transmit(sir[n+1]);
    152               n--;
    153            }
    154            USART_transmit('V');
    155            USART_transmit(0x0D);
    156            USART_transmit(0x0A);
    157          }
    158          */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       2      2  OnADC
       0      4  main
                   0 2 -> PRINTF
                   0 2 -> USART_Init
                   0 2 -> USART_Transmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??OnADC??INTVEC 56
      20  OnADC
       2  _A_ADC
       1  _A_ADCSRA
       1  _A_ADMUX
       1  _A_DDRA
       1  flag
       1  high
       1  low
     230  main
       4  valoare
       4  value
       6  -- Other

 
   5 bytes in segment ABSOLUTE
 250 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
  11 bytes in segment NEAR_Z
 
 250 bytes of CODE memory (+ 10 bytes shared)
  11 bytes of DATA memory (+  5 bytes shared)

Errors: none
Warnings: none

///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       12/Dec/2014  17:27:48 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\1307B\Work1\main.c                                   /
//    Command line =  D:\1307B\Work1\main.c --cpu=m16 -ms -o                  /
//                    D:\1307B\Work1\Debug\Obj\ -lC                           /
//                    D:\1307B\Work1\Debug\List\ -lA                          /
//                    D:\1307B\Work1\Debug\List\ --initializers_in_flash      /
//                    --no_cse --no_inline --no_code_motion --no_cross_call   /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib    /
//                    -On                                                     /
//    List file    =  D:\1307B\Work1\Debug\List\main.s90                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?F2SL_L04
        EXTERN ?F_DIV_L04
        EXTERN ?F_MUL_L04
        EXTERN ?PROLOGUE12_L09
        EXTERN ?Register_R10_is_cg_reg
        EXTERN ?Register_R11_is_cg_reg
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?Register_R9_is_cg_reg
        EXTERN ?SL2F_L04
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??T1int??INTVEC 32`
        PUBLIC FOsc
        PUBLIC Fx
        PUBLIC N
        PUBLIC T1int
        FUNCTION T1int,0233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_ICR1
        PUBWEAK _A_OCR1A
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TIMSK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC c
        PUBLIC cnt
        PUBLIC main
        FUNCTION main,0a01H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC timer1_INIT
        FUNCTION timer1_INIT,0201H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
T1int               SYMBOL "T1int"
`??T1int??INTVEC 32` SYMBOL "??INTVEC 32", T1int

// D:\1307B\Work1\main.c
//    1 #include<inavr.h>
//    2 #include<iom16.h>

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04fH
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04aH
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,046H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2
//    3 #include "usart.h"

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    4 int cnt=0; //variabila pentru întrerupere
cnt:
        DS8 2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//    5 double FOsc=4006996.637; //Hz
FOsc:
        DS8 4
        REQUIRE `?<Initializer for FOsc>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//    6 double Fx=1000;//Hz
Fx:
        DS8 4
        REQUIRE `?<Initializer for Fx>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//    7 int N=1; //fara prescaler
N:
        DS8 2
        REQUIRE `?<Initializer for N>`
//    8 
//    9 //întreruperea de overflow la timer1
//   10 #pragma vector=TIMER1_OVF_vect

        RSEG CODE:CODE:NOROOT(1)
//   11 __interrupt void T1int(void)
T1int:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function T1int
//   12 {
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        IN      R18, 0x3F
//   13   cnt++;
        LDI     R30, LOW(cnt)
        LDI     R31, (cnt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
//   14 }
        OUT     0x3F, R18
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+4
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+3
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+2
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+1
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
//   15 //configurarea timer 1

        RSEG CODE:CODE:NOROOT(1)
//   16 void timer1_INIT()
timer1_INIT:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function timer1_INIT
//   17 {
//   18   /*
//   19   Modul Fast PWM: WGM13:10=1110;
//   20   Fãrã prescaler: CS12:10=001;
//   21   Compare Output Mode: 10
//   22   */
//   23   TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS10);
        IN      R16, 0x2E
        ORI     R16, 0x19
        OUT     0x2E, R16
//   24   TCCR1A|=(1<<COM1A1)|(1<<WGM11);
        IN      R16, 0x2F
        ORI     R16, 0x82
        OUT     0x2F, R16
//   25   TIMSK|=(1<<TOIE1);
        IN      R16, 0x39
        ORI     R16, 0x04
        OUT     0x39, R16
//   26 }
        RET
          CFI EndBlock cfiBlock1
        REQUIRE _A_TCCR1B
        REQUIRE _A_TCCR1A
        REQUIRE _A_TIMSK
//   27 
//   28 /*
//   29 void main()
//   30 {
//   31   cnt=0;
//   32   //factor de umplere variabil (+-)5%, intre 5% si 95% in 5 secunde
//   33   double nrCicli=FOsc/Fx/N;
//   34   double step=(double)nrCicli/100*5;
//   35   double sw=0;
//   36   //Alegerea pinului de ie.ire
//   37   DDRD|=(1<<PD5);
//   38   PORTD&=(1<<PD5);
//   39   //Initializarea timer-ului
//   40   timer1_INIT();
//   41   //Valoarea care se încarca în registru în functie de frecventa necesara
//   42   ICR1=nrCicli;
//   43   OCR1A=step;
//   44 
//   45   
//   46   //pornirea întreruperii
//   47   __enable_interrupt();
//   48   
//   49   while(1)
//   50   {
//   51     if(cnt==312)
//   52     {
//   53       if(sw==0)
//   54       {
//   55        OCR1A+=step; 
//   56         
//   57        if(OCR1A>=(double)95/100*nrCicli)
//   58        sw=1; 
//   59         
//   60       }else
//   61       {
//   62         
//   63        OCR1A-=step;
//   64        if(OCR1A<=(double)5/100*nrCicli)
//   65        sw = 0;
//   66        
//   67       }
//   68       cnt=0;
//   69        
//   70     }
//   71       
//   72   }
//   73 }*/
//   74 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   75 char c;
c:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
//   76 void main()
main:
          CFI Block cfiBlock2 Using cfiCommon1
          CFI Function main
//   77 {
        CALL    ?PROLOGUE12_L09
          CFI R11 Frame(CFA_Y, -1)
          CFI R10 Frame(CFA_Y, -2)
          CFI R9 Frame(CFA_Y, -3)
          CFI R8 Frame(CFA_Y, -4)
          CFI R7 Frame(CFA_Y, -5)
          CFI R6 Frame(CFA_Y, -6)
          CFI R5 Frame(CFA_Y, -7)
          CFI R4 Frame(CFA_Y, -8)
          CFI R27 Frame(CFA_Y, -9)
          CFI R26 Frame(CFA_Y, -10)
          CFI R25 Frame(CFA_Y, -11)
          CFI R24 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
//   78   double nrCicli=FOsc/Fx/N;
        LDI     R30, LOW(Fx)
        LDI     R31, (Fx) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        LDI     R30, LOW(FOsc)
        LDI     R31, (FOsc) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CALL    ?F_DIV_L04
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
        LDS     R16, N
        LDS     R17, (N + 1)
        MOV     R18, R17
        LSL     R18
        SBC     R18, R18
        MOV     R19, R18
        CALL    ?SL2F_L04
        MOVW    R21:R20, R17:R16
        MOVW    R23:R22, R19:R18
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F_DIV_L04
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//   79   double duty=(double)50/100;
        CLR     R4
        CLR     R5
        CLR     R6
        LDI     R16, 63
        MOV     R7, R16
//   80   double DC=duty*nrCicli; 
        MOVW    R21:R20, R5:R4
        MOVW    R23:R22, R7:R6
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F_MUL_L04
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
//   81   //USART_initialize(BAUD_RATE);
//   82   
//   83   ICR1=nrCicli;
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?F2SL_L04
        OUT     0x27, R17
        OUT     0x26, R16
//   84   OCR1A=DC;
        MOVW    R17:R16, R9:R8
        MOVW    R19:R18, R11:R10
        CALL    ?F2SL_L04
        OUT     0x2B, R17
        OUT     0x2A, R16
//   85   
//   86   while(1)
??main_0:
        RJMP    ??main_0
          CFI EndBlock cfiBlock2
        REQUIRE _A_ICR1
        REQUIRE _A_OCR1A
//   87   {/*
//   88    c=USART_Receive();
//   89    //pb 10.5a
//   90    switch(c)
//   91    {
//   92    case '+':
//   93      if(Fx<9000)
//   94      {
//   95       Fx+=1000; 
//   96       nrCicli=FOsc/Fx/N;
//   97       DC=duty*nrCicli;
//   98       ICR1=nrCicli;
//   99       OCR1A=DC;    
//  100      }
//  101      
//  102      break;
//  103      
//  104    case '-':
//  105      
//  106      if(Fx>2000)
//  107      {
//  108       Fx-=1000; 
//  109       nrCicli=FOsc/Fx/N;
//  110       DC=duty*nrCicli;
//  111       ICR1=nrCicli;
//  112       OCR1A=DC;
//  113        
//  114      } 
//  115      break;
//  116      
//  117      //cnt=0;
//  118    
//  119    }
//  120    
//  121    
//  122     */
//  123   }
//  124 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 32
`??T1int??INTVEC 32`:
        JMP     T1int

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for FOsc>`:
        DD 4A749153H

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for Fx>`:
        DD 447A0000H

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for N>`:
        DC16 1

        END
// 
//   7 bytes in segment ABSOLUTE
// 186 bytes in segment CODE
//  12 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//  10 bytes in segment NEAR_I
//  10 bytes in segment NEAR_ID
//   3 bytes in segment NEAR_Z
// 
// 196 bytes of CODE memory (+ 16 bytes shared)
//  13 bytes of DATA memory (+  7 bytes shared)
//
//Errors: none
//Warnings: 2

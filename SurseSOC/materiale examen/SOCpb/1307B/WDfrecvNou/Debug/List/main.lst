###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        03/Jan/2015  16:22:40 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\WDfrecvNou\main.c                               #
#    Command line =  D:\1307B\WDfrecvNou\main.c --cpu=m16 -ms -o              #
#                    D:\1307B\WDfrecvNou\Debug\Obj\ -lCN                      #
#                    D:\1307B\WDfrecvNou\Debug\List\ -lb                      #
#                    D:\1307B\WDfrecvNou\Debug\List\ --initializers_in_flash  #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\1307B\WDfrecvNou\Debug\List\main.lst                  #
#    Object file  =  D:\1307B\WDfrecvNou\Debug\Obj\main.r90                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\WDfrecvNou\main.c
      1          #include <inavr.h>
      2          #include <iom16.h>

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS8 1
      3          
      4          
      5          /* Generati un semnal de 1Khz cu factor de umplere care variaza crescator si descrescator
      6          * cu pasi de 5% intre 5 si 95% la fiecare 2 secunde si transmitere pe seriala
      7          */
      8          
      9          #define F_OSC 4000000
     10          #define BAUD 19200
     11          #define BAUD_RATE (F_OSC/16/BAUD - 1)
     12          
     13          #define frecventa 6666 //cloci      frecventa = 4 000 000/ frecventa data de prof;

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     14          volatile long timp=6006; //perioada dintre transmisiuni - 1s timp = 4 000 000/ frecventa (pt o secunda)   daca vrem pentru 2 sec inmultim cu 2 sau pentru 0.5 sec impartim la 2
   \                     timp:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for timp>`
     15          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          long cnt=0;
   \                     cnt:
   \   00000000                      DS8 4
     17          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     18          char data;
   \                     data:
   \   00000000                      DS8 1

   \                                 In  segment CODE, align 2, keep-with-next
     19          void USART_initialize(unsigned short int baud_rate)
   \                     USART_initialize:
     20          {
     21          	/* set baud rate */
     22          	UBRRH = (unsigned char)(baud_rate >> 8);
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   2F23               MOV     R18, R19
   \   00000004   E030               LDI     R19, 0
   \   00000006   BD20               OUT     0x20, R18
     23          	UBRRL = (unsigned char)(baud_rate & 0xFF);
   \   00000008   2F20               MOV     R18, R16
   \   0000000A   B929               OUT     0x09, R18
     24          
     25          	UCSRB = (1 << RXEN) | (1 << TXEN); /* enable transmission and reception */
   \   0000000C   E128               LDI     R18, 24
   \   0000000E   B92A               OUT     0x0A, R18
     26          
     27          	/* set TXD pin direction: output */
     28          	DDRD |= (1 << PD1);
   \   00000010   9A89               SBI     0x11, 0x01
     29          
     30          	/* set RXD pin direction: input */
     31          	DDRD &= ~(1 << PD0);
   \   00000012   9888               CBI     0x11, 0x00
     32          
     33          	/* enable interrupt on receive */
     34          	UCSRB |= (1 << RXCIE);
   \   00000014   9A57               SBI     0x0A, 0x07
     35          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_UBRRH
   \   00000018                      REQUIRE _A_UBRRL
   \   00000018                      REQUIRE _A_UCSRB
   \   00000018                      REQUIRE _A_DDRD
     36          

   \                                 In  segment CODE, align 2, keep-with-next
     37          void USART_transmit(unsigned char data)
   \                     USART_transmit:
   \                     ??USART_transmit_0:
     38          {
     39          	/* wait until previous data transmitted, and then put current data on the line */
     40          	while (!( UCSRA & (1 << UDRE)))
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??USART_transmit_0
     41          	{
     42          		;
     43          	}
     44          	UDR = data;
   \   00000004   B90C               OUT     0x0C, R16
     45          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_UCSRA
   \   00000008                      REQUIRE _A_UDR
     46          
     47          //transmiterea unui intreg pe seriala
     48          

   \                                 In  segment CODE, align 2, keep-with-next
     49          void integerTransmit (unsigned int p1, unsigned int p2,  unsigned int p3) // p3- este valoarea , p2 este nr de cifre care vreau sa il afisez, p1- poti sa il stergi !!! DAR NU ACUM !!
   \                     integerTransmit:
     50          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   0148               MOVW    R9:R8, R17:R16
   \   00000008   01C9               MOVW    R25:R24, R19:R18
   \   0000000A   01DA               MOVW    R27:R26, R21:R20
     51            int index=0;
   \   0000000C   2444               CLR     R4
   \   0000000E   2455               CLR     R5
     52            char aux[5];
     53             unsigned int x=p3;
   \   00000010   013D               MOVW    R7:R6, R27:R26
     54            if(x<0)
     55            {
     56              USART_transmit('-');
     57              x*=(-1);
     58            }
     59            while(x!=0)
   \                     ??integerTransmit_0:
   \   00000012   2D06               MOV     R16, R6
   \   00000014   2907               OR      R16, R7
   \   00000016   F0A9               BREQ    ??integerTransmit_1
     60              {
     61                aux[index]=x%10+'0';//ia ultima cifra si o trans in char
   \   00000018   E04A               LDI     R20, 10
   \   0000001A   E050               LDI     R21, 0
   \   0000001C   0183               MOVW    R17:R16, R7:R6
   \   0000001E   ........           CALL    ?US_DIVMOD_L02
   \   00000022   5D40               SUBI    R20, 208
   \   00000024   01FE               MOVW    R31:R30, R29:R28
   \   00000026   0DE4               ADD     R30, R4
   \   00000028   1DF5               ADC     R31, R5
   \   0000002A   8340               ST      Z, R20
     62                index++;
   \   0000002C   E001               LDI     R16, 1
   \   0000002E   0E40               ADD     R4, R16
   \   00000030   E000               LDI     R16, 0
   \   00000032   1E50               ADC     R5, R16
     63                x=x/10;//elimina ultima cifra
   \   00000034   E04A               LDI     R20, 10
   \   00000036   E050               LDI     R21, 0
   \   00000038   0183               MOVW    R17:R16, R7:R6
   \   0000003A   ........           CALL    ?US_DIVMOD_L02
   \   0000003E   0138               MOVW    R7:R6, R17:R16
   \   00000040   CFE8               RJMP    ??integerTransmit_0
     64              }
     65            
     66              while(p2>0 )
   \                     ??integerTransmit_1:
   \   00000042   2F08               MOV     R16, R24
   \   00000044   2B09               OR      R16, R25
   \   00000046   F061               BREQ    ??integerTransmit_2
     67              {
     68                USART_transmit(aux[index-1]);
   \   00000048   01FE               MOVW    R31:R30, R29:R28
   \   0000004A   0DE4               ADD     R30, R4
   \   0000004C   1DF5               ADC     R31, R5
   \   0000004E   9731               SBIW    R31:R30, 1
   \   00000050   8100               LD      R16, Z
   \   00000052   ....               RCALL   USART_transmit
     69                index--;
   \   00000054   EF0F               LDI     R16, 255
   \   00000056   0E40               ADD     R4, R16
   \   00000058   EF0F               LDI     R16, 255
   \   0000005A   1E50               ADC     R5, R16
     70                p2--;
   \   0000005C   9701               SBIW    R25:R24, 1
   \   0000005E   CFF1               RJMP    ??integerTransmit_1
     71              }
     72            
     73          }
   \                     ??integerTransmit_2:
   \   00000060   9625               ADIW    R29:R28, 5
   \   00000062   E0EA               LDI     R30, 10
   \   00000064   ........           JMP     ?EPILOGUE_B10_L09
     74          
     75          #pragma vector=TIMER1_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     76          __interrupt void T1int(void)
   \                     T1int:
     77          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   934A               ST      -Y, R20
   \   00000006   933A               ST      -Y, R19
   \   00000008   932A               ST      -Y, R18
   \   0000000A   931A               ST      -Y, R17
   \   0000000C   930A               ST      -Y, R16
   \   0000000E   B74F               IN      R20, 0x3F
     78            cnt++;
   \   00000010   ....               LDI     R30, LOW(cnt)
   \   00000012   ....               LDI     R31, (cnt) >> 8
   \   00000014   8100               LD      R16, Z
   \   00000016   8111               LDD     R17, Z+1
   \   00000018   8122               LDD     R18, Z+2
   \   0000001A   8133               LDD     R19, Z+3
   \   0000001C   5F0F               SUBI    R16, 255
   \   0000001E   4F1F               SBCI    R17, 255
   \   00000020   4F2F               SBCI    R18, 255
   \   00000022   4F3F               SBCI    R19, 255
   \   00000024   8300               ST      Z, R16
   \   00000026   8311               STD     Z+1, R17
   \   00000028   8322               STD     Z+2, R18
   \   0000002A   8333               STD     Z+3, R19
     79          }
   \   0000002C   BF4F               OUT     0x3F, R20
   \   0000002E   9109               LD      R16, Y+
   \   00000030   9119               LD      R17, Y+
   \   00000032   9129               LD      R18, Y+
   \   00000034   9139               LD      R19, Y+
   \   00000036   9149               LD      R20, Y+
   \   00000038   91E9               LD      R30, Y+
   \   0000003A   91F9               LD      R31, Y+
   \   0000003C   9518               RETI
     80          

   \                                 In  segment CODE, align 2, keep-with-next
     81          void main( void )
   \                     main:
     82          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
     83          
     84            unsigned int duty_cycle=5;		// duty_cycle reprezinta procentul de la care pornim ... adica daca e  5%-95% duty_cycle e 5 ...
   \   00000004   E085               LDI     R24, 5
   \   00000006   E090               LDI     R25, 0
     85            signed char pas=3;				// pasul reprezinta cu cat se umple semnalul nostru in unitatea de timp ....  5% pentru ex asta 
   \   00000008   E0A3               LDI     R26, 3
     86            
     87            TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS10);//fara prescaler si scriu valoarea de TOP in ICR1
   \   0000000A   B50E               IN      R16, 0x2E
   \   0000000C   6109               ORI     R16, 0x19
   \   0000000E   BD0E               OUT     0x2E, R16
     88            TCCR1A|=(1 << COM1A1) |(1<<WGM11); 
   \   00000010   B50F               IN      R16, 0x2F
   \   00000012   6802               ORI     R16, 0x82
   \   00000014   BD0F               OUT     0x2F, R16
     89            TIMSK |= (1<<TOIE1);
   \   00000016   B709               IN      R16, 0x39
   \   00000018   6004               ORI     R16, 0x04
   \   0000001A   BF09               OUT     0x39, R16
     90            
     91            DDRD |= (1 << PD5);
   \   0000001C   9A8D               SBI     0x11, 0x05
     92            PORTD |= (1 << PD5);
   \   0000001E   9A95               SBI     0x12, 0x05
     93            
     94            USART_initialize(BAUD_RATE);
   \   00000020   E00C               LDI     R16, 12
   \   00000022   E010               LDI     R17, 0
   \   00000024   ....               RCALL   USART_initialize
     95           
     96            ICR1=666; //calculat     4MHz / frecventa data de prof  ..... 
   \   00000026   E90A               LDI     R16, 154
   \   00000028   E012               LDI     R17, 2
   \   0000002A   BD17               OUT     0x27, R17
   \   0000002C   BD06               OUT     0x26, R16
     97            
     98            
     99            OCR1A=(unsigned int)ICR1/100*duty_cycle;//calcul dc pentru timer       factorul de umplere pentru aparat
   \   0000002E   E644               LDI     R20, 100
   \   00000030   E050               LDI     R21, 0
   \   00000032   B506               IN      R16, 0x26
   \   00000034   B517               IN      R17, 0x27
   \   00000036   ........           CALL    ?US_DIVMOD_L02
   \   0000003A   01AC               MOVW    R21:R20, R25:R24
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   BD1B               OUT     0x2B, R17
   \   00000042   BD0A               OUT     0x2A, R16
    100           
    101            
    102            __enable_interrupt(); 
   \   00000044   9478               SEI
    103            
    104            while (1)
    105            {
    106              //SAU timp=2000=2s
    107              if(cnt>=timp)
   \                     ??main_0:
   \   00000046   ....               LDI     R30, LOW(cnt)
   \   00000048   ....               LDI     R31, (cnt) >> 8
   \   0000004A   8100               LD      R16, Z
   \   0000004C   8111               LDD     R17, Z+1
   \   0000004E   8122               LDD     R18, Z+2
   \   00000050   8133               LDD     R19, Z+3
   \   00000052   ....               LDI     R30, LOW(timp)
   \   00000054   ....               LDI     R31, (timp) >> 8
   \   00000056   8140               LD      R20, Z
   \   00000058   8151               LDD     R21, Z+1
   \   0000005A   8162               LDD     R22, Z+2
   \   0000005C   8173               LDD     R23, Z+3
   \   0000005E   1704               CP      R16, R20
   \   00000060   0715               CPC     R17, R21
   \   00000062   0726               CPC     R18, R22
   \   00000064   0737               CPC     R19, R23
   \   00000066   F37C               BRLT    ??main_0
    108              {
    109                duty_cycle+=pas;//treci la dc urmator
   \   00000068   2FBA               MOV     R27, R26
   \   0000006A   0FBB               LSL     R27
   \   0000006C   0BBB               SBC     R27, R27
   \   0000006E   0F8A               ADD     R24, R26
   \   00000070   1F9B               ADC     R25, R27
    110                if(duty_cycle>95||duty_cycle<5)//daca au fost depasite limitele
   \   00000072   3680               CPI     R24, 96
   \   00000074   E000               LDI     R16, 0
   \   00000076   0790               CPC     R25, R16
   \   00000078   F420               BRCC    ??main_1
   \   0000007A   3085               CPI     R24, 5
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   0790               CPC     R25, R16
   \   00000080   F458               BRCC    ??main_2
    111                {
    112                  pas=-pas;//schimba directia pasului
   \                     ??main_1:
   \   00000082   95A1               NEG     R26
    113                  duty_cycle+=pas; //anuleaza ultimul pas pt ca a cauzat iesirea din limite
   \   00000084   2FBA               MOV     R27, R26
   \   00000086   0FBB               LSL     R27
   \   00000088   0BBB               SBC     R27, R27
   \   0000008A   0F8A               ADD     R24, R26
   \   0000008C   1F9B               ADC     R25, R27
    114                  duty_cycle+=pas; //pentru a nu avea de doua ori aceasi valoare
   \   0000008E   2FBA               MOV     R27, R26
   \   00000090   0FBB               LSL     R27
   \   00000092   0BBB               SBC     R27, R27
   \   00000094   0F8A               ADD     R24, R26
   \   00000096   1F9B               ADC     R25, R27
    115                }
    116                OCR1A=(unsigned short)ICR1/100*duty_cycle;//calcul dc pentru timer       factorul de umplere pentru aparat
   \                     ??main_2:
   \   00000098   E644               LDI     R20, 100
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   B506               IN      R16, 0x26
   \   0000009E   B517               IN      R17, 0x27
   \   000000A0   ........           CALL    ?US_DIVMOD_L02
   \   000000A4   01AC               MOVW    R21:R20, R25:R24
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   BD1B               OUT     0x2B, R17
   \   000000AC   BD0A               OUT     0x2A, R16
    117                
    118                
    119                if(duty_cycle<10)
   \   000000AE   308A               CPI     R24, 10
   \   000000B0   E000               LDI     R16, 0
   \   000000B2   0790               CPC     R25, R16
   \   000000B4   F438               BRCC    ??main_3
    120                {
    121                  integerTransmit(0,1,duty_cycle);//transmitere pe seriala
   \   000000B6   01AC               MOVW    R21:R20, R25:R24
   \   000000B8   E021               LDI     R18, 1
   \   000000BA   E030               LDI     R19, 0
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   ....               RCALL   integerTransmit
   \   000000C2   C006               RJMP    ??main_4
    122                }
    123                else
    124                {
    125                  integerTransmit(0,2,duty_cycle);//transmitere pe seriala
   \                     ??main_3:
   \   000000C4   01AC               MOVW    R21:R20, R25:R24
   \   000000C6   E022               LDI     R18, 2
   \   000000C8   E030               LDI     R19, 0
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   ....               RCALL   integerTransmit
    126                }
    127                
    128                USART_transmit(0x0d);
   \                     ??main_4:
   \   000000D0   E00D               LDI     R16, 13
   \   000000D2   ....               RCALL   USART_transmit
    129                USART_transmit(0x0a);
   \   000000D4   E00A               LDI     R16, 10
   \   000000D6   ....               RCALL   USART_transmit
    130                cnt=0;//resetare conter timp
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   E010               LDI     R17, 0
   \   000000DC   E020               LDI     R18, 0
   \   000000DE   E030               LDI     R19, 0
   \   000000E0   ....               LDI     R30, LOW(cnt)
   \   000000E2   ....               LDI     R31, (cnt) >> 8
   \   000000E4   8300               ST      Z, R16
   \   000000E6   8311               STD     Z+1, R17
   \   000000E8   8322               STD     Z+2, R18
   \   000000EA   8333               STD     Z+3, R19
   \   000000EC   CFAC               RJMP    ??main_0
   \   000000EE                      REQUIRE _A_TCCR1B
   \   000000EE                      REQUIRE _A_TCCR1A
   \   000000EE                      REQUIRE _A_TIMSK
   \   000000EE                      REQUIRE _A_DDRD
   \   000000EE                      REQUIRE _A_PORTD
   \   000000EE                      REQUIRE _A_ICR1
   \   000000EE                      REQUIRE _A_OCR1A
    131              }
    132            }
    133          }

   \                                 In  segment INTVEC, offset 0x20, root
   \                     `??T1int??INTVEC 32`:
   \   00000020   ........           JMP     T1int

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for timp>`:
   \   00000000   17760000           DD 6006

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       7      2  T1int
       0      2  USART_initialize
       0      2  USART_transmit
      15      4  integerTransmit
                   15 2 -> USART_transmit
       4      4  main
                    4 2 -> USART_initialize
                    4 2 -> USART_transmit
                    4 2 -> integerTransmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for timp>
       4  ??T1int??INTVEC 32
      62  T1int
      24  USART_initialize
       8  USART_transmit
       1  _A_DDRD
       2  _A_ICR1
       2  _A_OCR1A
       1  _A_PORTD
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TIMSK
       1  _A_UBRRH
       1  _A_UBRRL
       1  _A_UCSRA
       1  _A_UCSRB
       1  _A_UDR
       4  cnt
       1  data
     104  integerTransmit
     238  main
       4  timp
      12  -- Other

 
  14 bytes in segment ABSOLUTE
 436 bytes in segment CODE
  12 bytes in segment INITTAB
   4 bytes in segment INTVEC
   4 bytes in segment NEAR_I
   4 bytes in segment NEAR_ID
   5 bytes in segment NEAR_Z
 
 440 bytes of CODE memory (+ 16 bytes shared)
   9 bytes of DATA memory (+ 14 bytes shared)

Errors: none
Warnings: 1

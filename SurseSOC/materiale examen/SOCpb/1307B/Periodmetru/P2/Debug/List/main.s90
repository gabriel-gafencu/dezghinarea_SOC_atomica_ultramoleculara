///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       06/Jan/2015  21:47:04 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\1307B\Periodmetru\P2\main.c                          /
//    Command line =  D:\1307B\Periodmetru\P2\main.c --cpu=m16 -ms -o         /
//                    D:\1307B\Periodmetru\P2\Debug\Obj\ -lC                  /
//                    D:\1307B\Periodmetru\P2\Debug\List\ -lA                 /
//                    D:\1307B\Periodmetru\P2\Debug\List\                     /
//                    --initializers_in_flash --no_cse --no_inline            /
//                    --no_code_motion --no_cross_call --no_clustering        /
//                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e           /
//                    --eeprom_size 512 --clib -On                            /
//    List file    =  D:\1307B\Periodmetru\P2\Debug\List\main.s90             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??isr_INT0??INTVEC 4`
        PUBWEAK _A_GICR
        PUBWEAK _A_MCUCR
        PUBWEAK _A_PIND
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCNT1
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC flag_per
        PUBLIC isr_INT0
        FUNCTION isr_INT0,0233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC main
        FUNCTION main,0a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC nr_cicli
        PUBLIC per
        PUBLIC `x`
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
isr_INT0            SYMBOL "isr_INT0"
`??isr_INT0??INTVEC 4` SYMBOL "??INTVEC 4", isr_INT0

// D:\1307B\Periodmetru\P2\main.c
//    1 #include <inavr.h>
//    2 #include <iom16.h>

        ASEGN ABSOLUTE:DATA:NOROOT,05bH
// union <unnamed> volatile __io _A_GICR
_A_GICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,055H
// union <unnamed> volatile __io _A_MCUCR
_A_MCUCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04cH
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,030H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    3 unsigned int per;
per:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    4 unsigned int nr_cicli;
nr_cicli:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    5 unsigned int flag_per;
flag_per:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    6 unsigned int x;
`x`:
        DS8 2
//    7 #pragma vector=INT0_vect // functia care urmeaza trateaza intreruperea INT0
//    8 

        RSEG CODE:CODE:NOROOT(1)
//    9 __interrupt void isr_INT0(void){
isr_INT0:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function isr_INT0
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        IN      R18, 0x3F
//   10 if((PIND&(1<<PD2))==4){
        SBIS    0x10, 0x02
        RJMP    ??isr_INT0_0
//   11 TCNT1=0;///reset timer
        LDI     R16, 0
        LDI     R17, 0
        OUT     0x2D, R17
        OUT     0x2C, R16
//   12 TCCR1B=(1<<CS12);//start timer cu prescaler de 256
        LDI     R16, 4
        OUT     0x2E, R16
        RJMP    ??isr_INT0_1
//   13   }
//   14   else{
//   15 nr_cicli=TCNT1;//salveazã nr cicli
??isr_INT0_0:
        IN      R16, 0x2C
        IN      R17, 0x2D
        STS     nr_cicli, R16
        STS     (nr_cicli + 1), R17
//   16 per=(nr_cicli/4)*256;//calculeazã perioada în microsecunde
        LDS     R16, nr_cicli
        LDS     R17, (nr_cicli + 1)
        LSR     R17
        ROR     R16
        LSR     R17
        ROR     R16
        MOV     R17, R16
        LDI     R16, 0
        STS     per, R16
        STS     (per + 1), R17
//   17 flag_per=1;
        LDI     R16, 1
        LDI     R17, 0
        STS     flag_per, R16
        STS     (flag_per + 1), R17
//   18   }
//   19 }
??isr_INT0_1:
        OUT     0x3F, R18
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+2
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+1
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
        REQUIRE _A_PIND
        REQUIRE _A_TCNT1
        REQUIRE _A_TCCR1B

        RSEG CODE:CODE:NOROOT(1)
//   20 void main( void )
main:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function main
//   21 {
//   22 
//   23 // ini.ializare întrerupere externã
//   24 __enable_interrupt();
        SEI
//   25 MCUCR |=(1<<ISC00);
        IN      R16, 0x35
        ORI     R16, 0x01
        OUT     0x35, R16
//   26 MCUCR &=~(1<<ISC01);
        IN      R16, 0x35
        ANDI    R16, 0xFD
        OUT     0x35, R16
//   27 GICR |=(1<<INT0); //activare întrerupere externã
        IN      R16, 0x3B
        ORI     R16, 0x40
        OUT     0x3B, R16
//   28 while(1){
//   29 while(flag_per==0);//a.teapta masurare întrerupere
??main_0:
        LDS     R16, flag_per
        LDS     R17, (flag_per + 1)
        OR      R16, R17
        BREQ    ??main_0
//   30 flag_per=0;//reseteaza flag
        LDI     R16, 0
        LDI     R17, 0
        STS     flag_per, R16
        STS     (flag_per + 1), R17
//   31 x=per;//se face ceva cu valoarea masurata
        LDS     R16, per
        LDS     R17, (per + 1)
        STS     `x`, R16
        STS     (`x` + 1), R17
        RJMP    ??main_0
          CFI EndBlock cfiBlock1
        REQUIRE _A_MCUCR
        REQUIRE _A_GICR
//   32   }
//   33 
//   34 
//   35 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 4
`??isr_INT0??INTVEC 4`:
        JMP     isr_INT0

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
// 
//   6 bytes in segment ABSOLUTE
// 150 bytes in segment CODE
//   6 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//   8 bytes in segment NEAR_Z
// 
// 150 bytes of CODE memory (+ 10 bytes shared)
//   8 bytes of DATA memory (+  6 bytes shared)
//
//Errors: none
//Warnings: none

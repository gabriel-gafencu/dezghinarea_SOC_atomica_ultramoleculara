///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       06/Jan/2015  21:42:29 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\1307B\Periodmetru\P1\main.c                          /
//    Command line =  D:\1307B\Periodmetru\P1\main.c --cpu=m16 -ms -o         /
//                    D:\1307B\Periodmetru\P1\Debug\Obj\ -lC                  /
//                    D:\1307B\Periodmetru\P1\Debug\List\ -lA                 /
//                    D:\1307B\Periodmetru\P1\Debug\List\                     /
//                    --initializers_in_flash --no_cse --no_inline            /
//                    --no_code_motion --no_cross_call --no_clustering        /
//                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e           /
//                    --eeprom_size 512 --clib -On                            /
//    List file    =  D:\1307B\Periodmetru\P1\Debug\List\main.s90             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B10_L09
        EXTERN ?EPILOGUE_B6_L09
        EXTERN ?PROLOGUE10_L09
        EXTERN ?PROLOGUE6_L09
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?Register_R9_is_cg_reg
        EXTERN ?SS_DIVMOD_L02
        EXTERN ?S_EC_MUL_L02
        EXTERN ?UL_DIVMOD_L03
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??isr_INT0??INTVEC 6`
        PUBWEAK _A_GICR
        PUBWEAK _A_MCUCR
        PUBWEAK _A_PIND
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCNT1
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC buffer
        PUBLIC flag_per
        PUBLIC index
        PUBLIC integerTransmit
        FUNCTION integerTransmit,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC isr_INT0
        FUNCTION isr_INT0,0233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC main
        FUNCTION main,021a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC nrCifre
        FUNCTION nrCifre,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC nr_cicli
        PUBLIC nr_us
        PUBLIC per
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
isr_INT0            SYMBOL "isr_INT0"
`??isr_INT0??INTVEC 6` SYMBOL "??INTVEC 6", isr_INT0

        EXTERN USART_initialize
        FUNCTION USART_initialize,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN USART_transmit
        FUNCTION USART_transmit,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\1307B\Periodmetru\P1\main.c
//    1 #include <inavr.h>
//    2 #include <iom16.h>

        ASEGN ABSOLUTE:DATA:NOROOT,05bH
// union <unnamed> volatile __io _A_GICR
_A_GICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,055H
// union <unnamed> volatile __io _A_MCUCR
_A_MCUCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04cH
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,030H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1
//    3 #include "usart.h"

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    4 unsigned long nr_us;
nr_us:
        DS8 4
//    5 unsigned int nr_cicli;

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    6 unsigned char buffer[10];
buffer:
        DS8 10

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    7 int index;
index:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    8 unsigned int per;
per:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    9 unsigned int nr_cicli;
nr_cicli:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   10 unsigned int flag_per;
flag_per:
        DS8 2
//   11 
//   12 #pragma vector=INT0

        RSEG CODE:CODE:NOROOT(1)
//   13 __interrupt void isr_INT0(void){
isr_INT0:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function isr_INT0
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        IN      R18, 0x3F
//   14   if((PIND&(1<<PD2))==4){
        SBIS    0x10, 0x02
        RJMP    ??isr_INT0_0
//   15     TCNT1=0;///reset timer
        LDI     R16, 0
        LDI     R17, 0
        OUT     0x2D, R17
        OUT     0x2C, R16
//   16     TCCR1B=(1<<CS12);//start timer cu prescaler de 256
        LDI     R16, 4
        OUT     0x2E, R16
        RJMP    ??isr_INT0_1
//   17   }
//   18   else{
//   19     nr_cicli=TCNT1;//salveazã nr cicli
??isr_INT0_0:
        IN      R16, 0x2C
        IN      R17, 0x2D
        STS     nr_cicli, R16
        STS     (nr_cicli + 1), R17
//   20     per=(nr_cicli/4)*256;//calculeazã perioada în microsecunde
        LDS     R16, nr_cicli
        LDS     R17, (nr_cicli + 1)
        LSR     R17
        ROR     R16
        LSR     R17
        ROR     R16
        MOV     R17, R16
        LDI     R16, 0
        STS     per, R16
        STS     (per + 1), R17
//   21     flag_per=1;
        LDI     R16, 1
        LDI     R17, 0
        STS     flag_per, R16
        STS     (flag_per + 1), R17
//   22   }
//   23 }
??isr_INT0_1:
        OUT     0x3F, R18
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+2
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+1
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
        REQUIRE _A_PIND
        REQUIRE _A_TCNT1
        REQUIRE _A_TCCR1B
//   24 
//   25 

        RSEG CODE:CODE:NOROOT(1)
//   26 void integerTransmit (unsigned int p1, unsigned int p2, void * p3)
integerTransmit:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function integerTransmit
//   27 {
        FUNCALL integerTransmit, USART_transmit
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL integerTransmit, USART_transmit
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE10_L09
          CFI R9 Frame(CFA_Y, -1)
          CFI R8 Frame(CFA_Y, -2)
          CFI R7 Frame(CFA_Y, -3)
          CFI R6 Frame(CFA_Y, -4)
          CFI R5 Frame(CFA_Y, -5)
          CFI R4 Frame(CFA_Y, -6)
          CFI R27 Frame(CFA_Y, -7)
          CFI R26 Frame(CFA_Y, -8)
          CFI R25 Frame(CFA_Y, -9)
          CFI R24 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        SBIW    R29:R28, 5
          CFI CFA_Y Y+15
        MOVW    R9:R8, R17:R16
        MOVW    R5:R4, R19:R18
        MOVW    R27:R26, R21:R20
//   28   int index=0;
        LDI     R24, 0
        LDI     R25, 0
//   29   char aux[5];
//   30   int x=*((int *)(p3));
        LD      R6, X+
        LD      R7, X
        SBIW    R27:R26, 1
//   31   if(x<0)
        TST     R7
        BRPL    ??integerTransmit_0
//   32   {
//   33     USART_transmit('-');
        LDI     R16, 45
        CALL    USART_transmit
//   34     x*=(-1);
        LDI     R20, 255
        LDI     R21, 255
        MOVW    R17:R16, R7:R6
        CALL    ?S_EC_MUL_L02
        MOVW    R7:R6, R17:R16
//   35   }
//   36   while(x!=0)
??integerTransmit_0:
        MOV     R16, R6
        OR      R16, R7
        BREQ    ??integerTransmit_1
//   37   {
//   38     aux[index]=x%10+'0';
        LDI     R20, 10
        LDI     R21, 0
        MOVW    R17:R16, R7:R6
        CALL    ?SS_DIVMOD_L02
        SUBI    R20, 208
        MOVW    R31:R30, R29:R28
        ADD     R30, R24
        ADC     R31, R25
        ST      Z, R20
//   39     index++;
        ADIW    R25:R24, 1
//   40     x=x/10;
        LDI     R20, 10
        LDI     R21, 0
        MOVW    R17:R16, R7:R6
        CALL    ?SS_DIVMOD_L02
        MOVW    R7:R6, R17:R16
        RJMP    ??integerTransmit_0
//   41   }
//   42   while(p2>0 )
??integerTransmit_1:
        MOV     R16, R4
        OR      R16, R5
        BREQ    ??integerTransmit_2
//   43   {
//   44     USART_transmit(aux[index-1]);
        MOVW    R31:R30, R29:R28
        ADD     R30, R24
        ADC     R31, R25
        SBIW    R31:R30, 1
        LD      R16, Z
        CALL    USART_transmit
//   45     index--;
        SBIW    R25:R24, 1
//   46     p2--;
        LDI     R16, 255
        ADD     R4, R16
        LDI     R16, 255
        ADC     R5, R16
        RJMP    ??integerTransmit_1
//   47   }
//   48 }
??integerTransmit_2:
        ADIW    R29:R28, 5
          CFI CFA_Y Y+10
        LDI     R30, 10
        JMP     ?EPILOGUE_B10_L09
          CFI EndBlock cfiBlock1
//   49 
//   50 

        RSEG CODE:CODE:NOROOT(1)
//   51 int nrCifre(unsigned long num)
nrCifre:
          CFI Block cfiBlock2 Using cfiCommon1
          CFI Function nrCifre
//   52 {
        CALL    ?PROLOGUE6_L09
          CFI R5 Frame(CFA_Y, -1)
          CFI R4 Frame(CFA_Y, -2)
          CFI R27 Frame(CFA_Y, -3)
          CFI R26 Frame(CFA_Y, -4)
          CFI R25 Frame(CFA_Y, -5)
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//   53   int nrC=0;
        CLR     R4
        CLR     R5
//   54   while(num)
??nrCifre_0:
        MOV     R16, R24
        OR      R16, R25
        OR      R16, R26
        OR      R16, R27
        BREQ    ??nrCifre_1
//   55   {
//   56     num/=10;
        LDI     R20, 10
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?UL_DIVMOD_L03
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//   57     nrC++; 
        LDI     R16, 1
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        RJMP    ??nrCifre_0
//   58   }
//   59   return nrC;
??nrCifre_1:
        MOVW    R17:R16, R5:R4
        LDI     R30, 6
        JMP     ?EPILOGUE_B6_L09
          CFI EndBlock cfiBlock2
//   60 }
//   61 //mãsurare impuls fãrã întrerupere
//   62 
//   63 /*
//   64 void main( void )
//   65 {
//   66 USART_initialize(BAUD_RATE);
//   67 TCCR1A=0;//ini.ializare timer mod normal .i dezactivare clock
//   68 TCCR1B=0;
//   69 index=0;
//   70 DDRD&=~(1<<PD2);//pinul PD2 este de input
//   71 
//   72 while(1)
//   73 {
//   74 while((PIND & (1<<PD2))==0);//a.teptam frontul pozitiv
//   75 //a apãrut frontul pozitiv
//   76 TCCR1B|=(1<<CS12);//pornire clock timer cu prescaler de 256
//   77 while((PIND & (1<<PD2))==4);//a.teptam frontul negativ
//   78 while((PIND & (1<<PD2))==0);//a.teptam frontul pozitiv
//   79 //a apãrut frontul negativ
//   80 nr_cicli=TCNT1;//salvãm numãrul de ciclii
//   81 //calculam perioada în microsecunde
//   82 nr_us=nr_cicli/4*256; //nr_us=nrciclii* (perioada unui ciclu, adicã 0.25 microsecunde) * prescaler
//   83 //aici se poate trimite pe serialã perioada.
//   84 
//   85 unsigned long* val=&nr_us;
//   86 integerTransmit(0,nrCifre(nr_us),val);
//   87 USART_transmit(0xd);
//   88 USART_transmit(0xa);
//   89 
//   90 
//   91 TCCR1A=0;//ini.ializare timer mod normal .i dezactivare clock
//   92 TCCR1B=0;
//   93 TCNT1=0;
//   94 
//   95   }
//   96 
//   97 
//   98 
//   99 }*/
//  100 
//  101 
//  102 
//  103 
//  104 

        RSEG CODE:CODE:NOROOT(1)
//  105 void main( void )
main:
          CFI Block cfiBlock3 Using cfiCommon1
          CFI Function main
//  106 {
        FUNCALL main, USART_initialize
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
//  107   USART_initialize(BAUD_RATE);
        LDI     R16, 12
        LDI     R17, 0
        CALL    USART_initialize
//  108   __enable_interrupt();
        SEI
//  109   unsigned int x;
//  110   // ini.ializare întrerupere externã
//  111   MCUCR |=(1<<ISC00);
        IN      R16, 0x35
        ORI     R16, 0x01
        OUT     0x35, R16
//  112   MCUCR &=~(1<<ISC01);
        IN      R16, 0x35
        ANDI    R16, 0xFD
        OUT     0x35, R16
//  113   GICR |=(1<<INT0); //activare întrerupere externã
        IN      R16, 0x3B
        ORI     R16, 0x40
        OUT     0x3B, R16
//  114   
//  115   while(1){
//  116     if(flag_per==1)//a.teapta masurare întrerupere
??main_0:
        LDS     R16, flag_per
        LDS     R17, (flag_per + 1)
        CPI     R16, 1
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??main_1
//  117     USART_transmit('*');    
        LDI     R16, 42
        CALL    USART_transmit
//  118     flag_per=0;//reseteaza flag
??main_1:
        LDI     R16, 0
        LDI     R17, 0
        STS     flag_per, R16
        STS     (flag_per + 1), R17
//  119     x=per;//se face ceva cu valoarea masurata
        LDS     R16, per
        LDS     R17, (per + 1)
        MOVW    R25:R24, R17:R16
        RJMP    ??main_0
          CFI EndBlock cfiBlock3
        REQUIRE _A_MCUCR
        REQUIRE _A_GICR
//  120    
//  121   }
//  122 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 6
`??isr_INT0??INTVEC 6`:
        JMP     isr_INT0

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
// 
//   6 bytes in segment ABSOLUTE
// 352 bytes in segment CODE
//   6 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//  22 bytes in segment NEAR_Z
// 
// 352 bytes of CODE memory (+ 10 bytes shared)
//  22 bytes of DATA memory (+  6 bytes shared)
//
//Errors: none
//Warnings: 1

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        06/Jan/2015  21:42:29 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307B\Periodmetru\P1\main.c                           #
#    Command line =  D:\1307B\Periodmetru\P1\main.c --cpu=m16 -ms -o          #
#                    D:\1307B\Periodmetru\P1\Debug\Obj\ -lC                   #
#                    D:\1307B\Periodmetru\P1\Debug\List\ -lA                  #
#                    D:\1307B\Periodmetru\P1\Debug\List\                      #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\1307B\Periodmetru\P1\Debug\List\main.lst              #
#    Object file  =  D:\1307B\Periodmetru\P1\Debug\Obj\main.r90               #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307B\Periodmetru\P1\main.c
      1          #include <inavr.h>
      2          #include <iom16.h>

   \                                 In  segment ABSOLUTE, at 0x5b
   \   union <unnamed> volatile __io _A_GICR
   \                     _A_GICR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1
      3          #include "usart.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          unsigned long nr_us;
   \                     nr_us:
   \   00000000                      DS8 4
      5          unsigned int nr_cicli;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          unsigned char buffer[10];
   \                     buffer:
   \   00000000                      DS8 10

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      7          int index;
   \                     index:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      8          unsigned int per;
   \                     per:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      9          unsigned int nr_cicli;
   \                     nr_cicli:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     10          unsigned int flag_per;
   \                     flag_per:
   \   00000000                      DS8 2
     11          
     12          #pragma vector=INT0

   \                                 In  segment CODE, align 2, keep-with-next
     13          __interrupt void isr_INT0(void){
   \                     isr_INT0:
   \   00000000   932A               ST      -Y, R18
   \   00000002   931A               ST      -Y, R17
   \   00000004   930A               ST      -Y, R16
   \   00000006   B72F               IN      R18, 0x3F
     14            if((PIND&(1<<PD2))==4){
   \   00000008   9B82               SBIS    0x10, 0x02
   \   0000000A   C007               RJMP    ??isr_INT0_0
     15              TCNT1=0;///reset timer
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   E010               LDI     R17, 0
   \   00000010   BD1D               OUT     0x2D, R17
   \   00000012   BD0C               OUT     0x2C, R16
     16              TCCR1B=(1<<CS12);//start timer cu prescaler de 256
   \   00000014   E004               LDI     R16, 4
   \   00000016   BD0E               OUT     0x2E, R16
   \   00000018   C01A               RJMP    ??isr_INT0_1
     17            }
     18            else{
     19              nr_cicli=TCNT1;//salveazã nr cicli
   \                     ??isr_INT0_0:
   \   0000001A   B50C               IN      R16, 0x2C
   \   0000001C   B51D               IN      R17, 0x2D
   \   0000001E   9300....           STS     nr_cicli, R16
   \   00000022   9310....           STS     (nr_cicli + 1), R17
     20              per=(nr_cicli/4)*256;//calculeazã perioada în microsecunde
   \   00000026   9100....           LDS     R16, nr_cicli
   \   0000002A   9110....           LDS     R17, (nr_cicli + 1)
   \   0000002E   9516               LSR     R17
   \   00000030   9507               ROR     R16
   \   00000032   9516               LSR     R17
   \   00000034   9507               ROR     R16
   \   00000036   2F10               MOV     R17, R16
   \   00000038   E000               LDI     R16, 0
   \   0000003A   9300....           STS     per, R16
   \   0000003E   9310....           STS     (per + 1), R17
     21              flag_per=1;
   \   00000042   E001               LDI     R16, 1
   \   00000044   E010               LDI     R17, 0
   \   00000046   9300....           STS     flag_per, R16
   \   0000004A   9310....           STS     (flag_per + 1), R17
     22            }
     23          }
   \                     ??isr_INT0_1:
   \   0000004E   BF2F               OUT     0x3F, R18
   \   00000050   9109               LD      R16, Y+
   \   00000052   9119               LD      R17, Y+
   \   00000054   9129               LD      R18, Y+
   \   00000056   9518               RETI
   \   00000058                      REQUIRE _A_PIND
   \   00000058                      REQUIRE _A_TCNT1
   \   00000058                      REQUIRE _A_TCCR1B
     24          
     25          

   \                                 In  segment CODE, align 2, keep-with-next
     26          void integerTransmit (unsigned int p1, unsigned int p2, void * p3)
   \                     integerTransmit:
     27          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   0148               MOVW    R9:R8, R17:R16
   \   00000008   0129               MOVW    R5:R4, R19:R18
   \   0000000A   01DA               MOVW    R27:R26, R21:R20
     28            int index=0;
   \   0000000C   E080               LDI     R24, 0
   \   0000000E   E090               LDI     R25, 0
     29            char aux[5];
     30            int x=*((int *)(p3));
   \   00000010   906D               LD      R6, X+
   \   00000012   907C               LD      R7, X
   \   00000014   9711               SBIW    R27:R26, 1
     31            if(x<0)
   \   00000016   2077               TST     R7
   \   00000018   F44A               BRPL    ??integerTransmit_0
     32            {
     33              USART_transmit('-');
   \   0000001A   E20D               LDI     R16, 45
   \   0000001C   ........           CALL    USART_transmit
     34              x*=(-1);
   \   00000020   EF4F               LDI     R20, 255
   \   00000022   EF5F               LDI     R21, 255
   \   00000024   0183               MOVW    R17:R16, R7:R6
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   0138               MOVW    R7:R6, R17:R16
     35            }
     36            while(x!=0)
   \                     ??integerTransmit_0:
   \   0000002C   2D06               MOV     R16, R6
   \   0000002E   2907               OR      R16, R7
   \   00000030   F091               BREQ    ??integerTransmit_1
     37            {
     38              aux[index]=x%10+'0';
   \   00000032   E04A               LDI     R20, 10
   \   00000034   E050               LDI     R21, 0
   \   00000036   0183               MOVW    R17:R16, R7:R6
   \   00000038   ........           CALL    ?SS_DIVMOD_L02
   \   0000003C   5D40               SUBI    R20, 208
   \   0000003E   01FE               MOVW    R31:R30, R29:R28
   \   00000040   0FE8               ADD     R30, R24
   \   00000042   1FF9               ADC     R31, R25
   \   00000044   8340               ST      Z, R20
     39              index++;
   \   00000046   9601               ADIW    R25:R24, 1
     40              x=x/10;
   \   00000048   E04A               LDI     R20, 10
   \   0000004A   E050               LDI     R21, 0
   \   0000004C   0183               MOVW    R17:R16, R7:R6
   \   0000004E   ........           CALL    ?SS_DIVMOD_L02
   \   00000052   0138               MOVW    R7:R6, R17:R16
   \   00000054   CFEB               RJMP    ??integerTransmit_0
     41            }
     42            while(p2>0 )
   \                     ??integerTransmit_1:
   \   00000056   2D04               MOV     R16, R4
   \   00000058   2905               OR      R16, R5
   \   0000005A   F069               BREQ    ??integerTransmit_2
     43            {
     44              USART_transmit(aux[index-1]);
   \   0000005C   01FE               MOVW    R31:R30, R29:R28
   \   0000005E   0FE8               ADD     R30, R24
   \   00000060   1FF9               ADC     R31, R25
   \   00000062   9731               SBIW    R31:R30, 1
   \   00000064   8100               LD      R16, Z
   \   00000066   ........           CALL    USART_transmit
     45              index--;
   \   0000006A   9701               SBIW    R25:R24, 1
     46              p2--;
   \   0000006C   EF0F               LDI     R16, 255
   \   0000006E   0E40               ADD     R4, R16
   \   00000070   EF0F               LDI     R16, 255
   \   00000072   1E50               ADC     R5, R16
   \   00000074   CFF0               RJMP    ??integerTransmit_1
     47            }
     48          }
   \                     ??integerTransmit_2:
   \   00000076   9625               ADIW    R29:R28, 5
   \   00000078   E0EA               LDI     R30, 10
   \   0000007A   ........           JMP     ?EPILOGUE_B10_L09
     49          
     50          

   \                                 In  segment CODE, align 2, keep-with-next
     51          int nrCifre(unsigned long num)
   \                     nrCifre:
     52          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
     53            int nrC=0;
   \   00000008   2444               CLR     R4
   \   0000000A   2455               CLR     R5
     54            while(num)
   \                     ??nrCifre_0:
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   2B09               OR      R16, R25
   \   00000010   2B0A               OR      R16, R26
   \   00000012   2B0B               OR      R16, R27
   \   00000014   F079               BREQ    ??nrCifre_1
     55            {
     56              num/=10;
   \   00000016   E04A               LDI     R20, 10
   \   00000018   E050               LDI     R21, 0
   \   0000001A   E060               LDI     R22, 0
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   018C               MOVW    R17:R16, R25:R24
   \   00000020   019D               MOVW    R19:R18, R27:R26
   \   00000022   ........           CALL    ?UL_DIVMOD_L03
   \   00000026   01C8               MOVW    R25:R24, R17:R16
   \   00000028   01D9               MOVW    R27:R26, R19:R18
     57              nrC++; 
   \   0000002A   E001               LDI     R16, 1
   \   0000002C   0E40               ADD     R4, R16
   \   0000002E   E000               LDI     R16, 0
   \   00000030   1E50               ADC     R5, R16
   \   00000032   CFEC               RJMP    ??nrCifre_0
     58            }
     59            return nrC;
   \                     ??nrCifre_1:
   \   00000034   0182               MOVW    R17:R16, R5:R4
   \   00000036   E0E6               LDI     R30, 6
   \   00000038   ........           JMP     ?EPILOGUE_B6_L09
     60          }
     61          //mãsurare impuls fãrã întrerupere
     62          
     63          /*
     64          void main( void )
     65          {
     66          USART_initialize(BAUD_RATE);
     67          TCCR1A=0;//ini.ializare timer mod normal .i dezactivare clock
     68          TCCR1B=0;
     69          index=0;
     70          DDRD&=~(1<<PD2);//pinul PD2 este de input
     71          
     72          while(1)
     73          {
     74          while((PIND & (1<<PD2))==0);//a.teptam frontul pozitiv
     75          //a apãrut frontul pozitiv
     76          TCCR1B|=(1<<CS12);//pornire clock timer cu prescaler de 256
     77          while((PIND & (1<<PD2))==4);//a.teptam frontul negativ
     78          while((PIND & (1<<PD2))==0);//a.teptam frontul pozitiv
     79          //a apãrut frontul negativ
     80          nr_cicli=TCNT1;//salvãm numãrul de ciclii
     81          //calculam perioada în microsecunde
     82          nr_us=nr_cicli/4*256; //nr_us=nrciclii* (perioada unui ciclu, adicã 0.25 microsecunde) * prescaler
     83          //aici se poate trimite pe serialã perioada.
     84          
     85          unsigned long* val=&nr_us;
     86          integerTransmit(0,nrCifre(nr_us),val);
     87          USART_transmit(0xd);
     88          USART_transmit(0xa);
     89          
     90          
     91          TCCR1A=0;//ini.ializare timer mod normal .i dezactivare clock
     92          TCCR1B=0;
     93          TCNT1=0;
     94          
     95            }
     96          
     97          
     98          
     99          }*/
    100          
    101          
    102          
    103          
    104          

   \                                 In  segment CODE, align 2, keep-with-next
    105          void main( void )
   \                     main:
    106          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    107            USART_initialize(BAUD_RATE);
   \   00000004   E00C               LDI     R16, 12
   \   00000006   E010               LDI     R17, 0
   \   00000008   ........           CALL    USART_initialize
    108            __enable_interrupt();
   \   0000000C   9478               SEI
    109            unsigned int x;
                                ^
Warning[Pe550]: variable "x" was set but never used
    110            // ini.ializare întrerupere externã
    111            MCUCR |=(1<<ISC00);
   \   0000000E   B705               IN      R16, 0x35
   \   00000010   6001               ORI     R16, 0x01
   \   00000012   BF05               OUT     0x35, R16
    112            MCUCR &=~(1<<ISC01);
   \   00000014   B705               IN      R16, 0x35
   \   00000016   7F0D               ANDI    R16, 0xFD
   \   00000018   BF05               OUT     0x35, R16
    113            GICR |=(1<<INT0); //activare întrerupere externã
   \   0000001A   B70B               IN      R16, 0x3B
   \   0000001C   6400               ORI     R16, 0x40
   \   0000001E   BF0B               OUT     0x3B, R16
    114            
    115            while(1){
    116              if(flag_per==1)//a.teapta masurare întrerupere
   \                     ??main_0:
   \   00000020   9100....           LDS     R16, flag_per
   \   00000024   9110....           LDS     R17, (flag_per + 1)
   \   00000028   3001               CPI     R16, 1
   \   0000002A   E020               LDI     R18, 0
   \   0000002C   0712               CPC     R17, R18
   \   0000002E   F419               BRNE    ??main_1
    117              USART_transmit('*');    
   \   00000030   E20A               LDI     R16, 42
   \   00000032   ........           CALL    USART_transmit
    118              flag_per=0;//reseteaza flag
   \                     ??main_1:
   \   00000036   E000               LDI     R16, 0
   \   00000038   E010               LDI     R17, 0
   \   0000003A   9300....           STS     flag_per, R16
   \   0000003E   9310....           STS     (flag_per + 1), R17
    119              x=per;//se face ceva cu valoarea masurata
   \   00000042   9100....           LDS     R16, per
   \   00000046   9110....           LDS     R17, (per + 1)
   \   0000004A   01C8               MOVW    R25:R24, R17:R16
   \   0000004C   CFE9               RJMP    ??main_0
   \   0000004E                      REQUIRE _A_MCUCR
   \   0000004E                      REQUIRE _A_GICR
    120             
    121            }
    122          }

   \                                 In  segment INTVEC, offset 0x6, root
   \                     `??isr_INT0??INTVEC 6`:
   \   00000006   ........           JMP     isr_INT0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      15      4  integerTransmit
                   15 2 -> USART_transmit
       3      2  isr_INT0
       2      2  main
                    2 2 -> USART_initialize
                    2 2 -> USART_transmit
       6      4  nrCifre


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??isr_INT0??INTVEC 6
       1  _A_GICR
       1  _A_MCUCR
       1  _A_PIND
       1  _A_TCCR1B
       2  _A_TCNT1
      10  buffer
       2  flag_per
       2  index
     126  integerTransmit
      88  isr_INT0
      78  main
      60  nrCifre
       2  nr_cicli
       4  nr_us
       2  per
       6  -- Other

 
   6 bytes in segment ABSOLUTE
 352 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
  22 bytes in segment NEAR_Z
 
 352 bytes of CODE memory (+ 10 bytes shared)
  22 bytes of DATA memory (+  6 bytes shared)

Errors: none
Warnings: 1

///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       09/Jan/2016  04:40:22 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\soc 2015\TEMP\SOC_pachet_examen\CRC_FLASH_functie\ma /
//                    in.c                                                    /
//    Command line =  "D:\soc 2015\TEMP\SOC_pachet_examen\CRC_FLASH_functie\m /
//                    ain.c" --cpu=m16 -ms -o "D:\soc                         /
//                    2015\TEMP\SOC_pachet_examen\CRC_FLASH_functie\Debug\Obj /
//                    \" -lC "D:\soc 2015\TEMP\SOC_pachet_examen\CRC_FLASH_fu /
//                    nctie\Debug\List\" -lA "D:\soc                          /
//                    2015\TEMP\SOC_pachet_examen\CRC_FLASH_functie\Debug\Lis /
//                    t\" --initializers_in_flash --no_cse --no_inline        /
//                    --no_code_motion --no_cross_call --no_clustering        /
//                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e           /
//                    --eeprom_size 512 --clib -On                            /
//    List file    =  D:\soc 2015\TEMP\SOC_pachet_examen\CRC_FLASH_functie\De /
//                    bug\List\main.s90                                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?PROLOGUE6_L09
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg

        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC lenTillRet
        FUNCTION lenTillRet,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC main
        FUNCTION main,021a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC min
        FUNCTION min,0603H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN crc16
        FUNCTION crc16,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN crc16wtable
        FUNCTION crc16wtable,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\soc 2015\TEMP\SOC_pachet_examen\CRC_FLASH_functie\main.c
//    1 #include<iom16.h>
//    2 #include<inavr.h>
//    3 #include"crc.h"
//    4 

        RSEG CODE:CODE:NOROOT(1)
//    5 unsigned char min(unsigned char x, unsigned char y)
min:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function min
//    6 {
        MOV     R18, R16
//    7   if(x < y)
        CP      R18, R17
        BRCC    ??min_0
//    8     return x;
        MOV     R16, R18
        RET
//    9   else
//   10     return y;
??min_0:
        MOV     R16, R17
        RET
          CFI EndBlock cfiBlock0
//   11 }
//   12 

        RSEG CODE:CODE:NOROOT(1)
//   13 unsigned int lenTillRet(unsigned int startAdress, unsigned int retNo)
lenTillRet:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function lenTillRet
//   14 {
        MOVW    R21:R20, R17:R16
//   15   unsigned int len = 0;
        LDI     R16, 0
        LDI     R17, 0
//   16   unsigned int aux = *(__flash unsigned int*)(startAdress);
        MOVW    R31:R30, R21:R20
        LPM     R22, Z+
        LPM     R23, Z
        SBIW    R31:R30, 1
//   17   while(retNo > 0)
??lenTillRet_0:
        MOV     R0, R18
        OR      R0, R19
        BREQ    ??lenTillRet_1
//   18   {
//   19     len = len + 2;
        SUBI    R16, 254
        SBCI    R17, 255
//   20     aux = *(__flash unsigned int*)(startAdress + len);
        MOVW    R31:R30, R21:R20
        ADD     R30, R16
        ADC     R31, R17
        LPM     R0, Z+
        LPM     R1, Z
        SBIW    R31:R30, 1
        MOVW    R23:R22, R1:R0
//   21     while(aux != 0x9508)
??lenTillRet_2:
        CPI     R22, 8
        LDI     R30, 149
        CPC     R23, R30
        BREQ    ??lenTillRet_3
//   22     {
//   23       len = len + 2;
        SUBI    R16, 254
        SBCI    R17, 255
//   24       aux = *(__flash unsigned int*)(startAdress + len);
        MOVW    R31:R30, R21:R20
        ADD     R30, R16
        ADC     R31, R17
        LPM     R0, Z+
        LPM     R1, Z
        SBIW    R31:R30, 1
        MOVW    R23:R22, R1:R0
        RJMP    ??lenTillRet_2
//   25     }
//   26     retNo--;
??lenTillRet_3:
        SUBI    R18, 1
        SBCI    R19, 0
        RJMP    ??lenTillRet_0
//   27   }
//   28   len = len + 2;
??lenTillRet_1:
        SUBI    R16, 254
        SBCI    R17, 255
//   29   return len;
        RET
          CFI EndBlock cfiBlock1
//   30 }
//   31 

        RSEG CODE:CODE:NOROOT(1)
//   32 void main( void )
main:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function main
//   33 {
        FUNCALL main, lenTillRet
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, crc16
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, crc16wtable
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE6_L09
          CFI R5 Frame(CFA_Y, -1)
          CFI R4 Frame(CFA_Y, -2)
          CFI R27 Frame(CFA_Y, -3)
          CFI R26 Frame(CFA_Y, -4)
          CFI R25 Frame(CFA_Y, -5)
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
//   34   unsigned int funcAdress = (((unsigned int)min)<<1);
        LDI     R24, LOW(min/2)
        LDI     R25, (min/2) >> 8
        LSL     R24
        ROL     R25
//   35   unsigned int funcLen = lenTillRet(funcAdress, 2);
        LDI     R18, 2
        LDI     R19, 0
        MOVW    R17:R16, R25:R24
        RCALL   lenTillRet
        MOVW    R27:R26, R17:R16
//   36   unsigned int my_crc16 = crc16(CRC16_CCITT, 0, funcAdress, funcLen, MSBF);
        LDI     R16, 1
        ST      -Y, R16
          CFI CFA_Y Y+7
        MOVW    R23:R22, R27:R26
        MOVW    R21:R20, R25:R24
        LDI     R18, 0
        LDI     R19, 0
        LDI     R16, 33
        LDI     R17, 16
        CALL    crc16
          CFI CFA_Y Y+6
        MOVW    R5:R4, R17:R16
//   37   unsigned int mycrc16_t = crc16wtable(0, funcAdress, funcLen);
        MOVW    R21:R20, R27:R26
        MOVW    R19:R18, R25:R24
        LDI     R16, 0
        LDI     R17, 0
        CALL    crc16wtable
//   38   
//   39   while(1)
??main_0:
        RJMP    ??main_0
          CFI EndBlock cfiBlock2
//   40     ;
//   41 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
// 
// 150 bytes in segment CODE
// 
// 150 bytes of CODE memory
//
//Errors: none
//Warnings: none

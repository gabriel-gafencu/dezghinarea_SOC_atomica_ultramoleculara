///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       08/Jan/2016  15:31:42 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\ma /
//                    in.c                                                    /
//    Command line =  "D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\m /
//                    ain.c" --cpu=m16 -ms -o "D:\soc2015\1305B\SOC_pachet_ex /
//                    amen\Gen_FqWDT(PWM33%)\Debug\Obj\" -lC                  /
//                    "D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\D /
//                    ebug\List\" -lA "D:\soc2015\1305B\SOC_pachet_examen\Gen /
//                    _FqWDT(PWM33%)\Debug\List\" --initializers_in_flash     /
//                    --no_cse --no_inline --no_code_motion --no_cross_call   /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib    /
//                    -On                                                     /
//    List file    =  D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\De /
//                    bug\List\main.s90                                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??isr_TIMER0_overflow??INTVEC 76`
        PUBWEAK _A_DDRD
        PUBWEAK _A_OCR0
        PUBWEAK _A_PORTD
        PUBWEAK _A_TCCR0
        PUBWEAK _A_TIMSK
        PUBWEAK _A_WDTCR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC isr_TIMER0_overflow
        FUNCTION isr_TIMER0_overflow,0231H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC main
        FUNCTION main,0a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC nrOvf
        PUBLIC valAnt
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
isr_TIMER0_overflow SYMBOL "isr_TIMER0_overflow"
`??isr_TIMER0_overflow??INTVEC 76` SYMBOL "??INTVEC 76", isr_TIMER0_overflow

// D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\main.c
//    1 #include<iom16.h>

        ASEGN ABSOLUTE:DATA:NOROOT,05cH
// union <unnamed> volatile __io _A_OCR0
_A_OCR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,053H
// union <unnamed> volatile __io _A_TCCR0
_A_TCCR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,041H
// union <unnamed> volatile __io _A_WDTCR
_A_WDTCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,032H
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1
//    2 #include<inavr.h>
//    3 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    4 unsigned int nrOvf;
nrOvf:
        DS8 2
//    5 
//    6 #pragma vector = TIMER0_COMP_vect

        RSEG CODE:CODE:NOROOT(1)
//    7 __interrupt void isr_TIMER0_overflow()
isr_TIMER0_overflow:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function isr_TIMER0_overflow
//    8 {
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        IN      R18, 0x3F
//    9   nrOvf++;
        LDI     R30, LOW(nrOvf)
        LDI     R31, (nrOvf) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
//   10 }
        OUT     0x3F, R18
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+4
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+3
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+2
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+1
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
//   11 

        RSEG NEAR_N:DATA:NOROOT(0)
//   12 __no_init unsigned char valAnt;
valAnt:
        DS8 1
//   13 

        RSEG CODE:CODE:NOROOT(1)
//   14 void main( void )
main:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function main
//   15 {
//   16   DDRD |= (1 << PD5);
        SBI     0x11, 0x05
//   17   if(valAnt == 0)
        LDS     R16, valAnt
        TST     R16
        BRNE    ??main_0
//   18     PORTD |= (1 << PD5);
        SBI     0x12, 0x05
//   19   
//   20   TCCR0 |= (1<<WGM01) | (0<<WGM00) | (1 << CS01) | (1 << CS00);
??main_0:
        IN      R16, 0x33
        ORI     R16, 0x0B
        OUT     0x33, R16
//   21   TIMSK |= (1 << OCIE0);
        IN      R16, 0x39
        ORI     R16, 0x02
        OUT     0x39, R16
//   22   __enable_interrupt();
        SEI
//   23   
//   24   OCR0=253;
        LDI     R16, 253
        OUT     0x3C, R16
//   25 
//   26   if(valAnt == 1)
        LDS     R16, valAnt
        CPI     R16, 1
        BRNE    ??main_1
//   27   {
//   28     while(1)
//   29     {
//   30       if(nrOvf == 2)
??main_2:
        LDS     R16, nrOvf
        LDS     R17, (nrOvf + 1)
        CPI     R16, 2
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??main_2
//   31       {
//   32         nrOvf++;
        LDI     R30, LOW(nrOvf)
        LDI     R31, (nrOvf) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
//   33         valAnt = 0;
        LDI     R16, 0
        STS     valAnt, R16
//   34         WDTCR |= (0 << WDP2) | (0 << WDP1) | (1 << WDP0) | (1 << WDE);
        IN      R16, 0x21
        ORI     R16, 0x09
        OUT     0x21, R16
        RJMP    ??main_2
//   35       }
//   36     }
//   37   }
//   38   else
//   39   {
//   40     while(1)
//   41     {
//   42       if(nrOvf == 1)
??main_1:
        LDS     R16, nrOvf
        LDS     R17, (nrOvf + 1)
        CPI     R16, 1
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??main_1
//   43       {
//   44         nrOvf++;
        LDI     R30, LOW(nrOvf)
        LDI     R31, (nrOvf) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
//   45         valAnt = 1;
        LDI     R16, 1
        STS     valAnt, R16
//   46         PORTD |= (1 << PD5); 
        SBI     0x12, 0x05
//   47         WDTCR |= (0 << WDP2) | (0 << WDP0) | (1 << WDE);
        IN      R16, 0x21
        ORI     R16, 0x08
        OUT     0x21, R16
        RJMP    ??main_1
          CFI EndBlock cfiBlock1
        REQUIRE _A_DDRD
        REQUIRE _A_PORTD
        REQUIRE _A_TCCR0
        REQUIRE _A_TIMSK
        REQUIRE _A_OCR0
        REQUIRE _A_WDTCR
//   48       }
//   49     }
//   50   }
//   51 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 76
`??isr_TIMER0_overflow??INTVEC 76`:
        JMP     isr_TIMER0_overflow

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
// 
//   6 bytes in segment ABSOLUTE
// 174 bytes in segment CODE
//   6 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//   1 byte  in segment NEAR_N
//   2 bytes in segment NEAR_Z
// 
// 174 bytes of CODE memory (+ 10 bytes shared)
//   3 bytes of DATA memory (+  6 bytes shared)
//
//Errors: none
//Warnings: none

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        08/Jan/2016  15:31:42 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\mai #
#                    n.c                                                      #
#    Command line =  "D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\ma #
#                    in.c" --cpu=m16 -ms -o "D:\soc2015\1305B\SOC_pachet_exam #
#                    en\Gen_FqWDT(PWM33%)\Debug\Obj\" -lC                     #
#                    "D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\De #
#                    bug\List\" -lA "D:\soc2015\1305B\SOC_pachet_examen\Gen_F #
#                    qWDT(PWM33%)\Debug\List\" --initializers_in_flash        #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\Deb #
#                    ug\List\main.lst                                         #
#    Object file  =  D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\Deb #
#                    ug\Obj\main.r90                                          #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\SOC_pachet_examen\Gen_FqWDT(PWM33%)\main.c
      1          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include<inavr.h>
      3          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          unsigned int nrOvf;
   \                     nrOvf:
   \   00000000                      DS8 2
      5          
      6          #pragma vector = TIMER0_COMP_vect

   \                                 In  segment CODE, align 2, keep-with-next
      7          __interrupt void isr_TIMER0_overflow()
   \                     isr_TIMER0_overflow:
      8          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
      9            nrOvf++;
   \   0000000C   ....               LDI     R30, LOW(nrOvf)
   \   0000000E   ....               LDI     R31, (nrOvf) >> 8
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
     10          }
   \   0000001C   BF2F               OUT     0x3F, R18
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   91E9               LD      R30, Y+
   \   00000026   91F9               LD      R31, Y+
   \   00000028   9518               RETI
     11          

   \                                 In  segment NEAR_N, align 1, keep-with-next
     12          __no_init unsigned char valAnt;
   \                     valAnt:
   \   00000000                      DS8 1
     13          

   \                                 In  segment CODE, align 2, keep-with-next
     14          void main( void )
   \                     main:
     15          {
     16            DDRD |= (1 << PD5);
   \   00000000   9A8D               SBI     0x11, 0x05
     17            if(valAnt == 0)
   \   00000002   9100....           LDS     R16, valAnt
   \   00000006   2300               TST     R16
   \   00000008   F409               BRNE    ??main_0
     18              PORTD |= (1 << PD5);
   \   0000000A   9A95               SBI     0x12, 0x05
     19            
     20            TCCR0 |= (1<<WGM01) | (0<<WGM00) | (1 << CS01) | (1 << CS00);
   \                     ??main_0:
   \   0000000C   B703               IN      R16, 0x33
   \   0000000E   600B               ORI     R16, 0x0B
   \   00000010   BF03               OUT     0x33, R16
     21            TIMSK |= (1 << OCIE0);
   \   00000012   B709               IN      R16, 0x39
   \   00000014   6002               ORI     R16, 0x02
   \   00000016   BF09               OUT     0x39, R16
     22            __enable_interrupt();
   \   00000018   9478               SEI
     23            
     24            OCR0=253;
   \   0000001A   EF0D               LDI     R16, 253
   \   0000001C   BF0C               OUT     0x3C, R16
     25          
     26            if(valAnt == 1)
   \   0000001E   9100....           LDS     R16, valAnt
   \   00000022   3001               CPI     R16, 1
   \   00000024   F4B9               BRNE    ??main_1
     27            {
     28              while(1)
     29              {
     30                if(nrOvf == 2)
   \                     ??main_2:
   \   00000026   9100....           LDS     R16, nrOvf
   \   0000002A   9110....           LDS     R17, (nrOvf + 1)
   \   0000002E   3002               CPI     R16, 2
   \   00000030   E020               LDI     R18, 0
   \   00000032   0712               CPC     R17, R18
   \   00000034   F7C1               BRNE    ??main_2
     31                {
     32                  nrOvf++;
   \   00000036   ....               LDI     R30, LOW(nrOvf)
   \   00000038   ....               LDI     R31, (nrOvf) >> 8
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8300               ST      Z, R16
   \   00000044   8311               STD     Z+1, R17
     33                  valAnt = 0;
   \   00000046   E000               LDI     R16, 0
   \   00000048   9300....           STS     valAnt, R16
     34                  WDTCR |= (0 << WDP2) | (0 << WDP1) | (1 << WDP0) | (1 << WDE);
   \   0000004C   B501               IN      R16, 0x21
   \   0000004E   6009               ORI     R16, 0x09
   \   00000050   BD01               OUT     0x21, R16
   \   00000052   CFE9               RJMP    ??main_2
     35                }
     36              }
     37            }
     38            else
     39            {
     40              while(1)
     41              {
     42                if(nrOvf == 1)
   \                     ??main_1:
   \   00000054   9100....           LDS     R16, nrOvf
   \   00000058   9110....           LDS     R17, (nrOvf + 1)
   \   0000005C   3001               CPI     R16, 1
   \   0000005E   E020               LDI     R18, 0
   \   00000060   0712               CPC     R17, R18
   \   00000062   F7C1               BRNE    ??main_1
     43                {
     44                  nrOvf++;
   \   00000064   ....               LDI     R30, LOW(nrOvf)
   \   00000066   ....               LDI     R31, (nrOvf) >> 8
   \   00000068   8100               LD      R16, Z
   \   0000006A   8111               LDD     R17, Z+1
   \   0000006C   5F0F               SUBI    R16, 255
   \   0000006E   4F1F               SBCI    R17, 255
   \   00000070   8300               ST      Z, R16
   \   00000072   8311               STD     Z+1, R17
     45                  valAnt = 1;
   \   00000074   E001               LDI     R16, 1
   \   00000076   9300....           STS     valAnt, R16
     46                  PORTD |= (1 << PD5); 
   \   0000007A   9A95               SBI     0x12, 0x05
     47                  WDTCR |= (0 << WDP2) | (0 << WDP0) | (1 << WDE);
   \   0000007C   B501               IN      R16, 0x21
   \   0000007E   6008               ORI     R16, 0x08
   \   00000080   BD01               OUT     0x21, R16
   \   00000082   CFE8               RJMP    ??main_1
   \   00000084                      REQUIRE _A_DDRD
   \   00000084                      REQUIRE _A_PORTD
   \   00000084                      REQUIRE _A_TCCR0
   \   00000084                      REQUIRE _A_TIMSK
   \   00000084                      REQUIRE _A_OCR0
   \   00000084                      REQUIRE _A_WDTCR
     48                }
     49              }
     50            }
     51          }

   \                                 In  segment INTVEC, offset 0x4c, root
   \                     `??isr_TIMER0_overflow??INTVEC 76`:
   \   0000004C   ........           JMP     isr_TIMER0_overflow

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       5      2  isr_TIMER0_overflow
       0      2  main


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??isr_TIMER0_overflow??INTVEC 76
       1  _A_DDRD
       1  _A_OCR0
       1  _A_PORTD
       1  _A_TCCR0
       1  _A_TIMSK
       1  _A_WDTCR
      42  isr_TIMER0_overflow
     132  main
       2  nrOvf
       1  valAnt
       6  -- Other

 
   6 bytes in segment ABSOLUTE
 174 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
   1 byte  in segment NEAR_N
   2 bytes in segment NEAR_Z
 
 174 bytes of CODE memory (+ 10 bytes shared)
   3 bytes of DATA memory (+  6 bytes shared)

Errors: none
Warnings: none

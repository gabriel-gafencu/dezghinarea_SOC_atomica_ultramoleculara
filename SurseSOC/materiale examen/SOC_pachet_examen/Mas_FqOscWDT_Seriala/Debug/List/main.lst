###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        08/Jan/2016  11:32:38 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\SOC_pachet_examen\Mas_FqOscWDT_Seriala\ #
#                    main.c                                                   #
#    Command line =  D:\soc2015\1305B\SOC_pachet_examen\Mas_FqOscWDT_Seriala\ #
#                    main.c --cpu=m16 -ms -o D:\soc2015\1305B\SOC_pachet_exam #
#                    en\Mas_FqOscWDT_Seriala\Debug\Obj\ -lC                   #
#                    D:\soc2015\1305B\SOC_pachet_examen\Mas_FqOscWDT_Seriala\ #
#                    Debug\List\ -lA D:\soc2015\1305B\SOC_pachet_examen\Mas_F #
#                    qOscWDT_Seriala\Debug\List\ --initializers_in_flash      #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\soc2015\1305B\SOC_pachet_examen\Mas_FqOscWDT_Seriala\ #
#                    Debug\List\main.lst                                      #
#    Object file  =  D:\soc2015\1305B\SOC_pachet_examen\Mas_FqOscWDT_Seriala\ #
#                    Debug\Obj\main.r90                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\SOC_pachet_examen\Mas_FqOscWDT_Seriala\main.c
      1          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include<inavr.h>
      3          #include"usart.h"
      4          

   \                                 In  segment NEAR_N, align 1, keep-with-next
      5          __no_init unsigned int overflowsNo;
   \                     overflowsNo:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_N, align 1, keep-with-next
      6          __no_init unsigned int timerVal;
   \                     timerVal:
   \   00000000                      DS8 2
      7          
      8          #pragma vector = TIMER1_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
      9          __interrupt void isr_TIMER1_OVF_vect()
   \                     isr_TIMER1_OVF_vect:
     10          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
     11            overflowsNo++; 
   \   0000000C   ....               LDI     R30, LOW(overflowsNo)
   \   0000000E   ....               LDI     R31, (overflowsNo) >> 8
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
     12          }
   \   0000001C   BF2F               OUT     0x3F, R18
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   91E9               LD      R30, Y+
   \   00000026   91F9               LD      R31, Y+
   \   00000028   9518               RETI
     13          

   \                                 In  segment CODE, align 2, keep-with-next
     14          void main( void )
   \                     main:
     15          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   9760               SBIW    R29:R28, 16
     16            USART_init(BAUD_RATE);
   \   00000006   E00C               LDI     R16, 12
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    USART_init
     17            DDRD |= (1 << PD1);
   \   0000000E   9A89               SBI     0x11, 0x01
     18            
     19            unsigned long long timePass = overflowsNo;
   \   00000010   9100....           LDS     R16, overflowsNo
   \   00000014   9110....           LDS     R17, (overflowsNo + 1)
   \   00000018   E020               LDI     R18, 0
   \   0000001A   E030               LDI     R19, 0
   \   0000001C   E040               LDI     R20, 0
   \   0000001E   E050               LDI     R21, 0
   \   00000020   E060               LDI     R22, 0
   \   00000022   E070               LDI     R23, 0
   \   00000024   8308               ST      Y, R16
   \   00000026   8319               STD     Y+1, R17
   \   00000028   832A               STD     Y+2, R18
   \   0000002A   833B               STD     Y+3, R19
   \   0000002C   834C               STD     Y+4, R20
   \   0000002E   835D               STD     Y+5, R21
   \   00000030   836E               STD     Y+6, R22
   \   00000032   837F               STD     Y+7, R23
     20            timePass *= 65536;
   \   00000034   8108               LD      R16, Y
   \   00000036   8119               LDD     R17, Y+1
   \   00000038   812A               LDD     R18, Y+2
   \   0000003A   813B               LDD     R19, Y+3
   \   0000003C   814C               LDD     R20, Y+4
   \   0000003E   815D               LDD     R21, Y+5
   \   00000040   816E               LDD     R22, Y+6
   \   00000042   817F               LDD     R23, Y+7
   \   00000044   ....               LDI     R26, LOW(__Constant_10000_0)
   \   00000046   ....               LDI     R27, (__Constant_10000_0) >> 8
   \   00000048   ........           CALL    ?LL_MUL_L12
   \   0000004C   8308               ST      Y, R16
   \   0000004E   8319               STD     Y+1, R17
   \   00000050   832A               STD     Y+2, R18
   \   00000052   833B               STD     Y+3, R19
   \   00000054   834C               STD     Y+4, R20
   \   00000056   835D               STD     Y+5, R21
   \   00000058   836E               STD     Y+6, R22
   \   0000005A   837F               STD     Y+7, R23
     21            timePass += timerVal;
   \   0000005C   9100....           LDS     R16, timerVal
   \   00000060   9110....           LDS     R17, (timerVal + 1)
   \   00000064   E020               LDI     R18, 0
   \   00000066   E030               LDI     R19, 0
   \   00000068   E040               LDI     R20, 0
   \   0000006A   E050               LDI     R21, 0
   \   0000006C   E060               LDI     R22, 0
   \   0000006E   E070               LDI     R23, 0
   \   00000070   8708               STD     Y+8, R16
   \   00000072   8719               STD     Y+9, R17
   \   00000074   872A               STD     Y+10, R18
   \   00000076   873B               STD     Y+11, R19
   \   00000078   874C               STD     Y+12, R20
   \   0000007A   875D               STD     Y+13, R21
   \   0000007C   876E               STD     Y+14, R22
   \   0000007E   877F               STD     Y+15, R23
   \   00000080   8108               LD      R16, Y
   \   00000082   8119               LDD     R17, Y+1
   \   00000084   812A               LDD     R18, Y+2
   \   00000086   813B               LDD     R19, Y+3
   \   00000088   814C               LDD     R20, Y+4
   \   0000008A   815D               LDD     R21, Y+5
   \   0000008C   816E               LDD     R22, Y+6
   \   0000008E   817F               LDD     R23, Y+7
   \   00000090   01FE               MOVW    R31:R30, R29:R28
   \   00000092   9638               ADIW    R31:R30, 8
   \   00000094   ........           CALL    ?LL_ADD_L12
   \   00000098   8308               ST      Y, R16
   \   0000009A   8319               STD     Y+1, R17
   \   0000009C   832A               STD     Y+2, R18
   \   0000009E   833B               STD     Y+3, R19
   \   000000A0   834C               STD     Y+4, R20
   \   000000A2   835D               STD     Y+5, R21
   \   000000A4   836E               STD     Y+6, R22
   \   000000A6   837F               STD     Y+7, R23
     22            timePass = timePass * 249 / 1000;
   \   000000A8   8108               LD      R16, Y
   \   000000AA   8119               LDD     R17, Y+1
   \   000000AC   812A               LDD     R18, Y+2
   \   000000AE   813B               LDD     R19, Y+3
   \   000000B0   814C               LDD     R20, Y+4
   \   000000B2   815D               LDD     R21, Y+5
   \   000000B4   816E               LDD     R22, Y+6
   \   000000B6   817F               LDD     R23, Y+7
   \   000000B8   ....               LDI     R26, LOW(__Constant_f9_0)
   \   000000BA   ....               LDI     R27, (__Constant_f9_0) >> 8
   \   000000BC   ........           CALL    ?LL_MUL_L12
   \   000000C0   8708               STD     Y+8, R16
   \   000000C2   8719               STD     Y+9, R17
   \   000000C4   872A               STD     Y+10, R18
   \   000000C6   873B               STD     Y+11, R19
   \   000000C8   874C               STD     Y+12, R20
   \   000000CA   875D               STD     Y+13, R21
   \   000000CC   876E               STD     Y+14, R22
   \   000000CE   877F               STD     Y+15, R23
   \   000000D0   8508               LDD     R16, Y+8
   \   000000D2   8519               LDD     R17, Y+9
   \   000000D4   852A               LDD     R18, Y+10
   \   000000D6   853B               LDD     R19, Y+11
   \   000000D8   854C               LDD     R20, Y+12
   \   000000DA   855D               LDD     R21, Y+13
   \   000000DC   856E               LDD     R22, Y+14
   \   000000DE   857F               LDD     R23, Y+15
   \   000000E0   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   000000E2   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   000000E4   ........           CALL    ?ULL_DIV_L12
   \   000000E8   8308               ST      Y, R16
   \   000000EA   8319               STD     Y+1, R17
   \   000000EC   832A               STD     Y+2, R18
   \   000000EE   833B               STD     Y+3, R19
   \   000000F0   834C               STD     Y+4, R20
   \   000000F2   835D               STD     Y+5, R21
   \   000000F4   836E               STD     Y+6, R22
   \   000000F6   837F               STD     Y+7, R23
     23            
     24            unsigned long long freq = 524288;
   \   000000F8   2488               CLR     R8
   \   000000FA   2499               CLR     R9
   \   000000FC   E008               LDI     R16, 8
   \   000000FE   2EA0               MOV     R10, R16
   \   00000100   24BB               CLR     R11
   \   00000102   24CC               CLR     R12
   \   00000104   24DD               CLR     R13
   \   00000106   24EE               CLR     R14
   \   00000108   24FF               CLR     R15
     25            freq = freq * 1000000 / timePass;
   \   0000010A   0184               MOVW    R17:R16, R9:R8
   \   0000010C   0195               MOVW    R19:R18, R11:R10
   \   0000010E   01A6               MOVW    R21:R20, R13:R12
   \   00000110   01B7               MOVW    R23:R22, R15:R14
   \   00000112   ....               LDI     R26, LOW(__Constant_f4240_0)
   \   00000114   ....               LDI     R27, (__Constant_f4240_0) >> 8
   \   00000116   ........           CALL    ?LL_MUL_L12
   \   0000011A   8708               STD     Y+8, R16
   \   0000011C   8719               STD     Y+9, R17
   \   0000011E   872A               STD     Y+10, R18
   \   00000120   873B               STD     Y+11, R19
   \   00000122   874C               STD     Y+12, R20
   \   00000124   875D               STD     Y+13, R21
   \   00000126   876E               STD     Y+14, R22
   \   00000128   877F               STD     Y+15, R23
   \   0000012A   8508               LDD     R16, Y+8
   \   0000012C   8519               LDD     R17, Y+9
   \   0000012E   852A               LDD     R18, Y+10
   \   00000130   853B               LDD     R19, Y+11
   \   00000132   854C               LDD     R20, Y+12
   \   00000134   855D               LDD     R21, Y+13
   \   00000136   856E               LDD     R22, Y+14
   \   00000138   857F               LDD     R23, Y+15
   \   0000013A   01DE               MOVW    R27:R26, R29:R28
   \   0000013C   ........           CALL    ?ULL_DIV_L12
   \   00000140   0148               MOVW    R9:R8, R17:R16
   \   00000142   0159               MOVW    R11:R10, R19:R18
   \   00000144   016A               MOVW    R13:R12, R21:R20
   \   00000146   017B               MOVW    R15:R14, R23:R22
     26            
     27            USART_transmit_ulonglong(freq);
   \   00000148   0184               MOVW    R17:R16, R9:R8
   \   0000014A   0195               MOVW    R19:R18, R11:R10
   \   0000014C   01A6               MOVW    R21:R20, R13:R12
   \   0000014E   01B7               MOVW    R23:R22, R15:R14
   \   00000150   ........           CALL    USART_transmit_ulonglong
     28            USART_transmit('\r');
   \   00000154   E00D               LDI     R16, 13
   \   00000156   ........           CALL    USART_transmit
     29            USART_transmit('\n');
   \   0000015A   E00A               LDI     R16, 10
   \   0000015C   ........           CALL    USART_transmit
     30            
     31            overflowsNo = 0;
   \   00000160   E000               LDI     R16, 0
   \   00000162   E010               LDI     R17, 0
   \   00000164   9300....           STS     overflowsNo, R16
   \   00000168   9310....           STS     (overflowsNo + 1), R17
     32            timerVal = 0;
   \   0000016C   E000               LDI     R16, 0
   \   0000016E   E010               LDI     R17, 0
   \   00000170   9300....           STS     timerVal, R16
   \   00000174   9310....           STS     (timerVal + 1), R17
     33            
     34            WDTCR |= (1 << WDP2) | (0 << WDP1) | (1 << WDP0);
   \   00000178   B501               IN      R16, 0x21
   \   0000017A   6005               ORI     R16, 0x05
   \   0000017C   BD01               OUT     0x21, R16
     35            TIMSK |= (1 << TOIE1);
   \   0000017E   B709               IN      R16, 0x39
   \   00000180   6004               ORI     R16, 0x04
   \   00000182   BF09               OUT     0x39, R16
     36            __enable_interrupt();
   \   00000184   9478               SEI
     37            TCCR1B |= (1 << CS10);
   \   00000186   B50E               IN      R16, 0x2E
   \   00000188   6001               ORI     R16, 0x01
   \   0000018A   BD0E               OUT     0x2E, R16
     38            WDTCR |= (1 << WDE);
   \   0000018C   B501               IN      R16, 0x21
   \   0000018E   6008               ORI     R16, 0x08
   \   00000190   BD01               OUT     0x21, R16
     39            
     40            while(1)
     41              timerVal = TCNT1;
   \                     ??main_0:
   \   00000192   B50C               IN      R16, 0x2C
   \   00000194   B51D               IN      R17, 0x2D
   \   00000196   9300....           STS     timerVal, R16
   \   0000019A   9310....           STS     (timerVal + 1), R17
   \   0000019E   CFF9               RJMP    ??main_0
   \   000001A0                      REQUIRE _A_DDRD
   \   000001A0                      REQUIRE _A_WDTCR
   \   000001A0                      REQUIRE _A_TIMSK
   \   000001A0                      REQUIRE _A_TCCR1B
   \   000001A0                      REQUIRE _A_TCNT1
     42          }

   \                                 In  segment INTVEC, offset 0x20, root
   \                     `??isr_TIMER1_OVF_vect??INTVEC 32`:
   \   00000020   ........           JMP     isr_TIMER1_OVF_vect

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   000000010000       DD 65536, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_10000_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_1`:
   \   00000000   00F900000000       DD 249, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_f9_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_1`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_2`:
   \   00000000   03E800000000       DD 1000, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_3e8_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_2`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_3`:
   \   00000000   4240000F0000       DD 1000000, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_f4240_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_3`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       5      2  isr_TIMER1_OVF_vect
      32      4  main
                   32 2 -> USART_init
                   32 2 -> USART_transmit
                   32 2 -> USART_transmit_ulonglong


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for 64 Bit Constant>_0
       8  ?<Initializer for 64 Bit Constant>_1
       8  ?<Initializer for 64 Bit Constant>_2
       8  ?<Initializer for 64 Bit Constant>_3
       4  ??isr_TIMER1_OVF_vect??INTVEC 32
       1  _A_DDRD
       1  _A_TCCR1B
       2  _A_TCNT1
       1  _A_TIMSK
       1  _A_WDTCR
       8  __Constant_10000_0
       8  __Constant_3e8_0
       8  __Constant_f4240_0
       8  __Constant_f9_0
      42  isr_TIMER1_OVF_vect
     416  main
       2  overflowsNo
       2  timerVal
       6  -- Other

 
   6 bytes in segment ABSOLUTE
 458 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
  32 bytes in segment NEAR_I
  32 bytes in segment NEAR_ID
   4 bytes in segment NEAR_N
 
 458 bytes of CODE memory (+ 42 bytes shared)
   4 bytes of DATA memory (+ 38 bytes shared)

Errors: none
Warnings: none

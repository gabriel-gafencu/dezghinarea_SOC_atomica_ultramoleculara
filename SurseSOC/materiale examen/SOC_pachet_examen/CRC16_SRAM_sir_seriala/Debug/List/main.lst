###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        09/Jan/2016  07:14:47 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_SRAM_sir_serial #
#                    a\main.c                                                 #
#    Command line =  "D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_SRAM_sir_seria #
#                    la\main.c" --cpu=m16 -ms -o "D:\soc                      #
#                    2015\TEMP\SOC_pachet_examen\CRC16_SRAM_sir_seriala\Debug #
#                    \Obj\" -lC "D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_SRA #
#                    M_sir_seriala\Debug\List\" -lA "D:\soc                   #
#                    2015\TEMP\SOC_pachet_examen\CRC16_SRAM_sir_seriala\Debug #
#                    \List\" --initializers_in_flash --no_cse --no_inline     #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_SRAM_sir_serial #
#                    a\Debug\List\main.lst                                    #
#    Object file  =  D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_SRAM_sir_serial #
#                    a\Debug\Obj\main.r90                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_SRAM_sir_seriala\main.c
      1          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include<inavr.h>
      3          #include"crc.h"
      4          #include"usart.h"
      5          

   \                                 In  segment CODE, align 2, keep-with-next
      6          void main( void )
   \                     main:
      7          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   97EF               SBIW    R29:R28, 63
   \   00000006   9721               SBIW    R29:R28, 1
      8            USART_init(BAUD_RATE);
   \   00000008   E00C               LDI     R16, 12
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   ........           CALL    USART_init
      9            DDRD |= (1 << PD1);
   \   00000010   9A89               SBI     0x11, 0x01
     10            
     11            unsigned int my_crc16_calc;
     12            unsigned int my_crc16_tab;
                                ^
Warning[Pe550]: variable "my_crc16_tab" was set but never used
     13            
     14            unsigned int adrStr;
     15            unsigned char recStr[64];
     16            unsigned int index = 0;
   \   00000012   E080               LDI     R24, 0
   \   00000014   E090               LDI     R25, 0
     17            
     18            while(1)
     19            {
     20              recStr[index] = USART_receive();
   \                     ??main_0:
   \   00000016   ........           CALL    USART_receive
   \   0000001A   01FE               MOVW    R31:R30, R29:R28
   \   0000001C   0FE8               ADD     R30, R24
   \   0000001E   1FF9               ADC     R31, R25
   \   00000020   8300               ST      Z, R16
     21              while(recStr[index] != '@')
   \                     ??main_1:
   \   00000022   01FE               MOVW    R31:R30, R29:R28
   \   00000024   0FE8               ADD     R30, R24
   \   00000026   1FF9               ADC     R31, R25
   \   00000028   8100               LD      R16, Z
   \   0000002A   3400               CPI     R16, 64
   \   0000002C   F041               BREQ    ??main_2
     22              {
     23                index++;
   \   0000002E   9601               ADIW    R25:R24, 1
     24                recStr[index] = USART_receive();
   \   00000030   ........           CALL    USART_receive
   \   00000034   01FE               MOVW    R31:R30, R29:R28
   \   00000036   0FE8               ADD     R30, R24
   \   00000038   1FF9               ADC     R31, R25
   \   0000003A   8300               ST      Z, R16
   \   0000003C   CFF2               RJMP    ??main_1
     25              }
     26              
     27              adrStr = (unsigned int)(recStr);
   \                     ??main_2:
   \   0000003E   018E               MOVW    R17:R16, R29:R28
   \   00000040   01D8               MOVW    R27:R26, R17:R16
     28              my_crc16_calc = crc16(CRC16_CCITT, 0, adrStr, index, MSBF);
   \   00000042   E001               LDI     R16, 1
   \   00000044   930A               ST      -Y, R16
   \   00000046   01BC               MOVW    R23:R22, R25:R24
   \   00000048   01AD               MOVW    R21:R20, R27:R26
   \   0000004A   E020               LDI     R18, 0
   \   0000004C   E030               LDI     R19, 0
   \   0000004E   E201               LDI     R16, 33
   \   00000050   E110               LDI     R17, 16
   \   00000052   ........           CALL    crc16
   \   00000056   0128               MOVW    R5:R4, R17:R16
     29              my_crc16_tab = crc16wtable(0, adrStr, index);
   \   00000058   01AC               MOVW    R21:R20, R25:R24
   \   0000005A   019D               MOVW    R19:R18, R27:R26
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   E010               LDI     R17, 0
   \   00000060   ........           CALL    crc16wtable
   \   00000064   0138               MOVW    R7:R6, R17:R16
     30              
     31              int i;
     32              USART_transmit('<');
   \   00000066   E30C               LDI     R16, 60
   \   00000068   ........           CALL    USART_transmit
     33              for(i = 0; i < index; i++)
   \   0000006C   2488               CLR     R8
   \   0000006E   2499               CLR     R9
   \                     ??main_3:
   \   00000070   1688               CP      R8, R24
   \   00000072   0699               CPC     R9, R25
   \   00000074   F458               BRCC    ??main_4
     34              {
     35                USART_transmit(recStr[i]);
   \   00000076   01FE               MOVW    R31:R30, R29:R28
   \   00000078   0DE8               ADD     R30, R8
   \   0000007A   1DF9               ADC     R31, R9
   \   0000007C   8100               LD      R16, Z
   \   0000007E   ........           CALL    USART_transmit
     36              }
   \   00000082   E001               LDI     R16, 1
   \   00000084   0E80               ADD     R8, R16
   \   00000086   E000               LDI     R16, 0
   \   00000088   1E90               ADC     R9, R16
   \   0000008A   CFF2               RJMP    ??main_3
     37              USART_transmit(' ');
   \                     ??main_4:
   \   0000008C   E200               LDI     R16, 32
   \   0000008E   ........           CALL    USART_transmit
     38              USART_transmit('C');
   \   00000092   E403               LDI     R16, 67
   \   00000094   ........           CALL    USART_transmit
     39              USART_transmit('R');
   \   00000098   E502               LDI     R16, 82
   \   0000009A   ........           CALL    USART_transmit
     40              USART_transmit('C');
   \   0000009E   E403               LDI     R16, 67
   \   000000A0   ........           CALL    USART_transmit
     41              USART_transmit('1');
   \   000000A4   E301               LDI     R16, 49
   \   000000A6   ........           CALL    USART_transmit
     42              USART_transmit('6');
   \   000000AA   E306               LDI     R16, 54
   \   000000AC   ........           CALL    USART_transmit
     43              USART_transmit(':');
   \   000000B0   E30A               LDI     R16, 58
   \   000000B2   ........           CALL    USART_transmit
     44              hexadecimalTransmit(my_crc16_calc);
   \   000000B6   0182               MOVW    R17:R16, R5:R4
   \   000000B8   ........           CALL    hexadecimalTransmit
     45              USART_transmit('>');
   \   000000BC   E30E               LDI     R16, 62
   \   000000BE   ........           CALL    USART_transmit
     46              USART_transmit('\r');
   \   000000C2   E00D               LDI     R16, 13
   \   000000C4   ........           CALL    USART_transmit
     47              USART_transmit('\n');
   \   000000C8   E00A               LDI     R16, 10
   \   000000CA   ........           CALL    USART_transmit
     48              
     49              index = 0;
   \   000000CE   E080               LDI     R24, 0
   \   000000D0   E090               LDI     R25, 0
   \   000000D2   CFA1               RJMP    ??main_0
   \   000000D4                      REQUIRE _A_DDRD
     50            }
     51          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      75      2  main
                   74 2 -> USART_init
                   74 2 -> USART_receive
                   74 2 -> USART_transmit
                   75 2 -> crc16
                   74 2 -> crc16wtable
                   74 2 -> hexadecimalTransmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_DDRD
     212  main

 
   1 byte  in segment ABSOLUTE
 212 bytes in segment CODE
 
 212 bytes of CODE memory
   0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: 1

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        09/Jan/2016  07:09:21 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_FLASH_2adr_seri #
#                    ala\main.c                                               #
#    Command line =  "D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_FLASH_2adr_ser #
#                    iala\main.c" --cpu=m16 -ms -o "D:\soc                    #
#                    2015\TEMP\SOC_pachet_examen\CRC16_FLASH_2adr_seriala\Deb #
#                    ug\Obj\" -lC "D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_F #
#                    LASH_2adr_seriala\Debug\List\" -lA "D:\soc               #
#                    2015\TEMP\SOC_pachet_examen\CRC16_FLASH_2adr_seriala\Deb #
#                    ug\List\" --initializers_in_flash --no_cse --no_inline   #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_FLASH_2adr_seri #
#                    ala\Debug\List\main.lst                                  #
#    Object file  =  D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_FLASH_2adr_seri #
#                    ala\Debug\Obj\main.r90                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc 2015\TEMP\SOC_pachet_examen\CRC16_FLASH_2adr_seriala\main.c
      1          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include<inavr.h>
      3          #include"crc.h"
      4          #include"usart.h"
      5          

   \                                 In  segment CODE, align 2, keep-with-next
      6          void main( void )
   \                     main:
      7          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
      8            USART_init(BAUD_RATE);
   \   00000004   E00C               LDI     R16, 12
   \   00000006   E010               LDI     R17, 0
   \   00000008   ........           CALL    USART_init
      9            DDRD |= (1 << PD1);
   \   0000000C   9A89               SBI     0x11, 0x01
     10            
     11            unsigned int startAdress, finalAdress;
     12            unsigned int memLen;
     13            unsigned int my_crc16_calc;
     14            unsigned int my_crc16_tab;
                                ^
Warning[Pe550]: variable "my_crc16_tab" was set but never used
     15            
     16            while(1)
     17            {
     18              startAdress = USART_receive_hexa_adress();
   \                     ??main_0:
   \   0000000E   ........           CALL    USART_receive_hexa_adress
   \   00000012   01C8               MOVW    R25:R24, R17:R16
     19              finalAdress = USART_receive_hexa_adress();
   \   00000014   ........           CALL    USART_receive_hexa_adress
   \   00000018   01D8               MOVW    R27:R26, R17:R16
     20              memLen = finalAdress - startAdress;
   \   0000001A   018D               MOVW    R17:R16, R27:R26
   \   0000001C   1B08               SUB     R16, R24
   \   0000001E   0B19               SBC     R17, R25
   \   00000020   0138               MOVW    R7:R6, R17:R16
     21              
     22              my_crc16_calc = crc16(CRC16_CCITT, 0, startAdress, memLen, MSBF);
   \   00000022   E001               LDI     R16, 1
   \   00000024   930A               ST      -Y, R16
   \   00000026   01B3               MOVW    R23:R22, R7:R6
   \   00000028   01AC               MOVW    R21:R20, R25:R24
   \   0000002A   E020               LDI     R18, 0
   \   0000002C   E030               LDI     R19, 0
   \   0000002E   E201               LDI     R16, 33
   \   00000030   E110               LDI     R17, 16
   \   00000032   ........           CALL    crc16
   \   00000036   0128               MOVW    R5:R4, R17:R16
     23              my_crc16_tab = crc16wtable(0, startAdress, memLen);
   \   00000038   01A3               MOVW    R21:R20, R7:R6
   \   0000003A   019C               MOVW    R19:R18, R25:R24
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   E010               LDI     R17, 0
   \   00000040   ........           CALL    crc16wtable
   \   00000044   0148               MOVW    R9:R8, R17:R16
     24              
     25              USART_transmit('C');
   \   00000046   E403               LDI     R16, 67
   \   00000048   ........           CALL    USART_transmit
     26              USART_transmit('R');
   \   0000004C   E502               LDI     R16, 82
   \   0000004E   ........           CALL    USART_transmit
     27              USART_transmit('C');
   \   00000052   E403               LDI     R16, 67
   \   00000054   ........           CALL    USART_transmit
     28              USART_transmit('1');
   \   00000058   E301               LDI     R16, 49
   \   0000005A   ........           CALL    USART_transmit
     29              USART_transmit('6');
   \   0000005E   E306               LDI     R16, 54
   \   00000060   ........           CALL    USART_transmit
     30              USART_transmit(':');
   \   00000064   E30A               LDI     R16, 58
   \   00000066   ........           CALL    USART_transmit
     31              USART_transmit(' ');
   \   0000006A   E200               LDI     R16, 32
   \   0000006C   ........           CALL    USART_transmit
     32              hexadecimalTransmit(my_crc16_calc);
   \   00000070   0182               MOVW    R17:R16, R5:R4
   \   00000072   ........           CALL    hexadecimalTransmit
     33              USART_transmit('\r');
   \   00000076   E00D               LDI     R16, 13
   \   00000078   ........           CALL    USART_transmit
     34              USART_transmit('\n');
   \   0000007C   E00A               LDI     R16, 10
   \   0000007E   ........           CALL    USART_transmit
   \   00000082   CFC5               RJMP    ??main_0
   \   00000084                      REQUIRE _A_DDRD
     35            }
     36          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      11      2  main
                   10 2 -> USART_init
                   10 2 -> USART_receive_hexa_adress
                   10 2 -> USART_transmit
                   11 2 -> crc16
                   10 2 -> crc16wtable
                   10 2 -> hexadecimalTransmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_DDRD
     132  main

 
   1 byte  in segment ABSOLUTE
 132 bytes in segment CODE
 
 132 bytes of CODE memory
   0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: 1

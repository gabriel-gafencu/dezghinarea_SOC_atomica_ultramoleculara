###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        29/Dec/2015  21:16:34 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\LucruExtra\Problema4_BORED\main.c       #
#    Command line =  D:\soc2015\1305B\LucruExtra\Problema4_BORED\main.c       #
#                    --cpu=m16 -ms -o D:\soc2015\1305B\LucruExtra\Problema4_B #
#                    ORED\Debug\Obj\ -lC D:\soc2015\1305B\LucruExtra\Problema #
#                    4_BORED\Debug\List\ -lA D:\soc2015\1305B\LucruExtra\Prob #
#                    lema4_BORED\Debug\List\ --initializers_in_flash          #
#                    --no_cse --no_inline --no_code_motion --no_cross_call    #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\soc2015\1305B\LucruExtra\Problema4_BORED\Debug\List\m #
#                    ain.lst                                                  #
#    Object file  =  D:\soc2015\1305B\LucruExtra\Problema4_BORED\Debug\Obj\ma #
#                    in.r90                                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\LucruExtra\Problema4_BORED\main.c
      1          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include<inavr.h>
      3          #include"usart.h"
      4          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      5          unsigned char softFlag;
   \                     softFlag:
   \   00000000                      DS8 1
      6          
      7          #pragma vector = TIMER0_COMP_vect

   \                                 In  segment CODE, align 2, keep-with-next
      8          __interrupt void isr_TIMER0_COMP_vect()
   \                     isr_TIMER0_COMP_vect:
      9          {
   \   00000000   931A               ST      -Y, R17
   \   00000002   930A               ST      -Y, R16
   \   00000004   B71F               IN      R17, 0x3F
     10            softFlag = 1;
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     softFlag, R16
     11          }
   \   0000000C   BF1F               OUT     0x3F, R17
   \   0000000E   9109               LD      R16, Y+
   \   00000010   9119               LD      R17, Y+
   \   00000012   9518               RETI
     12          

   \                                 In  segment CODE, align 2, keep-with-next
     13          void main( void )
   \                     main:
     14          {
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
     15            USART_init(BAUD_RATE);
   \   00000004   E00C               LDI     R16, 12
   \   00000006   E010               LDI     R17, 0
   \   00000008   ........           CALL    USART_init
     16            DDRD = (1 << PD1);
   \   0000000C   E002               LDI     R16, 2
   \   0000000E   BB01               OUT     0x11, R16
     17            
     18            TCCR0 = (1 << WGM01) | (0 << WGM00) | (1 << CS02) | (0 << CS01) | (1 << CS00);
   \   00000010   E00D               LDI     R16, 13
   \   00000012   BF03               OUT     0x33, R16
     19            OCR0 = 135;
   \   00000014   E807               LDI     R16, 135
   \   00000016   BF0C               OUT     0x3C, R16
     20            TIMSK |= (1 << OCIE0);
   \   00000018   B709               IN      R16, 0x39
   \   0000001A   6002               ORI     R16, 0x02
   \   0000001C   BF09               OUT     0x39, R16
     21            __enable_interrupt();
   \   0000001E   9478               SEI
     22            
     23            TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << WGM11) | (0 << WGM10);
   \   00000020   E802               LDI     R16, 130
   \   00000022   BD0F               OUT     0x2F, R16
     24            TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (0 << CS11) | (1 << CS10);
   \   00000024   E109               LDI     R16, 25
   \   00000026   BD0E               OUT     0x2E, R16
     25            ICR1 = 667;
   \   00000028   E90B               LDI     R16, 155
   \   0000002A   E012               LDI     R17, 2
   \   0000002C   BD17               OUT     0x27, R17
   \   0000002E   BD06               OUT     0x26, R16
     26            unsigned long aux = ICR1;
   \   00000030   B586               IN      R24, 0x26
   \   00000032   B597               IN      R25, 0x27
   \   00000034   E0A0               LDI     R26, 0
   \   00000036   E0B0               LDI     R27, 0
     27            unsigned int duty = 5;
   \   00000038   E005               LDI     R16, 5
   \   0000003A   2E40               MOV     R4, R16
   \   0000003C   2455               CLR     R5
     28            aux = aux * duty / 100;
   \   0000003E   0182               MOVW    R17:R16, R5:R4
   \   00000040   E020               LDI     R18, 0
   \   00000042   E030               LDI     R19, 0
   \   00000044   01AC               MOVW    R21:R20, R25:R24
   \   00000046   01BD               MOVW    R23:R22, R27:R26
   \   00000048   ........           CALL    ?L_EC_MUL_L03
   \   0000004C   E644               LDI     R20, 100
   \   0000004E   E050               LDI     R21, 0
   \   00000050   E060               LDI     R22, 0
   \   00000052   E070               LDI     R23, 0
   \   00000054   ........           CALL    ?UL_DIVMOD_L03
   \   00000058   01C8               MOVW    R25:R24, R17:R16
   \   0000005A   01D9               MOVW    R27:R26, R19:R18
     29            OCR1A = aux;
   \   0000005C   018C               MOVW    R17:R16, R25:R24
   \   0000005E   BD1B               OUT     0x2B, R17
   \   00000060   BD0A               OUT     0x2A, R16
     30            
     31            DDRD |= (1 << PD5);
   \   00000062   9A8D               SBI     0x11, 0x05
     32            unsigned char direction = 1;
   \   00000064   2466               CLR     R6
   \   00000066   9463               INC     R6
     33            while(1)
     34            {
     35              if(softFlag == 1)
   \                     ??main_0:
   \   00000068   9100....           LDS     R16, softFlag
   \   0000006C   3001               CPI     R16, 1
   \   0000006E   F7E1               BRNE    ??main_0
     36              {
     37                softFlag = 0;
   \   00000070   E000               LDI     R16, 0
   \   00000072   9300....           STS     softFlag, R16
     38                if(direction == 1)
   \   00000076   E001               LDI     R16, 1
   \   00000078   1660               CP      R6, R16
   \   0000007A   F429               BRNE    ??main_1
     39                  duty += 3;
   \   0000007C   E003               LDI     R16, 3
   \   0000007E   0E40               ADD     R4, R16
   \   00000080   E000               LDI     R16, 0
   \   00000082   1E50               ADC     R5, R16
   \   00000084   C004               RJMP    ??main_2
     40                else
     41                  duty -= 3;
   \                     ??main_1:
   \   00000086   EF0D               LDI     R16, 253
   \   00000088   0E40               ADD     R4, R16
   \   0000008A   EF0F               LDI     R16, 255
   \   0000008C   1E50               ADC     R5, R16
     42                
     43                if(duty >= 95)
   \                     ??main_2:
   \   0000008E   E50F               LDI     R16, 95
   \   00000090   1640               CP      R4, R16
   \   00000092   E000               LDI     R16, 0
   \   00000094   0650               CPC     R5, R16
   \   00000096   F008               BRCS    ??main_3
     44                  direction = 0;
   \   00000098   2466               CLR     R6
     45                if(duty <= 5)
   \                     ??main_3:
   \   0000009A   E006               LDI     R16, 6
   \   0000009C   1640               CP      R4, R16
   \   0000009E   E000               LDI     R16, 0
   \   000000A0   0650               CPC     R5, R16
   \   000000A2   F410               BRCC    ??main_4
     46                  direction = 1;
   \   000000A4   2466               CLR     R6
   \   000000A6   9463               INC     R6
     47                
     48                aux = ICR1;
   \                     ??main_4:
   \   000000A8   B506               IN      R16, 0x26
   \   000000AA   B517               IN      R17, 0x27
   \   000000AC   E020               LDI     R18, 0
   \   000000AE   E030               LDI     R19, 0
   \   000000B0   01C8               MOVW    R25:R24, R17:R16
   \   000000B2   01D9               MOVW    R27:R26, R19:R18
     49                aux = aux * duty / 100;
   \   000000B4   0182               MOVW    R17:R16, R5:R4
   \   000000B6   E020               LDI     R18, 0
   \   000000B8   E030               LDI     R19, 0
   \   000000BA   01AC               MOVW    R21:R20, R25:R24
   \   000000BC   01BD               MOVW    R23:R22, R27:R26
   \   000000BE   ........           CALL    ?L_EC_MUL_L03
   \   000000C2   E644               LDI     R20, 100
   \   000000C4   E050               LDI     R21, 0
   \   000000C6   E060               LDI     R22, 0
   \   000000C8   E070               LDI     R23, 0
   \   000000CA   ........           CALL    ?UL_DIVMOD_L03
   \   000000CE   01C8               MOVW    R25:R24, R17:R16
   \   000000D0   01D9               MOVW    R27:R26, R19:R18
     50                OCR1A = aux;
   \   000000D2   018C               MOVW    R17:R16, R25:R24
   \   000000D4   BD1B               OUT     0x2B, R17
   \   000000D6   BD0A               OUT     0x2A, R16
     51                
     52                USART_transmit('<');
   \   000000D8   E30C               LDI     R16, 60
   \   000000DA   ........           CALL    USART_transmit
     53                USART_transmit('F');
   \   000000DE   E406               LDI     R16, 70
   \   000000E0   ........           CALL    USART_transmit
     54                USART_transmit('=');
   \   000000E4   E30D               LDI     R16, 61
   \   000000E6   ........           CALL    USART_transmit
     55                if(duty/10 > 0)
   \   000000EA   E04A               LDI     R20, 10
   \   000000EC   E050               LDI     R21, 0
   \   000000EE   0182               MOVW    R17:R16, R5:R4
   \   000000F0   ........           CALL    ?US_DIVMOD_L02
   \   000000F4   2B01               OR      R16, R17
   \   000000F6   F021               BREQ    ??main_5
     56                  USART_transmit_uint(duty);
   \   000000F8   0182               MOVW    R17:R16, R5:R4
   \   000000FA   ........           CALL    USART_transmit_uint
   \   000000FE   C006               RJMP    ??main_6
     57                else
     58                {
     59                  USART_transmit('0');
   \                     ??main_5:
   \   00000100   E300               LDI     R16, 48
   \   00000102   ........           CALL    USART_transmit
     60                  USART_transmit_uint(duty);
   \   00000106   0182               MOVW    R17:R16, R5:R4
   \   00000108   ........           CALL    USART_transmit_uint
     61                }
     62                USART_transmit('%');
   \                     ??main_6:
   \   0000010C   E205               LDI     R16, 37
   \   0000010E   ........           CALL    USART_transmit
     63                USART_transmit('>');
   \   00000112   E30E               LDI     R16, 62
   \   00000114   ........           CALL    USART_transmit
   \   00000118   CFA7               RJMP    ??main_0
   \   0000011A                      REQUIRE _A_DDRD
   \   0000011A                      REQUIRE _A_TCCR0
   \   0000011A                      REQUIRE _A_OCR0
   \   0000011A                      REQUIRE _A_TIMSK
   \   0000011A                      REQUIRE _A_TCCR1A
   \   0000011A                      REQUIRE _A_TCCR1B
   \   0000011A                      REQUIRE _A_ICR1
   \   0000011A                      REQUIRE _A_OCR1A
     64              }
     65            }
     66          }

   \                                 In  segment INTVEC, offset 0x4c, root
   \                     `??isr_TIMER0_COMP_vect??INTVEC 76`:
   \   0000004C   ........           JMP     isr_TIMER0_COMP_vect

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       2      2  isr_TIMER0_COMP_vect
       7      4  main
                   7 2 -> USART_init
                   7 2 -> USART_transmit
                   7 2 -> USART_transmit_uint


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??isr_TIMER0_COMP_vect??INTVEC 76
       1  _A_DDRD
       2  _A_ICR1
       1  _A_OCR0
       2  _A_OCR1A
       1  _A_TCCR0
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TIMSK
      20  isr_TIMER0_COMP_vect
     282  main
       1  softFlag
       6  -- Other

 
  10 bytes in segment ABSOLUTE
 302 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
   1 byte  in segment NEAR_Z
 
 302 bytes of CODE memory (+ 10 bytes shared)
   1 byte  of DATA memory (+ 10 bytes shared)

Errors: none
Warnings: none

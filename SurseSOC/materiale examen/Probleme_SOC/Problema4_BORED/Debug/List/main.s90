///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       29/Dec/2015  21:16:34 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\soc2015\1305B\LucruExtra\Problema4_BORED\main.c      /
//    Command line =  D:\soc2015\1305B\LucruExtra\Problema4_BORED\main.c      /
//                    --cpu=m16 -ms -o D:\soc2015\1305B\LucruExtra\Problema4_ /
//                    BORED\Debug\Obj\ -lC D:\soc2015\1305B\LucruExtra\Proble /
//                    ma4_BORED\Debug\List\ -lA D:\soc2015\1305B\LucruExtra\P /
//                    roblema4_BORED\Debug\List\ --initializers_in_flash      /
//                    --no_cse --no_inline --no_code_motion --no_cross_call   /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib    /
//                    -On                                                     /
//    List file    =  D:\soc2015\1305B\LucruExtra\Problema4_BORED\Debug\List\ /
//                    main.s90                                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?L_EC_MUL_L03
        EXTERN ?PROLOGUE7_L09
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?UL_DIVMOD_L03
        EXTERN ?US_DIVMOD_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??isr_TIMER0_COMP_vect??INTVEC 76`
        PUBWEAK _A_DDRD
        PUBWEAK _A_ICR1
        PUBWEAK _A_OCR0
        PUBWEAK _A_OCR1A
        PUBWEAK _A_TCCR0
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TIMSK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC isr_TIMER0_COMP_vect
        FUNCTION isr_TIMER0_COMP_vect,0231H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC main
        FUNCTION main,021a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC softFlag
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
isr_TIMER0_COMP_vect SYMBOL "isr_TIMER0_COMP_vect"
`??isr_TIMER0_COMP_vect??INTVEC 76` SYMBOL "??INTVEC 76", isr_TIMER0_COMP_vect

        EXTERN USART_init
        FUNCTION USART_init,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN USART_transmit
        FUNCTION USART_transmit,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN USART_transmit_uint
        FUNCTION USART_transmit_uint,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\soc2015\1305B\LucruExtra\Problema4_BORED\main.c
//    1 #include<iom16.h>

        ASEGN ABSOLUTE:DATA:NOROOT,05cH
// union <unnamed> volatile __io _A_OCR0
_A_OCR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,053H
// union <unnamed> volatile __io _A_TCCR0
_A_TCCR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04fH
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04aH
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,046H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1
//    2 #include<inavr.h>
//    3 #include"usart.h"
//    4 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    5 unsigned char softFlag;
softFlag:
        DS8 1
//    6 
//    7 #pragma vector = TIMER0_COMP_vect

        RSEG CODE:CODE:NOROOT(1)
//    8 __interrupt void isr_TIMER0_COMP_vect()
isr_TIMER0_COMP_vect:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function isr_TIMER0_COMP_vect
//    9 {
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        IN      R17, 0x3F
//   10   softFlag = 1;
        LDI     R16, 1
        STS     softFlag, R16
//   11 }
        OUT     0x3F, R17
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+1
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
//   12 

        RSEG CODE:CODE:NOROOT(1)
//   13 void main( void )
main:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function main
//   14 {
        FUNCALL main, USART_init
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit_uint
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit_uint
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE7_L09
          CFI R6 Frame(CFA_Y, -1)
          CFI R5 Frame(CFA_Y, -2)
          CFI R4 Frame(CFA_Y, -3)
          CFI R27 Frame(CFA_Y, -4)
          CFI R26 Frame(CFA_Y, -5)
          CFI R25 Frame(CFA_Y, -6)
          CFI R24 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
//   15   USART_init(BAUD_RATE);
        LDI     R16, 12
        LDI     R17, 0
        CALL    USART_init
//   16   DDRD = (1 << PD1);
        LDI     R16, 2
        OUT     0x11, R16
//   17   
//   18   TCCR0 = (1 << WGM01) | (0 << WGM00) | (1 << CS02) | (0 << CS01) | (1 << CS00);
        LDI     R16, 13
        OUT     0x33, R16
//   19   OCR0 = 135;
        LDI     R16, 135
        OUT     0x3C, R16
//   20   TIMSK |= (1 << OCIE0);
        IN      R16, 0x39
        ORI     R16, 0x02
        OUT     0x39, R16
//   21   __enable_interrupt();
        SEI
//   22   
//   23   TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << WGM11) | (0 << WGM10);
        LDI     R16, 130
        OUT     0x2F, R16
//   24   TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (0 << CS11) | (1 << CS10);
        LDI     R16, 25
        OUT     0x2E, R16
//   25   ICR1 = 667;
        LDI     R16, 155
        LDI     R17, 2
        OUT     0x27, R17
        OUT     0x26, R16
//   26   unsigned long aux = ICR1;
        IN      R24, 0x26
        IN      R25, 0x27
        LDI     R26, 0
        LDI     R27, 0
//   27   unsigned int duty = 5;
        LDI     R16, 5
        MOV     R4, R16
        CLR     R5
//   28   aux = aux * duty / 100;
        MOVW    R17:R16, R5:R4
        LDI     R18, 0
        LDI     R19, 0
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        CALL    ?L_EC_MUL_L03
        LDI     R20, 100
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        CALL    ?UL_DIVMOD_L03
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//   29   OCR1A = aux;
        MOVW    R17:R16, R25:R24
        OUT     0x2B, R17
        OUT     0x2A, R16
//   30   
//   31   DDRD |= (1 << PD5);
        SBI     0x11, 0x05
//   32   unsigned char direction = 1;
        CLR     R6
        INC     R6
//   33   while(1)
//   34   {
//   35     if(softFlag == 1)
??main_0:
        LDS     R16, softFlag
        CPI     R16, 1
        BRNE    ??main_0
//   36     {
//   37       softFlag = 0;
        LDI     R16, 0
        STS     softFlag, R16
//   38       if(direction == 1)
        LDI     R16, 1
        CP      R6, R16
        BRNE    ??main_1
//   39         duty += 3;
        LDI     R16, 3
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        RJMP    ??main_2
//   40       else
//   41         duty -= 3;
??main_1:
        LDI     R16, 253
        ADD     R4, R16
        LDI     R16, 255
        ADC     R5, R16
//   42       
//   43       if(duty >= 95)
??main_2:
        LDI     R16, 95
        CP      R4, R16
        LDI     R16, 0
        CPC     R5, R16
        BRCS    ??main_3
//   44         direction = 0;
        CLR     R6
//   45       if(duty <= 5)
??main_3:
        LDI     R16, 6
        CP      R4, R16
        LDI     R16, 0
        CPC     R5, R16
        BRCC    ??main_4
//   46         direction = 1;
        CLR     R6
        INC     R6
//   47       
//   48       aux = ICR1;
??main_4:
        IN      R16, 0x26
        IN      R17, 0x27
        LDI     R18, 0
        LDI     R19, 0
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//   49       aux = aux * duty / 100;
        MOVW    R17:R16, R5:R4
        LDI     R18, 0
        LDI     R19, 0
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        CALL    ?L_EC_MUL_L03
        LDI     R20, 100
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        CALL    ?UL_DIVMOD_L03
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
//   50       OCR1A = aux;
        MOVW    R17:R16, R25:R24
        OUT     0x2B, R17
        OUT     0x2A, R16
//   51       
//   52       USART_transmit('<');
        LDI     R16, 60
        CALL    USART_transmit
//   53       USART_transmit('F');
        LDI     R16, 70
        CALL    USART_transmit
//   54       USART_transmit('=');
        LDI     R16, 61
        CALL    USART_transmit
//   55       if(duty/10 > 0)
        LDI     R20, 10
        LDI     R21, 0
        MOVW    R17:R16, R5:R4
        CALL    ?US_DIVMOD_L02
        OR      R16, R17
        BREQ    ??main_5
//   56         USART_transmit_uint(duty);
        MOVW    R17:R16, R5:R4
        CALL    USART_transmit_uint
        RJMP    ??main_6
//   57       else
//   58       {
//   59         USART_transmit('0');
??main_5:
        LDI     R16, 48
        CALL    USART_transmit
//   60         USART_transmit_uint(duty);
        MOVW    R17:R16, R5:R4
        CALL    USART_transmit_uint
//   61       }
//   62       USART_transmit('%');
??main_6:
        LDI     R16, 37
        CALL    USART_transmit
//   63       USART_transmit('>');
        LDI     R16, 62
        CALL    USART_transmit
        RJMP    ??main_0
          CFI EndBlock cfiBlock1
        REQUIRE _A_DDRD
        REQUIRE _A_TCCR0
        REQUIRE _A_OCR0
        REQUIRE _A_TIMSK
        REQUIRE _A_TCCR1A
        REQUIRE _A_TCCR1B
        REQUIRE _A_ICR1
        REQUIRE _A_OCR1A
//   64     }
//   65   }
//   66 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 76
`??isr_TIMER0_COMP_vect??INTVEC 76`:
        JMP     isr_TIMER0_COMP_vect

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
// 
//  10 bytes in segment ABSOLUTE
// 302 bytes in segment CODE
//   6 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//   1 byte  in segment NEAR_Z
// 
// 302 bytes of CODE memory (+ 10 bytes shared)
//   1 byte  of DATA memory (+ 10 bytes shared)
//
//Errors: none
//Warnings: none

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        22/Dec/2015  12:54:40 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\LucruExtra\GenF_MOD14\usart.c           #
#    Command line =  D:\soc2015\1305B\LucruExtra\GenF_MOD14\usart.c           #
#                    --cpu=m16 -ms -o D:\soc2015\1305B\LucruExtra\GenF_MOD14\ #
#                    Debug\Obj\ -lC D:\soc2015\1305B\LucruExtra\GenF_MOD14\De #
#                    bug\List\ -lA D:\soc2015\1305B\LucruExtra\GenF_MOD14\Deb #
#                    ug\List\ --initializers_in_flash --no_cse --no_inline    #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\soc2015\1305B\LucruExtra\GenF_MOD14\Debug\List\usart. #
#                    lst                                                      #
#    Object file  =  D:\soc2015\1305B\LucruExtra\GenF_MOD14\Debug\Obj\usart.r #
#                    90                                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\LucruExtra\GenF_MOD14\usart.c
      1          #include "usart.h"

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS8 1
      2          

   \                                 In  segment CODE, align 2, keep-with-next
      3          void USART_init(int baud_rate)
   \                     USART_init:
      4          {
      5            UBRRH = (baud_rate>>8); //setez baudrate-ul
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   2F23               MOV     R18, R19
   \   00000004   0F33               LSL     R19
   \   00000006   0B33               SBC     R19, R19
   \   00000008   BD20               OUT     0x20, R18
      6            UBRRL = baud_rate;
   \   0000000A   2F20               MOV     R18, R16
   \   0000000C   B929               OUT     0x09, R18
      7            UCSRB |= (1<<RXEN) | (1<<TXEN); //enable receive & transmit
   \   0000000E   B12A               IN      R18, 0x0A
   \   00000010   6128               ORI     R18, 0x18
   \   00000012   B92A               OUT     0x0A, R18
      8          }
   \   00000014   9508               RET
   \   00000016                      REQUIRE _A_UBRRH
   \   00000016                      REQUIRE _A_UBRRL
   \   00000016                      REQUIRE _A_UCSRB
      9          

   \                                 In  segment CODE, align 2, keep-with-next
     10          void USART_transmit(unsigned char c)
   \                     USART_transmit:
   \                     ??USART_transmit_0:
     11          {
     12            while( !(UCSRA & (1<<UDRE)) )
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??USART_transmit_0
     13              ;
     14            UDR = c;
   \   00000004   B90C               OUT     0x0C, R16
     15          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_UCSRA
   \   00000008                      REQUIRE _A_UDR
     16          

   \                                 In  segment CODE, align 2, keep-with-next
     17          unsigned char USART_receive(void)
   \                     USART_receive:
   \                     ??USART_receive_0:
     18          {
     19            while( !(UCSRA & (1<<RXC)) )
   \   00000000   9B5F               SBIS    0x0B, 0x07
   \   00000002   CFFE               RJMP    ??USART_receive_0
     20              ;
     21            return UDR;
   \   00000004   B10C               IN      R16, 0x0C
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_UCSRA
   \   00000008                      REQUIRE _A_UDR
     22          }
     23          

   \                                 In  segment CODE, align 2, keep-with-next
     24          void USART_transmit_uint(unsigned int n)
   \                     USART_transmit_uint:
     25          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   9760               SBIW    R29:R28, 16
   \   00000006   01C8               MOVW    R25:R24, R17:R16
     26            unsigned char aux[16];
     27            int index = 0;
   \   00000008   E0A0               LDI     R26, 0
   \   0000000A   E0B0               LDI     R27, 0
     28            while(n)
   \                     ??USART_transmit_uint_0:
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   2B09               OR      R16, R25
   \   00000010   F091               BREQ    ??USART_transmit_uint_1
     29            {
     30              aux[index++] = n % 10 + '0';
   \   00000012   E04A               LDI     R20, 10
   \   00000014   E050               LDI     R21, 0
   \   00000016   018C               MOVW    R17:R16, R25:R24
   \   00000018   ........           CALL    ?US_DIVMOD_L02
   \   0000001C   5D40               SUBI    R20, 208
   \   0000001E   01FE               MOVW    R31:R30, R29:R28
   \   00000020   0FEA               ADD     R30, R26
   \   00000022   1FFB               ADC     R31, R27
   \   00000024   8340               ST      Z, R20
   \   00000026   9611               ADIW    R27:R26, 1
     31              n /= 10; 
   \   00000028   E04A               LDI     R20, 10
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   018C               MOVW    R17:R16, R25:R24
   \   0000002E   ........           CALL    ?US_DIVMOD_L02
   \   00000032   01C8               MOVW    R25:R24, R17:R16
   \   00000034   CFEB               RJMP    ??USART_transmit_uint_0
     32            }
     33            index--;
   \                     ??USART_transmit_uint_1:
   \   00000036   9711               SBIW    R27:R26, 1
     34            while(index >= 0)
   \                     ??USART_transmit_uint_2:
   \   00000038   23BB               TST     R27
   \   0000003A   F03A               BRMI    ??USART_transmit_uint_3
     35            {
     36              USART_transmit(aux[index--]);
   \   0000003C   01FE               MOVW    R31:R30, R29:R28
   \   0000003E   0FEA               ADD     R30, R26
   \   00000040   1FFB               ADC     R31, R27
   \   00000042   8100               LD      R16, Z
   \   00000044   ....               RCALL   USART_transmit
   \   00000046   9711               SBIW    R27:R26, 1
   \   00000048   CFF7               RJMP    ??USART_transmit_uint_2
     37            }
     38          }
   \                     ??USART_transmit_uint_3:
   \   0000004A   9660               ADIW    R29:R28, 16
   \   0000004C   E0E4               LDI     R30, 4
   \   0000004E   ........           JMP     ?EPILOGUE_B4_L09

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       0      2  USART_init
       0      2  USART_receive
       0      2  USART_transmit
      20      4  USART_transmit_uint
                   20 2 -> USART_transmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      22  USART_init
       8  USART_receive
       8  USART_transmit
      82  USART_transmit_uint
       1  _A_UBRRH
       1  _A_UBRRL
       1  _A_UCSRA
       1  _A_UCSRB
       1  _A_UDR

 
   5 bytes in segment ABSOLUTE
 120 bytes in segment CODE
 
 120 bytes of CODE memory
   0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none

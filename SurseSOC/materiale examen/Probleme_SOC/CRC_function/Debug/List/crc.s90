///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       23/Dec/2015  16:04:33 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\soc2015\1305B\LucruExtra\CRC_function\crc.c          /
//    Command line =  D:\soc2015\1305B\LucruExtra\CRC_function\crc.c          /
//                    --cpu=m16 -ms -o D:\soc2015\1305B\LucruExtra\CRC_functi /
//                    on\Debug\Obj\ -lC D:\soc2015\1305B\LucruExtra\CRC_funct /
//                    ion\Debug\List\ -lA D:\soc2015\1305B\LucruExtra\CRC_fun /
//                    ction\Debug\List\ --initializers_in_flash --no_cse      /
//                    --no_inline --no_code_motion --no_cross_call            /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib    /
//                    -On                                                     /
//    List file    =  D:\soc2015\1305B\LucruExtra\CRC_function\Debug\List\crc /
//                    .s90                                                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME crc

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE4_L09

        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC crc16
        FUNCTION crc16,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC crc16tab
        PUBLIC crc16wtable
        FUNCTION crc16wtable,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+1
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
// D:\soc2015\1305B\LucruExtra\CRC_function\crc.c
//    1 #include"crc.h"
//    2 
//    3 
//    4 

        RSEG CODE:CODE:NOROOT(1)
//    5 unsigned int crc16(unsigned int polinom16, unsigned int init_val_16, unsigned int adr_start,unsigned int len, enum BitOrder ord)
crc16:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function crc16
//    6 {
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -2)
          CFI R26 Frame(CFA_Y, -3)
          CFI R25 Frame(CFA_Y, -4)
          CFI R24 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        MOVW    R1:R0, R17:R16
        MOVW    R31:R30, R21:R20
        LDD     R2, Y+4
//    7   //rezultatul final
//    8   unsigned int crc = init_val_16;
        MOVW    R17:R16, R19:R18
//    9   //reþine în octetul cel mai semnificativ datele
//   10   //extrase din memoria flash
//   11   unsigned int data = 0;
        LDI     R20, 0
        LDI     R21, 0
//   12   while( len-- ) {
??crc16_0:
        MOVW    R25:R24, R23:R22
        MOVW    R23:R22, R25:R24
        SUBI    R22, 1
        SBCI    R23, 0
        OR      R24, R25
        BREQ    ??crc16_1
//   13     unsigned int i;
//   14     //se extrage valoarea unui octet de la adresa de start
//   15     //din memoria flash
//   16     data = *(__flash char *)adr_start;
        LPM     R24, Z
        LDI     R25, 0
        MOVW    R21:R20, R25:R24
//   17     if ( ord == MSBF ) //opþiunea cu shiftare spre MSB
        LDI     R24, 1
        CP      R2, R24
        BRNE    ??crc16_2
//   18     {
//   19       //octetul este shiftat la stânga pentru a se alinia
//   20       //cu polinomul generator
//   21       data <<= 8;
        MOV     R21, R20
        LDI     R20, 0
//   22       //datele sunt "transferate" în rezultat
//   23       crc ^= data;
        EOR     R16, R20
        EOR     R17, R21
//   24       adr_start++;
        ADIW    R31:R30, 1
//   25       //pentru biþii de date se face XOR cu polinomul generator,
//   26       //daca bitul cel mai semnificativ este 1 sau se shifteaza datele
//   27       //la stânga, dacã bitul cel mai semnificativ este 0
//   28       for( i = 0; i < 8; ++i ) {
        LDI     R26, 0
        LDI     R27, 0
??crc16_3:
        CPI     R26, 8
        LDI     R24, 0
        CPC     R27, R24
        BRCC    ??crc16_0
//   29         //se verificã dacã bitul cel mai semnificativ este 1
//   30         if( crc & 0x8000 )
        BST     R17, 7
        BRTC    ??crc16_4
//   31           crc = (crc << 1) ^ polinom16;
        LSL     R16
        ROL     R17
        EOR     R16, R0
        EOR     R17, R1
        RJMP    ??crc16_5
//   32         else
//   33           crc = crc << 1;
??crc16_4:
        LSL     R16
        ROL     R17
//   34       }
??crc16_5:
        ADIW    R27:R26, 1
        RJMP    ??crc16_3
//   35     }
//   36     else
//   37       //opþiunea cu shiftare spre LSB
//   38       //parametrul polinom16 al funcþiei trebuie sã aibã biþii inversaþi în
//   39       //prealabil
//   40     {
//   41       crc ^= data;
??crc16_2:
        EOR     R16, R20
        EOR     R17, R21
//   42       adr_start++;
        ADIW    R31:R30, 1
//   43       //se verificã bitul cel mai putin semnificativ .i dacã
//   44       //acesta este 1 se face XOR cu polinomul generator,
//   45       // altfel datele sunt shiftate la dreapta
//   46       for( i = 0; i < 8; ++i ) {
        LDI     R26, 0
        LDI     R27, 0
??crc16_6:
        CPI     R26, 8
        LDI     R24, 0
        CPC     R27, R24
        BRCC    ??crc16_0
//   47         //se verificã daca cel mai puþin semnificativ bit este 1
//   48         if( crc & 0x0001 )
        BST     R16, 0
        BRTC    ??crc16_7
//   49           crc = (crc >> 1) ^ polinom16;
        LSR     R17
        ROR     R16
        EOR     R16, R0
        EOR     R17, R1
        RJMP    ??crc16_8
//   50         else
//   51           crc = crc >> 1;
??crc16_7:
        LSR     R17
        ROR     R16
//   52       }
??crc16_8:
        ADIW    R27:R26, 1
        RJMP    ??crc16_6
//   53     }
//   54   }
//   55   return crc;
??crc16_1:
        LDI     R30, 5
        JMP     ?EPILOGUE_B4_L09
          CFI EndBlock cfiBlock0
//   56 }
//   57 
//   58 //aceasta implementare utilizeazã o tabelã cu valori pre-calculate ale
//   59 //funcþiei CRC16

        RSEG NEAR_F:CODE:NOROOT(0)
//   60 __flash const unsigned int crc16tab[256]= { 
crc16tab:
        DC16 0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161
        DC16 41290, 45419, 49548, 53677, 57806, 61935, 4657, 528, 12915, 8786
        DC16 21173, 17044, 29431, 25302, 37689, 33560, 45947, 41818, 54205
        DC16 50076, 62463, 58334, 9314, 13379, 1056, 5121, 25830, 29895, 17572
        DC16 21637, 42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669
        DC16 13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100, 46939, 42874
        DC16 38681, 34616, 63455, 59390, 55197, 51132, 18628, 22757, 26758
        DC16 30887, 2112, 6241, 10242, 14371, 51660, 55789, 59790, 63919, 35144
        DC16 39273, 43274, 47403, 23285, 19156, 31415, 27286, 6769, 2640, 14899
        DC16 10770, 56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802
        DC16 27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233, 60846, 64911
        DC16 52716, 56781, 44330, 48395, 36200, 40265, 32407, 28342, 24277
        DC16 20212, 15891, 11826, 7761, 3696, 65439, 61374, 57309, 53244, 48923
        DC16 44858, 40793, 36728, 37256, 33193, 45514, 41451, 53516, 49453
        DC16 61774, 57711, 4224, 161, 12482, 8419, 20484, 16421, 28742, 24679
        DC16 33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302, 689, 4752
        DC16 8947, 13010, 16949, 21012, 25207, 29270, 46570, 42443, 38312
        DC16 34185, 62830, 58703, 54572, 50445, 13538, 9411, 5280, 1153, 29798
        DC16 25671, 21540, 17413, 42971, 47098, 34713, 38840, 59231, 63358
        DC16 50973, 55100, 9939, 14066, 1681, 5808, 26199, 30326, 17941, 22068
        DC16 55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435, 22596
        DC16 18533, 30726, 26663, 6336, 2273, 14466, 10403, 52093, 56156, 60223
        DC16 64286, 35833, 39896, 43963, 48026, 19061, 23124, 27191, 31254
        DC16 2801, 6864, 10931, 14994, 64814, 60687, 56684, 52557, 48554, 44427
        DC16 40424, 36297, 31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265
        DC16 61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952, 28183
        DC16 32310, 20053, 24180, 11923, 16050, 3793, 7920
//   61   0x0000,0x1021,0x2042,0x3063,0x4084,0x50a5,0x60c6,0x70e7,
//   62   0x8108,0x9129,0xa14a,0xb16b,0xc18c,0xd1ad,0xe1ce,0xf1ef, 
//   63   0x1231,0x0210,0x3273,0x2252,0x52b5,0x4294,0x72f7,0x62d6,
//   64   0x9339,0x8318,0xb37b,0xa35a,0xd3bd,0xc39c,0xf3ff,0xe3de, 
//   65   0x2462,0x3443,0x0420,0x1401,0x64e6,0x74c7,0x44a4,0x5485,
//   66   0xa56a,0xb54b,0x8528,0x9509,0xe5ee,0xf5cf,0xc5ac,0xd58d, 
//   67   0x3653,0x2672,0x1611,0x0630,0x76d7,0x66f6,0x5695,0x46b4, 
//   68   0xb75b,0xa77a,0x9719,0x8738,0xf7df,0xe7fe,0xd79d,0xc7bc, 
//   69   0x48c4,0x58e5,0x6886,0x78a7,0x0840,0x1861,0x2802,0x3823,
//   70   0xc9cc,0xd9ed,0xe98e,0xf9af,0x8948,0x9969,0xa90a,0xb92b, 
//   71   0x5af5,0x4ad4,0x7ab7,0x6a96,0x1a71,0x0a50,0x3a33,0x2a12, 
//   72   0xdbfd,0xcbdc,0xfbbf,0xeb9e,0x9b79,0x8b58,0xbb3b,0xab1a, 
//   73   0x6ca6,0x7c87,0x4ce4,0x5cc5,0x2c22,0x3c03,0x0c60,0x1c41, 
//   74   0xedae,0xfd8f,0xcdec,0xddcd,0xad2a,0xbd0b,0x8d68,0x9d49,
//   75   0x7e97,0x6eb6,0x5ed5,0x4ef4,0x3e13,0x2e32,0x1e51,0x0e70, 
//   76   0xff9f,0xefbe,0xdfdd,0xcffc,0xbf1b,0xaf3a,0x9f59,0x8f78,
//   77   0x9188,0x81a9,0xb1ca,0xa1eb,0xd10c,0xc12d,0xf14e,0xe16f, 
//   78   0x1080,0x00a1,0x30c2,0x20e3,0x5004,0x4025,0x7046,0x6067, 
//   79   0x83b9,0x9398,0xa3fb,0xb3da,0xc33d,0xd31c,0xe37f,0xf35e, 
//   80   0x02b1,0x1290,0x22f3,0x32d2,0x4235,0x5214,0x6277,0x7256, 
//   81   0xb5ea,0xa5cb,0x95a8,0x8589,0xf56e,0xe54f,0xd52c,0xc50d, 
//   82   0x34e2,0x24c3,0x14a0,0x0481,0x7466,0x6447,0x5424,0x4405, 
//   83   0xa7db,0xb7fa,0x8799,0x97b8,0xe75f,0xf77e,0xc71d,0xd73c, 
//   84   0x26d3,0x36f2,0x0691,0x16b0,0x6657,0x7676,0x4615,0x5634, 
//   85   0xd94c,0xc96d,0xf90e,0xe92f,0x99c8,0x89e9,0xb98a,0xa9ab, 
//   86   0x5844,0x4865,0x7806,0x6827,0x18c0,0x08e1,0x3882,0x28a3,
//   87   0xcb7d,0xdb5c,0xeb3f,0xfb1e,0x8bf9,0x9bd8,0xabbb,0xbb9a, 
//   88   0x4a75,0x5a54,0x6a37,0x7a16,0x0af1,0x1ad0,0x2ab3,0x3a92, 
//   89   0xfd2e,0xed0f,0xdd6c,0xcd4d,0xbdaa,0xad8b,0x9de8,0x8dc9, 
//   90   0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1, 
//   91   0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8, 
//   92   0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0 
//   93 };
//   94 

        RSEG CODE:CODE:NOROOT(1)
//   95 unsigned int crc16wtable(unsigned int init_val_16,unsigned int adr_start, unsigned int len) 
crc16wtable:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function crc16wtable
//   96 { 
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R1:R0, R17:R16
//   97   unsigned int counter; 
//   98   unsigned int crc = init_val_16; 
        MOVW    R17:R16, R1:R0
//   99   for( counter = 0; counter < len; counter++) 
        LDI     R24, 0
        LDI     R25, 0
??crc16wtable_0:
        CP      R24, R20
        CPC     R25, R21
        BRCC    ??crc16wtable_1
//  100     crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(__flash char *)adr_start++) & 0x00FF]; 
        MOVW    R3:R2, R17:R16
        MOV     R3, R2
        CLR     R2
        MOV     R16, R17
        LDI     R17, 0
        MOVW    R31:R30, R19:R18
        LPM     R22, Z
        LDI     R23, 0
        EOR     R16, R22
        EOR     R17, R23
        LSL     R16
        ROL     R17
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(crc16tab) & 0xFFFF))
        SBCI    R31, (-(crc16tab) & 0xFFFF) >> 8
        LPM     R22, Z+
        LPM     R23, Z
        SBIW    R31:R30, 1
        MOVW    R17:R16, R3:R2
        EOR     R16, R22
        EOR     R17, R23
        SUBI    R18, 255
        SBCI    R19, 255
        ADIW    R25:R24, 1
        RJMP    ??crc16wtable_0
//  101   return crc; 
??crc16wtable_1:
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock1
//  102 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
// 
// 204 bytes in segment CODE
// 512 bytes in segment NEAR_F
// 
// 716 bytes of CODE memory
//
//Errors: none
//Warnings: none

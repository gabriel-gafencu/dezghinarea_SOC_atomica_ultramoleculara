###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        23/Dec/2015  16:08:56 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\LucruExtra\CRC_function\main.c          #
#    Command line =  D:\soc2015\1305B\LucruExtra\CRC_function\main.c          #
#                    --cpu=m16 -ms -o D:\soc2015\1305B\LucruExtra\CRC_functio #
#                    n\Debug\Obj\ -lC D:\soc2015\1305B\LucruExtra\CRC_functio #
#                    n\Debug\List\ -lA D:\soc2015\1305B\LucruExtra\CRC_functi #
#                    on\Debug\List\ --initializers_in_flash --no_cse          #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib -On #
#    List file    =  D:\soc2015\1305B\LucruExtra\CRC_function\Debug\List\main #
#                    .lst                                                     #
#    Object file  =  D:\soc2015\1305B\LucruExtra\CRC_function\Debug\Obj\main. #
#                    r90                                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\LucruExtra\CRC_function\main.c
      1          #include<iom16.h>
      2          #include<inavr.h>
      3          #include"crc.h"
      4          

   \                                 In  segment CODE, align 2, keep-with-next
      5          unsigned char min(unsigned char x, unsigned char y)
   \                     min:
      6          {
   \   00000000   2F20               MOV     R18, R16
      7            if(x < y)
   \   00000002   1721               CP      R18, R17
   \   00000004   F410               BRCC    ??min_0
      8              return x;
   \   00000006   2F02               MOV     R16, R18
   \   00000008   9508               RET
      9            else
     10              return y;
   \                     ??min_0:
   \   0000000A   2F01               MOV     R16, R17
   \   0000000C   9508               RET
     11          }
     12          

   \                                 In  segment CODE, align 2, keep-with-next
     13          unsigned int lenTillRet(unsigned int startAdress, unsigned int retNo)
   \                     lenTillRet:
     14          {
   \   00000000   01A8               MOVW    R21:R20, R17:R16
     15            unsigned int len = 0;
   \   00000002   E000               LDI     R16, 0
   \   00000004   E010               LDI     R17, 0
     16            unsigned int aux = *(__flash unsigned int*)(startAdress);
   \   00000006   01FA               MOVW    R31:R30, R21:R20
   \   00000008   9165               LPM     R22, Z+
   \   0000000A   9174               LPM     R23, Z
   \   0000000C   9731               SBIW    R31:R30, 1
     17            while(retNo > 0)
   \                     ??lenTillRet_0:
   \   0000000E   2E02               MOV     R0, R18
   \   00000010   2A03               OR      R0, R19
   \   00000012   F0D1               BREQ    ??lenTillRet_1
     18            {
     19              len = len + 2;
   \   00000014   5F0E               SUBI    R16, 254
   \   00000016   4F1F               SBCI    R17, 255
     20              aux = *(__flash unsigned int*)(startAdress + len);
   \   00000018   01FA               MOVW    R31:R30, R21:R20
   \   0000001A   0FE0               ADD     R30, R16
   \   0000001C   1FF1               ADC     R31, R17
   \   0000001E   9005               LPM     R0, Z+
   \   00000020   9014               LPM     R1, Z
   \   00000022   9731               SBIW    R31:R30, 1
   \   00000024   01B0               MOVW    R23:R22, R1:R0
     21              while(aux != 0x9508)
   \                     ??lenTillRet_2:
   \   00000026   3068               CPI     R22, 8
   \   00000028   E9E5               LDI     R30, 149
   \   0000002A   077E               CPC     R23, R30
   \   0000002C   F051               BREQ    ??lenTillRet_3
     22              {
     23                len = len + 2;
   \   0000002E   5F0E               SUBI    R16, 254
   \   00000030   4F1F               SBCI    R17, 255
     24                aux = *(__flash unsigned int*)(startAdress + len);
   \   00000032   01FA               MOVW    R31:R30, R21:R20
   \   00000034   0FE0               ADD     R30, R16
   \   00000036   1FF1               ADC     R31, R17
   \   00000038   9005               LPM     R0, Z+
   \   0000003A   9014               LPM     R1, Z
   \   0000003C   9731               SBIW    R31:R30, 1
   \   0000003E   01B0               MOVW    R23:R22, R1:R0
   \   00000040   CFF2               RJMP    ??lenTillRet_2
     25              }
     26              retNo--;
   \                     ??lenTillRet_3:
   \   00000042   5021               SUBI    R18, 1
   \   00000044   4030               SBCI    R19, 0
   \   00000046   CFE3               RJMP    ??lenTillRet_0
     27            }
     28            len = len + 2;
   \                     ??lenTillRet_1:
   \   00000048   5F0E               SUBI    R16, 254
   \   0000004A   4F1F               SBCI    R17, 255
     29            return len;
   \   0000004C   9508               RET
     30          }
     31          

   \                                 In  segment CODE, align 2, keep-with-next
     32          void main( void )
   \                     main:
     33          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
     34            unsigned int funcAdress = ((unsigned int)min)<<1;
   \   00000004   ....               LDI     R24, LOW(min/2)
   \   00000006   ....               LDI     R25, (min/2) >> 8
   \   00000008   0F88               LSL     R24
   \   0000000A   1F99               ROL     R25
     35            unsigned int aux = *(__flash unsigned int*)(funcAdress+12);
                                ^
Warning[Pe177]: variable "aux" was declared but never referenced
   \   0000000C   01FC               MOVW    R31:R30, R25:R24
   \   0000000E   963C               ADIW    R31:R30, 12
   \   00000010   9045               LPM     R4, Z+
   \   00000012   9054               LPM     R5, Z
   \   00000014   9731               SBIW    R31:R30, 1
     36            unsigned int funcLen = lenTillRet(funcAdress, 2);
   \   00000016   E022               LDI     R18, 2
   \   00000018   E030               LDI     R19, 0
   \   0000001A   018C               MOVW    R17:R16, R25:R24
   \   0000001C   ....               RCALL   lenTillRet
   \   0000001E   01D8               MOVW    R27:R26, R17:R16
     37            unsigned int my_crc16 = crc16(CRC16_CCITT, 0, funcAdress, funcLen, MSBF);
   \   00000020   E001               LDI     R16, 1
   \   00000022   930A               ST      -Y, R16
   \   00000024   01BD               MOVW    R23:R22, R27:R26
   \   00000026   01AC               MOVW    R21:R20, R25:R24
   \   00000028   E020               LDI     R18, 0
   \   0000002A   E030               LDI     R19, 0
   \   0000002C   E201               LDI     R16, 33
   \   0000002E   E110               LDI     R17, 16
   \   00000030   ........           CALL    crc16
   \   00000034   0138               MOVW    R7:R6, R17:R16
     38            unsigned int mycrc16_t = crc16wtable(0, funcAdress, funcLen);
   \   00000036   01AD               MOVW    R21:R20, R27:R26
   \   00000038   019C               MOVW    R19:R18, R25:R24
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   ........           CALL    crc16wtable
     39            
     40            while(1)
   \                     ??main_0:
   \   00000042   CFFF               RJMP    ??main_0
     41              ;
     42          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       0      2  lenTillRet
       9      2  main
                   9 2 -> crc16
                   8 2 -> crc16wtable
                   8 2 -> lenTillRet
       0      2  min


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      78  lenTillRet
      68  main
      14  min

 
 160 bytes in segment CODE
 
 160 bytes of CODE memory

Errors: none
Warnings: 1

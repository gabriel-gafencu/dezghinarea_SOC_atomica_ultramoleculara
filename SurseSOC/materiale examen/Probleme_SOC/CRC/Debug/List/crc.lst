###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        23/Dec/2015  15:22:36 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\LucruExtra\CRC\crc.c                    #
#    Command line =  D:\soc2015\1305B\LucruExtra\CRC\crc.c --cpu=m16 -ms -o   #
#                    D:\soc2015\1305B\LucruExtra\CRC\Debug\Obj\ -lC           #
#                    D:\soc2015\1305B\LucruExtra\CRC\Debug\List\ -lA          #
#                    D:\soc2015\1305B\LucruExtra\CRC\Debug\List\              #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\soc2015\1305B\LucruExtra\CRC\Debug\List\crc.lst       #
#    Object file  =  D:\soc2015\1305B\LucruExtra\CRC\Debug\Obj\crc.r90        #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\LucruExtra\CRC\crc.c
      1          #include"crc.h"
      2          
      3          
      4          

   \                                 In  segment CODE, align 2, keep-with-next
      5          unsigned int crc16(unsigned int polinom16, unsigned int init_val_16, unsigned int adr_start,unsigned int len, enum BitOrder ord)
   \                     crc16:
      6          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   0108               MOVW    R1:R0, R17:R16
   \   00000006   01FA               MOVW    R31:R30, R21:R20
   \   00000008   802C               LDD     R2, Y+4
      7            //rezultatul final
      8            unsigned int crc = init_val_16;
   \   0000000A   0189               MOVW    R17:R16, R19:R18
      9            //reþine în octetul cel mai semnificativ datele
     10            //extrase din memoria flash
     11            unsigned int data = 0;
   \   0000000C   E040               LDI     R20, 0
   \   0000000E   E050               LDI     R21, 0
     12            while( len-- ) {
   \                     ??crc16_0:
   \   00000010   01CB               MOVW    R25:R24, R23:R22
   \   00000012   01BC               MOVW    R23:R22, R25:R24
   \   00000014   5061               SUBI    R22, 1
   \   00000016   4070               SBCI    R23, 0
   \   00000018   2B89               OR      R24, R25
   \   0000001A   F181               BREQ    ??crc16_1
     13              unsigned int i;
     14              //se extrage valoarea unui octet de la adresa de start
     15              //din memoria flash
     16              data = *(__flash char *)adr_start;
   \   0000001C   9184               LPM     R24, Z
   \   0000001E   E090               LDI     R25, 0
   \   00000020   01AC               MOVW    R21:R20, R25:R24
     17              if ( ord == MSBF ) //opþiunea cu shiftare spre MSB
   \   00000022   E081               LDI     R24, 1
   \   00000024   1628               CP      R2, R24
   \   00000026   F4B1               BRNE    ??crc16_2
     18              {
     19                //octetul este shiftat la stânga pentru a se alinia
     20                //cu polinomul generator
     21                data <<= 8;
   \   00000028   2F54               MOV     R21, R20
   \   0000002A   E040               LDI     R20, 0
     22                //datele sunt "transferate" în rezultat
     23                crc ^= data;
   \   0000002C   2704               EOR     R16, R20
   \   0000002E   2715               EOR     R17, R21
     24                adr_start++;
   \   00000030   9631               ADIW    R31:R30, 1
     25                //pentru biþii de date se face XOR cu polinomul generator,
     26                //daca bitul cel mai semnificativ este 1 sau se shifteaza datele
     27                //la stânga, dacã bitul cel mai semnificativ este 0
     28                for( i = 0; i < 8; ++i ) {
   \   00000032   E0A0               LDI     R26, 0
   \   00000034   E0B0               LDI     R27, 0
   \                     ??crc16_3:
   \   00000036   30A8               CPI     R26, 8
   \   00000038   E080               LDI     R24, 0
   \   0000003A   07B8               CPC     R27, R24
   \   0000003C   F748               BRCC    ??crc16_0
     29                  //se verificã dacã bitul cel mai semnificativ este 1
     30                  if( crc & 0x8000 )
   \   0000003E   FB17               BST     R17, 7
   \   00000040   F42E               BRTC    ??crc16_4
     31                    crc = (crc << 1) ^ polinom16;
   \   00000042   0F00               LSL     R16
   \   00000044   1F11               ROL     R17
   \   00000046   2500               EOR     R16, R0
   \   00000048   2511               EOR     R17, R1
   \   0000004A   C002               RJMP    ??crc16_5
     32                  else
     33                    crc = crc << 1;
   \                     ??crc16_4:
   \   0000004C   0F00               LSL     R16
   \   0000004E   1F11               ROL     R17
     34                }
   \                     ??crc16_5:
   \   00000050   9611               ADIW    R27:R26, 1
   \   00000052   CFF1               RJMP    ??crc16_3
     35              }
     36              else
     37                //opþiunea cu shiftare spre LSB
     38                //parametrul polinom16 al funcþiei trebuie sã aibã biþii inversaþi în
     39                //prealabil
     40              {
     41                crc ^= data;
   \                     ??crc16_2:
   \   00000054   2704               EOR     R16, R20
   \   00000056   2715               EOR     R17, R21
     42                adr_start++;
   \   00000058   9631               ADIW    R31:R30, 1
     43                //se verificã bitul cel mai putin semnificativ .i dacã
     44                //acesta este 1 se face XOR cu polinomul generator,
     45                // altfel datele sunt shiftate la dreapta
     46                for( i = 0; i < 8; ++i ) {
   \   0000005A   E0A0               LDI     R26, 0
   \   0000005C   E0B0               LDI     R27, 0
   \                     ??crc16_6:
   \   0000005E   30A8               CPI     R26, 8
   \   00000060   E080               LDI     R24, 0
   \   00000062   07B8               CPC     R27, R24
   \   00000064   F6A8               BRCC    ??crc16_0
     47                  //se verificã daca cel mai puþin semnificativ bit este 1
     48                  if( crc & 0x0001 )
   \   00000066   FB00               BST     R16, 0
   \   00000068   F42E               BRTC    ??crc16_7
     49                    crc = (crc >> 1) ^ polinom16;
   \   0000006A   9516               LSR     R17
   \   0000006C   9507               ROR     R16
   \   0000006E   2500               EOR     R16, R0
   \   00000070   2511               EOR     R17, R1
   \   00000072   C002               RJMP    ??crc16_8
     50                  else
     51                    crc = crc >> 1;
   \                     ??crc16_7:
   \   00000074   9516               LSR     R17
   \   00000076   9507               ROR     R16
     52                }
   \                     ??crc16_8:
   \   00000078   9611               ADIW    R27:R26, 1
   \   0000007A   CFF1               RJMP    ??crc16_6
     53              }
     54            }
     55            return crc;
   \                     ??crc16_1:
   \   0000007C   E0E5               LDI     R30, 5
   \   0000007E   ........           JMP     ?EPILOGUE_B4_L09
     56          }
     57          
     58          //aceasta implementare utilizeazã o tabelã cu valori pre-calculate ale
     59          //funcþiei CRC16

   \                                 In  segment NEAR_F, align 1, keep-with-next
     60          __flash const unsigned int crc16tab[256]= { 
   \                     crc16tab:
   \   00000000   000010212042       DC16 0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161
   \              3063408450A5
   \              60C670E78108
   \              9129        
   \   00000014   A14AB16BC18C       DC16 41290, 45419, 49548, 53677, 57806, 61935, 4657, 528, 12915, 8786
   \              D1ADE1CEF1EF
   \              123102103273
   \              2252        
   \   00000028   52B5429472F7       DC16 21173, 17044, 29431, 25302, 37689, 33560, 45947, 41818, 54205
   \              62D693398318
   \              B37BA35AD3BD
   \   0000003A   C39CF3FFE3DE       DC16 50076, 62463, 58334, 9314, 13379, 1056, 5121, 25830, 29895, 17572
   \              246234430420
   \              140164E674C7
   \              44A4        
   \   0000004E   5485A56AB54B       DC16 21637, 42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669
   \              85289509E5EE
   \              F5CFC5ACD58D
   \   00000060   365326721611       DC16 13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100, 46939, 42874
   \              063076D766F6
   \              569546B4B75B
   \              A77A        
   \   00000074   97198738F7DF       DC16 38681, 34616, 63455, 59390, 55197, 51132, 18628, 22757, 26758
   \              E7FED79DC7BC
   \              48C458E56886
   \   00000086   78A708401861       DC16 30887, 2112, 6241, 10242, 14371, 51660, 55789, 59790, 63919, 35144
   \              28023823C9CC
   \              D9EDE98EF9AF
   \              8948        
   \   0000009A   9969A90AB92B       DC16 39273, 43274, 47403, 23285, 19156, 31415, 27286, 6769, 2640, 14899
   \              5AF54AD47AB7
   \              6A961A710A50
   \              3A33        
   \   000000AE   2A12DBFDCBDC       DC16 10770, 56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802
   \              FBBFEB9E9B79
   \              8B58BB3BAB1A
   \   000000C0   6CA67C874CE4       DC16 27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233, 60846, 64911
   \              5CC52C223C03
   \              0C601C41EDAE
   \              FD8F        
   \   000000D4   CDECDDCDAD2A       DC16 52716, 56781, 44330, 48395, 36200, 40265, 32407, 28342, 24277
   \              BD0B8D689D49
   \              7E976EB65ED5
   \   000000E6   4EF43E132E32       DC16 20212, 15891, 11826, 7761, 3696, 65439, 61374, 57309, 53244, 48923
   \              1E510E70FF9F
   \              EFBEDFDDCFFC
   \              BF1B        
   \   000000FA   AF3A9F598F78       DC16 44858, 40793, 36728, 37256, 33193, 45514, 41451, 53516, 49453
   \              918881A9B1CA
   \              A1EBD10CC12D
   \   0000010C   F14EE16F1080       DC16 61774, 57711, 4224, 161, 12482, 8419, 20484, 16421, 28742, 24679
   \              00A130C220E3
   \              500440257046
   \              6067        
   \   00000120   83B99398A3FB       DC16 33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302, 689, 4752
   \              B3DAC33DD31C
   \              E37FF35E02B1
   \              1290        
   \   00000134   22F332D24235       DC16 8947, 13010, 16949, 21012, 25207, 29270, 46570, 42443, 38312
   \              521462777256
   \              B5EAA5CB95A8
   \   00000146   8589F56EE54F       DC16 34185, 62830, 58703, 54572, 50445, 13538, 9411, 5280, 1153, 29798
   \              D52CC50D34E2
   \              24C314A00481
   \              7466        
   \   0000015A   644754244405       DC16 25671, 21540, 17413, 42971, 47098, 34713, 38840, 59231, 63358
   \              A7DBB7FA8799
   \              97B8E75FF77E
   \   0000016C   C71DD73C26D3       DC16 50973, 55100, 9939, 14066, 1681, 5808, 26199, 30326, 17941, 22068
   \              36F2069116B0
   \              665776764615
   \              5634        
   \   00000180   D94CC96DF90E       DC16 55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435, 22596
   \              E92F99C889E9
   \              B98AA9AB5844
   \   00000192   486578066827       DC16 18533, 30726, 26663, 6336, 2273, 14466, 10403, 52093, 56156, 60223
   \              18C008E13882
   \              28A3CB7DDB5C
   \              EB3F        
   \   000001A6   FB1E8BF99BD8       DC16 64286, 35833, 39896, 43963, 48026, 19061, 23124, 27191, 31254
   \              ABBBBB9A4A75
   \              5A546A377A16
   \   000001B8   0AF11AD02AB3       DC16 2801, 6864, 10931, 14994, 64814, 60687, 56684, 52557, 48554, 44427
   \              3A92FD2EED0F
   \              DD6CCD4DBDAA
   \              AD8B        
   \   000001CC   9DE88DC97C26       DC16 40424, 36297, 31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265
   \              6C075C644C45
   \              3CA22C831CE0
   \              0CC1        
   \   000001E0   EF1FFF3ECF5D       DC16 61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952, 28183
   \              DF7CAF9BBFBA
   \              8FD99FF86E17
   \   000001F2   7E364E555E74       DC16 32310, 20053, 24180, 11923, 16050, 3793, 7920
   \              2E933EB20ED1
   \              1EF0        
     61            0x0000,0x1021,0x2042,0x3063,0x4084,0x50a5,0x60c6,0x70e7,
     62            0x8108,0x9129,0xa14a,0xb16b,0xc18c,0xd1ad,0xe1ce,0xf1ef, 
     63            0x1231,0x0210,0x3273,0x2252,0x52b5,0x4294,0x72f7,0x62d6,
     64            0x9339,0x8318,0xb37b,0xa35a,0xd3bd,0xc39c,0xf3ff,0xe3de, 
     65            0x2462,0x3443,0x0420,0x1401,0x64e6,0x74c7,0x44a4,0x5485,
     66            0xa56a,0xb54b,0x8528,0x9509,0xe5ee,0xf5cf,0xc5ac,0xd58d, 
     67            0x3653,0x2672,0x1611,0x0630,0x76d7,0x66f6,0x5695,0x46b4, 
     68            0xb75b,0xa77a,0x9719,0x8738,0xf7df,0xe7fe,0xd79d,0xc7bc, 
     69            0x48c4,0x58e5,0x6886,0x78a7,0x0840,0x1861,0x2802,0x3823,
     70            0xc9cc,0xd9ed,0xe98e,0xf9af,0x8948,0x9969,0xa90a,0xb92b, 
     71            0x5af5,0x4ad4,0x7ab7,0x6a96,0x1a71,0x0a50,0x3a33,0x2a12, 
     72            0xdbfd,0xcbdc,0xfbbf,0xeb9e,0x9b79,0x8b58,0xbb3b,0xab1a, 
     73            0x6ca6,0x7c87,0x4ce4,0x5cc5,0x2c22,0x3c03,0x0c60,0x1c41, 
     74            0xedae,0xfd8f,0xcdec,0xddcd,0xad2a,0xbd0b,0x8d68,0x9d49,
     75            0x7e97,0x6eb6,0x5ed5,0x4ef4,0x3e13,0x2e32,0x1e51,0x0e70, 
     76            0xff9f,0xefbe,0xdfdd,0xcffc,0xbf1b,0xaf3a,0x9f59,0x8f78,
     77            0x9188,0x81a9,0xb1ca,0xa1eb,0xd10c,0xc12d,0xf14e,0xe16f, 
     78            0x1080,0x00a1,0x30c2,0x20e3,0x5004,0x4025,0x7046,0x6067, 
     79            0x83b9,0x9398,0xa3fb,0xb3da,0xc33d,0xd31c,0xe37f,0xf35e, 
     80            0x02b1,0x1290,0x22f3,0x32d2,0x4235,0x5214,0x6277,0x7256, 
     81            0xb5ea,0xa5cb,0x95a8,0x8589,0xf56e,0xe54f,0xd52c,0xc50d, 
     82            0x34e2,0x24c3,0x14a0,0x0481,0x7466,0x6447,0x5424,0x4405, 
     83            0xa7db,0xb7fa,0x8799,0x97b8,0xe75f,0xf77e,0xc71d,0xd73c, 
     84            0x26d3,0x36f2,0x0691,0x16b0,0x6657,0x7676,0x4615,0x5634, 
     85            0xd94c,0xc96d,0xf90e,0xe92f,0x99c8,0x89e9,0xb98a,0xa9ab, 
     86            0x5844,0x4865,0x7806,0x6827,0x18c0,0x08e1,0x3882,0x28a3,
     87            0xcb7d,0xdb5c,0xeb3f,0xfb1e,0x8bf9,0x9bd8,0xabbb,0xbb9a, 
     88            0x4a75,0x5a54,0x6a37,0x7a16,0x0af1,0x1ad0,0x2ab3,0x3a92, 
     89            0xfd2e,0xed0f,0xdd6c,0xcd4d,0xbdaa,0xad8b,0x9de8,0x8dc9, 
     90            0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1, 
     91            0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8, 
     92            0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0 
     93          };
     94          

   \                                 In  segment CODE, align 2, keep-with-next
     95          unsigned int crc16wtable(unsigned int init_val_16,unsigned int adr_start, unsigned int len) 
   \                     crc16wtable:
     96          { 
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   0108               MOVW    R1:R0, R17:R16
     97            unsigned int counter; 
     98            unsigned int crc = init_val_16; 
   \   00000006   0180               MOVW    R17:R16, R1:R0
     99            for( counter = 0; counter < len; counter++) 
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
   \                     ??crc16wtable_0:
   \   0000000C   1784               CP      R24, R20
   \   0000000E   0795               CPC     R25, R21
   \   00000010   F4C8               BRCC    ??crc16wtable_1
    100              crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(__flash char *)adr_start++) & 0x00FF]; 
   \   00000012   0118               MOVW    R3:R2, R17:R16
   \   00000014   2C32               MOV     R3, R2
   \   00000016   2422               CLR     R2
   \   00000018   2F01               MOV     R16, R17
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   01F9               MOVW    R31:R30, R19:R18
   \   0000001E   9164               LPM     R22, Z
   \   00000020   E070               LDI     R23, 0
   \   00000022   2706               EOR     R16, R22
   \   00000024   2717               EOR     R17, R23
   \   00000026   0F00               LSL     R16
   \   00000028   1F11               ROL     R17
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(crc16tab) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(crc16tab) & 0xFFFF) >> 8
   \   00000030   9165               LPM     R22, Z+
   \   00000032   9174               LPM     R23, Z
   \   00000034   9731               SBIW    R31:R30, 1
   \   00000036   0181               MOVW    R17:R16, R3:R2
   \   00000038   2706               EOR     R16, R22
   \   0000003A   2717               EOR     R17, R23
   \   0000003C   5F2F               SUBI    R18, 255
   \   0000003E   4F3F               SBCI    R19, 255
   \   00000040   9601               ADIW    R25:R24, 1
   \   00000042   CFE4               RJMP    ??crc16wtable_0
    101            return crc; 
   \                     ??crc16wtable_1:
   \   00000044   9189               LD      R24, Y+
   \   00000046   9199               LD      R25, Y+
   \   00000048   9508               RET
    102          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       5      2  crc16
       2      2  crc16wtable


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     130  crc16
     512  crc16tab
      74  crc16wtable

 
 204 bytes in segment CODE
 512 bytes in segment NEAR_F
 
 716 bytes of CODE memory

Errors: none
Warnings: none

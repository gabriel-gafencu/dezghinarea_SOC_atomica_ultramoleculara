///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       29/Dec/2015  17:31:42 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\soc2015\1305B\LucruExtra\WDT_Oscilator\main.c        /
//    Command line =  D:\soc2015\1305B\LucruExtra\WDT_Oscilator\main.c        /
//                    --cpu=m16 -ms -o D:\soc2015\1305B\LucruExtra\WDT_Oscila /
//                    tor\Debug\Obj\ -lC D:\soc2015\1305B\LucruExtra\WDT_Osci /
//                    lator\Debug\List\ -lA D:\soc2015\1305B\LucruExtra\WDT_O /
//                    scilator\Debug\List\ --initializers_in_flash --no_cse   /
//                    --no_inline --no_code_motion --no_cross_call            /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib    /
//                    -On                                                     /
//    List file    =  D:\soc2015\1305B\LucruExtra\WDT_Oscilator\Debug\List\ma /
//                    in.s90                                                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?LL_ADD_L12
        EXTERN ?LL_MUL_L12
        EXTERN ?PROLOGUE4_L09
        EXTERN ?ULL_DIV_L12
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `??isr_TIMER1_OVF_vect??INTVEC 32`
        PUBLIC Timer1_currentValue
        PUBLIC Timer1_numberOverflows
        PUBWEAK _A_DDRD
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCNT1
        PUBWEAK _A_TIMSK
        PUBWEAK _A_WDTCR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBWEAK __Constant_10000_0
        PUBLIC isr_TIMER1_OVF_vect
        FUNCTION isr_TIMER1_OVF_vect,0231H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC main
        FUNCTION main,021a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC sendFlag
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
isr_TIMER1_OVF_vect SYMBOL "isr_TIMER1_OVF_vect"
`??isr_TIMER1_OVF_vect??INTVEC 32` SYMBOL "??INTVEC 32", isr_TIMER1_OVF_vect

        EXTERN USART_init
        FUNCTION USART_init,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN USART_transmit
        FUNCTION USART_transmit,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN USART_transmit_ulonglong
        FUNCTION USART_transmit_ulonglong,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\soc2015\1305B\LucruExtra\WDT_Oscilator\main.c
//    1 #include<iom16.h>

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04cH
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,041H
// union <unnamed> volatile __io _A_WDTCR
_A_WDTCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1
//    2 #include<inavr.h>
//    3 #include"usart.h"
//    4 

        RSEG NEAR_N:DATA:NOROOT(0)
//    5 __no_init unsigned int Timer1_currentValue;
Timer1_currentValue:
        DS8 2

        RSEG NEAR_N:DATA:NOROOT(0)
//    6 __no_init unsigned int Timer1_numberOverflows;
Timer1_numberOverflows:
        DS8 2

        RSEG NEAR_N:DATA:NOROOT(0)
//    7 __no_init unsigned int sendFlag;
sendFlag:
        DS8 2
//    8 
//    9 #pragma vector = TIMER1_OVF_vect

        RSEG CODE:CODE:NOROOT(1)
//   10 __interrupt void isr_TIMER1_OVF_vect()
isr_TIMER1_OVF_vect:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function isr_TIMER1_OVF_vect
//   11 {
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        IN      R18, 0x3F
//   12   Timer1_numberOverflows++;
        LDI     R30, LOW(Timer1_numberOverflows)
        LDI     R31, (Timer1_numberOverflows) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
//   13 }
        OUT     0x3F, R18
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+4
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+3
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+2
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+1
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
//   14 

        RSEG CODE:CODE:NOROOT(1)
//   15 void main( void )
main:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function main
//   16 {
        FUNCALL main, USART_init
        LOCFRAME CSTACK, 20, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit_ulonglong
        LOCFRAME CSTACK, 20, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 20, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL main, USART_transmit
        LOCFRAME CSTACK, 20, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -1)
          CFI R26 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -3)
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        SBIW    R29:R28, 16
          CFI CFA_Y Y+20
//   17   USART_init(BAUD_RATE);
        LDI     R16, 12
        LDI     R17, 0
        CALL    USART_init
//   18   DDRD = (1 << PD1);
        LDI     R16, 2
        OUT     0x11, R16
//   19   
//   20   TIMSK |= (1 << TOIE1);
        IN      R16, 0x39
        ORI     R16, 0x04
        OUT     0x39, R16
//   21   __enable_interrupt();
        SEI
//   22   
//   23   sendFlag++;
        LDI     R30, LOW(sendFlag)
        LDI     R31, (sendFlag) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
//   24   if(sendFlag > 50)
        LDS     R30, sendFlag
        LDS     R31, (sendFlag + 1)
        SBIW    R31:R30, 51
        BRCS    ??main_0
//   25     sendFlag = 0;
        LDI     R16, 0
        LDI     R17, 0
        STS     sendFlag, R16
        STS     (sendFlag + 1), R17
//   26   
//   27   unsigned long long aux = Timer1_numberOverflows;
??main_0:
        LDS     R16, Timer1_numberOverflows
        LDS     R17, (Timer1_numberOverflows + 1)
        LDI     R18, 0
        LDI     R19, 0
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        ST      Y, R16
        STD     Y+1, R17
        STD     Y+2, R18
        STD     Y+3, R19
        STD     Y+4, R20
        STD     Y+5, R21
        STD     Y+6, R22
        STD     Y+7, R23
//   28   aux = aux * 65536 + Timer1_currentValue;
        LDS     R16, Timer1_currentValue
        LDS     R17, (Timer1_currentValue + 1)
        LDI     R18, 0
        LDI     R19, 0
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        STD     Y+8, R16
        STD     Y+9, R17
        STD     Y+10, R18
        STD     Y+11, R19
        STD     Y+12, R20
        STD     Y+13, R21
        STD     Y+14, R22
        STD     Y+15, R23
        LD      R16, Y
        LDD     R17, Y+1
        LDD     R18, Y+2
        LDD     R19, Y+3
        LDD     R20, Y+4
        LDD     R21, Y+5
        LDD     R22, Y+6
        LDD     R23, Y+7
        LDI     R26, LOW(__Constant_10000_0)
        LDI     R27, (__Constant_10000_0) >> 8
        CALL    ?LL_MUL_L12
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 8
        CALL    ?LL_ADD_L12
        ST      Y, R16
        STD     Y+1, R17
        STD     Y+2, R18
        STD     Y+3, R19
        STD     Y+4, R20
        STD     Y+5, R21
        STD     Y+6, R22
        STD     Y+7, R23
//   29   aux = aux << 1; //aux - timp de resetare in microsecunde
        LD      R16, Y
        LDD     R17, Y+1
        LDD     R18, Y+2
        LDD     R19, Y+3
        LDD     R20, Y+4
        LDD     R21, Y+5
        LDD     R22, Y+6
        LDD     R23, Y+7
        LSL     R16
        ROL     R17
        ROL     R18
        ROL     R19
        ROL     R20
        ROL     R21
        ROL     R22
        ROL     R23
        ST      Y, R16
        STD     Y+1, R17
        STD     Y+2, R18
        STD     Y+3, R19
        STD     Y+4, R20
        STD     Y+5, R21
        STD     Y+6, R22
        STD     Y+7, R23
//   30   aux = (unsigned long long)32768 * 1000000 / aux;
        LDI     R16, 0
        LDI     R17, 0
        LDI     R18, 32
        LDI     R19, 161
        LDI     R20, 7
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R27:R26, R29:R28
        CALL    ?ULL_DIV_L12
        ST      Y, R16
        STD     Y+1, R17
        STD     Y+2, R18
        STD     Y+3, R19
        STD     Y+4, R20
        STD     Y+5, R21
        STD     Y+6, R22
        STD     Y+7, R23
//   31   
//   32   if(sendFlag == 0)
        LDS     R16, sendFlag
        LDS     R17, (sendFlag + 1)
        OR      R16, R17
        BRNE    ??main_1
//   33   {
//   34   //USART_transmit('<');
//   35   USART_transmit_ulonglong(aux);
        LD      R16, Y
        LDD     R17, Y+1
        LDD     R18, Y+2
        LDD     R19, Y+3
        LDD     R20, Y+4
        LDD     R21, Y+5
        LDD     R22, Y+6
        LDD     R23, Y+7
        CALL    USART_transmit_ulonglong
//   36   //USART_transmit('>');
//   37 
//   38   USART_transmit('\r');
        LDI     R16, 13
        CALL    USART_transmit
//   39   USART_transmit('\n');
        LDI     R16, 10
        CALL    USART_transmit
//   40   }
//   41   
//   42   Timer1_currentValue = 0;
??main_1:
        LDI     R16, 0
        LDI     R17, 0
        STS     Timer1_currentValue, R16
        STS     (Timer1_currentValue + 1), R17
//   43   Timer1_numberOverflows = 0;
        LDI     R16, 0
        LDI     R17, 0
        STS     Timer1_numberOverflows, R16
        STS     (Timer1_numberOverflows + 1), R17
//   44   
//   45   WDTCR |= (0 << WDP2) | (0 << WDP1) | (1 << WDP0);
        IN      R16, 0x21
        ORI     R16, 0x01
        OUT     0x21, R16
//   46   TCCR1B |= (0 << CS12) | (1 << CS11) | (0 << CS10);
        IN      R16, 0x2E
        ORI     R16, 0x02
        OUT     0x2E, R16
//   47   
//   48   TCNT1 = 0;
        LDI     R16, 0
        LDI     R17, 0
        OUT     0x2D, R17
        OUT     0x2C, R16
//   49   WDTCR |= (1 << WDE);
        IN      R16, 0x21
        ORI     R16, 0x08
        OUT     0x21, R16
//   50     
//   51   while(1)
//   52   {
//   53     Timer1_currentValue = TCNT1;
??main_2:
        IN      R16, 0x2C
        IN      R17, 0x2D
        STS     Timer1_currentValue, R16
        STS     (Timer1_currentValue + 1), R17
        RJMP    ??main_2
          CFI EndBlock cfiBlock1
        REQUIRE _A_DDRD
        REQUIRE _A_TIMSK
        REQUIRE _A_WDTCR
        REQUIRE _A_TCCR1B
        REQUIRE _A_TCNT1
//   54   }
//   55 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 32
`??isr_TIMER1_OVF_vect??INTVEC 32`:
        JMP     isr_TIMER1_OVF_vect

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for 64 Bit Constant>_0`:
        DD 65536, 0

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
__Constant_10000_0:
        DS8 8
        REQUIRE `?<Initializer for 64 Bit Constant>_0`

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        END
// 
//   6 bytes in segment ABSOLUTE
// 422 bytes in segment CODE
//   6 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//   8 bytes in segment NEAR_I
//   8 bytes in segment NEAR_ID
//   6 bytes in segment NEAR_N
// 
// 422 bytes of CODE memory (+ 18 bytes shared)
//   6 bytes of DATA memory (+ 14 bytes shared)
//
//Errors: none
//Warnings: none

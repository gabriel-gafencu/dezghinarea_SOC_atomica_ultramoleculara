###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        30/Dec/2015  17:19:54 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\Uleru George                            #
#                    Iulian\George;;)\2Reset_Time\main.c                      #
#    Command line =  "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\2Reset_Time\main.c" --cpu=m16 -ms -o    #
#                    "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\2Reset_Time\Debug\Obj\" -lC             #
#                    "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\2Reset_Time\Debug\List\" -lA            #
#                    "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\2Reset_Time\Debug\List\"                #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\soc2015\1305B\Uleru George                            #
#                    Iulian\George;;)\2Reset_Time\Debug\List\main.lst         #
#    Object file  =  D:\soc2015\1305B\Uleru George                            #
#                    Iulian\George;;)\2Reset_Time\Debug\Obj\main.r90          #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\Uleru George Iulian\George;;)\2Reset_Time\main.c
      1          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include<inavr.h>
      3          #include"usart.h"
      4          

   \                                 In  segment NEAR_N, align 1, keep-with-next
      5          __no_init unsigned long long softCount;
   \                     softCount:
   \   00000000                      DS8 8

   \                                 In  segment NEAR_N, align 1, keep-with-next
      6          __no_init unsigned char pinVal;             //variabila pt verificare
   \                     pinVal:
   \   00000000                      DS8 1
      7          
      8          #pragma vector = TIMER0_COMP_vect

   \                                 In  segment CODE, align 2, keep-with-next
      9          __interrupt void isr_TIMER0_COMP_vect()
   \                     isr_TIMER0_COMP_vect:
     10          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   920A               ST      -Y, R0
   \   00000006   937A               ST      -Y, R23
   \   00000008   936A               ST      -Y, R22
   \   0000000A   935A               ST      -Y, R21
   \   0000000C   934A               ST      -Y, R20
   \   0000000E   933A               ST      -Y, R19
   \   00000010   932A               ST      -Y, R18
   \   00000012   931A               ST      -Y, R17
   \   00000014   930A               ST      -Y, R16
   \   00000016   B60F               IN      R0, 0x3F
     11            softCount++;
   \   00000018   ....               LDI     R30, LOW(softCount)
   \   0000001A   ....               LDI     R31, (softCount) >> 8
   \   0000001C   8100               LD      R16, Z
   \   0000001E   8111               LDD     R17, Z+1
   \   00000020   8122               LDD     R18, Z+2
   \   00000022   8133               LDD     R19, Z+3
   \   00000024   8144               LDD     R20, Z+4
   \   00000026   8155               LDD     R21, Z+5
   \   00000028   8166               LDD     R22, Z+6
   \   0000002A   8177               LDD     R23, Z+7
   \   0000002C   5F0F               SUBI    R16, 255
   \   0000002E   4F1F               SBCI    R17, 255
   \   00000030   4F2F               SBCI    R18, 255
   \   00000032   4F3F               SBCI    R19, 255
   \   00000034   4F4F               SBCI    R20, 255
   \   00000036   4F5F               SBCI    R21, 255
   \   00000038   4F6F               SBCI    R22, 255
   \   0000003A   4F7F               SBCI    R23, 255
   \   0000003C   ....               LDI     R30, LOW(softCount)
   \   0000003E   ....               LDI     R31, (softCount) >> 8
   \   00000040   8300               ST      Z, R16
   \   00000042   8311               STD     Z+1, R17
   \   00000044   8322               STD     Z+2, R18
   \   00000046   8333               STD     Z+3, R19
   \   00000048   8344               STD     Z+4, R20
   \   0000004A   8355               STD     Z+5, R21
   \   0000004C   8366               STD     Z+6, R22
   \   0000004E   8377               STD     Z+7, R23
     12          }
   \   00000050   BE0F               OUT     0x3F, R0
   \   00000052   9109               LD      R16, Y+
   \   00000054   9119               LD      R17, Y+
   \   00000056   9129               LD      R18, Y+
   \   00000058   9139               LD      R19, Y+
   \   0000005A   9149               LD      R20, Y+
   \   0000005C   9159               LD      R21, Y+
   \   0000005E   9169               LD      R22, Y+
   \   00000060   9179               LD      R23, Y+
   \   00000062   9009               LD      R0, Y+
   \   00000064   91E9               LD      R30, Y+
   \   00000066   91F9               LD      R31, Y+
   \   00000068   9518               RETI
     13          

   \                                 In  segment CODE, align 2, keep-with-next
     14          void main( void )
   \                     main:
     15          { 
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
     16            //fac verificare a timpului cu SALEAE LOGIC
     17            DDRB = (1 << PB0);
   \   00000004   E001               LDI     R16, 1
   \   00000006   BB07               OUT     0x17, R16
     18            if(pinVal == 0)
   \   00000008   9100....           LDS     R16, pinVal
   \   0000000C   2300               TST     R16
   \   0000000E   F441               BRNE    ??main_0
     19            {
     20              PORTB = PORTB ^ (1 << PB0);
   \   00000010   E001               LDI     R16, 1
   \   00000012   B318               IN      R17, 0x18
   \   00000014   2710               EOR     R17, R16
   \   00000016   BB18               OUT     0x18, R17
     21              pinVal = 1;
   \   00000018   E001               LDI     R16, 1
   \   0000001A   9300....           STS     pinVal, R16
   \   0000001E   C007               RJMP    ??main_1
     22            }
     23            else
     24            {
     25              PORTB = PORTB ^ (1 << PB0);;
   \                     ??main_0:
   \   00000020   E001               LDI     R16, 1
   \   00000022   B318               IN      R17, 0x18
   \   00000024   2710               EOR     R17, R16
   \   00000026   BB18               OUT     0x18, R17
     26              pinVal = 0;
   \   00000028   E000               LDI     R16, 0
   \   0000002A   9300....           STS     pinVal, R16
     27            }
     28            //end verificare
     29            
     30            USART_init(BAUD_RATE);
   \                     ??main_1:
   \   0000002E   E00C               LDI     R16, 12
   \   00000030   E010               LDI     R17, 0
   \   00000032   ........           CALL    USART_init
     31            DDRD |= (1 << PD1);
   \   00000036   9A89               SBI     0x11, 0x01
     32            
     33            unsigned long long aux = softCount / 1000;
   \   00000038   ....               LDI     R30, LOW(softCount)
   \   0000003A   ....               LDI     R31, (softCount) >> 8
   \   0000003C   8100               LD      R16, Z
   \   0000003E   8111               LDD     R17, Z+1
   \   00000040   8122               LDD     R18, Z+2
   \   00000042   8133               LDD     R19, Z+3
   \   00000044   8144               LDD     R20, Z+4
   \   00000046   8155               LDD     R21, Z+5
   \   00000048   8166               LDD     R22, Z+6
   \   0000004A   8177               LDD     R23, Z+7
   \   0000004C   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   0000004E   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   00000050   ........           CALL    ?ULL_DIV_L12
   \   00000054   0148               MOVW    R9:R8, R17:R16
   \   00000056   0159               MOVW    R11:R10, R19:R18
   \   00000058   016A               MOVW    R13:R12, R21:R20
   \   0000005A   017B               MOVW    R15:R14, R23:R22
     34            USART_transmit('<');
   \   0000005C   E30C               LDI     R16, 60
   \   0000005E   ........           CALL    USART_transmit
     35            if(aux > 0)
   \   00000062   0184               MOVW    R17:R16, R9:R8
   \   00000064   0195               MOVW    R19:R18, R11:R10
   \   00000066   01A6               MOVW    R21:R20, R13:R12
   \   00000068   01B7               MOVW    R23:R22, R15:R14
   \   0000006A   0108               MOVW    R1:R0, R17:R16
   \   0000006C   0119               MOVW    R3:R2, R19:R18
   \   0000006E   012A               MOVW    R5:R4, R21:R20
   \   00000070   013B               MOVW    R7:R6, R23:R22
   \   00000072   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000074   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000076   0180               MOVW    R17:R16, R1:R0
   \   00000078   0191               MOVW    R19:R18, R3:R2
   \   0000007A   01A2               MOVW    R21:R20, R5:R4
   \   0000007C   01B3               MOVW    R23:R22, R7:R6
   \   0000007E   ........           CALL    ?LL_CMP_L12
   \   00000082   F039               BREQ    ??main_2
     36              USART_transmit_ulonglong(aux);
   \   00000084   0184               MOVW    R17:R16, R9:R8
   \   00000086   0195               MOVW    R19:R18, R11:R10
   \   00000088   01A6               MOVW    R21:R20, R13:R12
   \   0000008A   01B7               MOVW    R23:R22, R15:R14
   \   0000008C   ........           CALL    USART_transmit_ulonglong
   \   00000090   C003               RJMP    ??main_3
     37            else
     38              USART_transmit('0');
   \                     ??main_2:
   \   00000092   E300               LDI     R16, 48
   \   00000094   ........           CALL    USART_transmit
     39            aux = softCount % 1000;
   \                     ??main_3:
   \   00000098   ....               LDI     R30, LOW(softCount)
   \   0000009A   ....               LDI     R31, (softCount) >> 8
   \   0000009C   8100               LD      R16, Z
   \   0000009E   8111               LDD     R17, Z+1
   \   000000A0   8122               LDD     R18, Z+2
   \   000000A2   8133               LDD     R19, Z+3
   \   000000A4   8144               LDD     R20, Z+4
   \   000000A6   8155               LDD     R21, Z+5
   \   000000A8   8166               LDD     R22, Z+6
   \   000000AA   8177               LDD     R23, Z+7
   \   000000AC   0108               MOVW    R1:R0, R17:R16
   \   000000AE   0119               MOVW    R3:R2, R19:R18
   \   000000B0   012A               MOVW    R5:R4, R21:R20
   \   000000B2   013B               MOVW    R7:R6, R23:R22
   \   000000B4   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   000000B6   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   000000B8   0180               MOVW    R17:R16, R1:R0
   \   000000BA   0191               MOVW    R19:R18, R3:R2
   \   000000BC   01A2               MOVW    R21:R20, R5:R4
   \   000000BE   01B3               MOVW    R23:R22, R7:R6
   \   000000C0   ........           CALL    ?ULL_MOD_L12
   \   000000C4   0148               MOVW    R9:R8, R17:R16
   \   000000C6   0159               MOVW    R11:R10, R19:R18
   \   000000C8   016A               MOVW    R13:R12, R21:R20
   \   000000CA   017B               MOVW    R15:R14, R23:R22
     40            USART_transmit('.');
   \   000000CC   E20E               LDI     R16, 46
   \   000000CE   ........           CALL    USART_transmit
     41            if(aux / 100 > 0)
   \   000000D2   0184               MOVW    R17:R16, R9:R8
   \   000000D4   0195               MOVW    R19:R18, R11:R10
   \   000000D6   01A6               MOVW    R21:R20, R13:R12
   \   000000D8   01B7               MOVW    R23:R22, R15:R14
   \   000000DA   0108               MOVW    R1:R0, R17:R16
   \   000000DC   0119               MOVW    R3:R2, R19:R18
   \   000000DE   012A               MOVW    R5:R4, R21:R20
   \   000000E0   013B               MOVW    R7:R6, R23:R22
   \   000000E2   ....               LDI     R26, LOW(__Constant_64_0)
   \   000000E4   ....               LDI     R27, (__Constant_64_0) >> 8
   \   000000E6   0180               MOVW    R17:R16, R1:R0
   \   000000E8   0191               MOVW    R19:R18, R3:R2
   \   000000EA   01A2               MOVW    R21:R20, R5:R4
   \   000000EC   01B3               MOVW    R23:R22, R7:R6
   \   000000EE   ........           CALL    ?ULL_DIV_L12
   \   000000F2   0108               MOVW    R1:R0, R17:R16
   \   000000F4   0119               MOVW    R3:R2, R19:R18
   \   000000F6   012A               MOVW    R5:R4, R21:R20
   \   000000F8   013B               MOVW    R7:R6, R23:R22
   \   000000FA   ....               LDI     R30, LOW(__Constant_0_0)
   \   000000FC   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000000FE   0180               MOVW    R17:R16, R1:R0
   \   00000100   0191               MOVW    R19:R18, R3:R2
   \   00000102   01A2               MOVW    R21:R20, R5:R4
   \   00000104   01B3               MOVW    R23:R22, R7:R6
   \   00000106   ........           CALL    ?LL_CMP_L12
   \   0000010A   F039               BREQ    ??main_4
     42              USART_transmit_ulonglong(aux);
   \   0000010C   0184               MOVW    R17:R16, R9:R8
   \   0000010E   0195               MOVW    R19:R18, R11:R10
   \   00000110   01A6               MOVW    R21:R20, R13:R12
   \   00000112   01B7               MOVW    R23:R22, R15:R14
   \   00000114   ........           CALL    USART_transmit_ulonglong
   \   00000118   C030               RJMP    ??main_5
     43            else
     44            {
     45              USART_transmit('0');
   \                     ??main_4:
   \   0000011A   E300               LDI     R16, 48
   \   0000011C   ........           CALL    USART_transmit
     46              if(aux / 10 > 0)
   \   00000120   0184               MOVW    R17:R16, R9:R8
   \   00000122   0195               MOVW    R19:R18, R11:R10
   \   00000124   01A6               MOVW    R21:R20, R13:R12
   \   00000126   01B7               MOVW    R23:R22, R15:R14
   \   00000128   0108               MOVW    R1:R0, R17:R16
   \   0000012A   0119               MOVW    R3:R2, R19:R18
   \   0000012C   012A               MOVW    R5:R4, R21:R20
   \   0000012E   013B               MOVW    R7:R6, R23:R22
   \   00000130   ....               LDI     R26, LOW(__Constant_a_0)
   \   00000132   ....               LDI     R27, (__Constant_a_0) >> 8
   \   00000134   0180               MOVW    R17:R16, R1:R0
   \   00000136   0191               MOVW    R19:R18, R3:R2
   \   00000138   01A2               MOVW    R21:R20, R5:R4
   \   0000013A   01B3               MOVW    R23:R22, R7:R6
   \   0000013C   ........           CALL    ?ULL_DIV_L12
   \   00000140   0108               MOVW    R1:R0, R17:R16
   \   00000142   0119               MOVW    R3:R2, R19:R18
   \   00000144   012A               MOVW    R5:R4, R21:R20
   \   00000146   013B               MOVW    R7:R6, R23:R22
   \   00000148   ....               LDI     R30, LOW(__Constant_0_0)
   \   0000014A   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000014C   0180               MOVW    R17:R16, R1:R0
   \   0000014E   0191               MOVW    R19:R18, R3:R2
   \   00000150   01A2               MOVW    R21:R20, R5:R4
   \   00000152   01B3               MOVW    R23:R22, R7:R6
   \   00000154   ........           CALL    ?LL_CMP_L12
   \   00000158   F039               BREQ    ??main_6
     47                USART_transmit_ulonglong(aux);
   \   0000015A   0184               MOVW    R17:R16, R9:R8
   \   0000015C   0195               MOVW    R19:R18, R11:R10
   \   0000015E   01A6               MOVW    R21:R20, R13:R12
   \   00000160   01B7               MOVW    R23:R22, R15:R14
   \   00000162   ........           CALL    USART_transmit_ulonglong
   \   00000166   C009               RJMP    ??main_5
     48              else
     49              {
     50                USART_transmit('0');
   \                     ??main_6:
   \   00000168   E300               LDI     R16, 48
   \   0000016A   ........           CALL    USART_transmit
     51                USART_transmit_ulonglong(aux);
   \   0000016E   0184               MOVW    R17:R16, R9:R8
   \   00000170   0195               MOVW    R19:R18, R11:R10
   \   00000172   01A6               MOVW    R21:R20, R13:R12
   \   00000174   01B7               MOVW    R23:R22, R15:R14
   \   00000176   ........           CALL    USART_transmit_ulonglong
     52              }
     53            }
     54            USART_transmit('>');
   \                     ??main_5:
   \   0000017A   E30E               LDI     R16, 62
   \   0000017C   ........           CALL    USART_transmit
     55            USART_transmit('\r');
   \   00000180   E00D               LDI     R16, 13
   \   00000182   ........           CALL    USART_transmit
     56            USART_transmit('\n');
   \   00000186   E00A               LDI     R16, 10
   \   00000188   ........           CALL    USART_transmit
     57            
     58            softCount = 0;
   \   0000018C   E000               LDI     R16, 0
   \   0000018E   E010               LDI     R17, 0
   \   00000190   E020               LDI     R18, 0
   \   00000192   E030               LDI     R19, 0
   \   00000194   E040               LDI     R20, 0
   \   00000196   E050               LDI     R21, 0
   \   00000198   E060               LDI     R22, 0
   \   0000019A   E070               LDI     R23, 0
   \   0000019C   ....               LDI     R30, LOW(softCount)
   \   0000019E   ....               LDI     R31, (softCount) >> 8
   \   000001A0   8300               ST      Z, R16
   \   000001A2   8311               STD     Z+1, R17
   \   000001A4   8322               STD     Z+2, R18
   \   000001A6   8333               STD     Z+3, R19
   \   000001A8   8344               STD     Z+4, R20
   \   000001AA   8355               STD     Z+5, R21
   \   000001AC   8366               STD     Z+6, R22
   \   000001AE   8377               STD     Z+7, R23
     59            
     60            TCCR0 = (1 << WGM01) | (0 << WGM00) | (0 << CS02) | (1 << CS01) | (1 << CS00);
   \   000001B0   E00B               LDI     R16, 11
   \   000001B2   BF03               OUT     0x33, R16
     61            OCR0 = 63;
   \   000001B4   E30F               LDI     R16, 63
   \   000001B6   BF0C               OUT     0x3C, R16
     62            TIMSK |= (1 << OCIE0);
   \   000001B8   B709               IN      R16, 0x39
   \   000001BA   6002               ORI     R16, 0x02
   \   000001BC   BF09               OUT     0x39, R16
     63            __enable_interrupt();
   \   000001BE   9478               SEI
     64            
     65            while(1)
     66            {
     67             if(softCount % 1000 == 0)
   \                     ??main_7:
   \   000001C0   ....               LDI     R30, LOW(softCount)
   \   000001C2   ....               LDI     R31, (softCount) >> 8
   \   000001C4   8100               LD      R16, Z
   \   000001C6   8111               LDD     R17, Z+1
   \   000001C8   8122               LDD     R18, Z+2
   \   000001CA   8133               LDD     R19, Z+3
   \   000001CC   8144               LDD     R20, Z+4
   \   000001CE   8155               LDD     R21, Z+5
   \   000001D0   8166               LDD     R22, Z+6
   \   000001D2   8177               LDD     R23, Z+7
   \   000001D4   0108               MOVW    R1:R0, R17:R16
   \   000001D6   0119               MOVW    R3:R2, R19:R18
   \   000001D8   012A               MOVW    R5:R4, R21:R20
   \   000001DA   013B               MOVW    R7:R6, R23:R22
   \   000001DC   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   000001DE   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   000001E0   0180               MOVW    R17:R16, R1:R0
   \   000001E2   0191               MOVW    R19:R18, R3:R2
   \   000001E4   01A2               MOVW    R21:R20, R5:R4
   \   000001E6   01B3               MOVW    R23:R22, R7:R6
   \   000001E8   ........           CALL    ?ULL_MOD_L12
   \   000001EC   0108               MOVW    R1:R0, R17:R16
   \   000001EE   0119               MOVW    R3:R2, R19:R18
   \   000001F0   012A               MOVW    R5:R4, R21:R20
   \   000001F2   013B               MOVW    R7:R6, R23:R22
   \   000001F4   ....               LDI     R30, LOW(__Constant_0_0)
   \   000001F6   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000001F8   0180               MOVW    R17:R16, R1:R0
   \   000001FA   0191               MOVW    R19:R18, R3:R2
   \   000001FC   01A2               MOVW    R21:R20, R5:R4
   \   000001FE   01B3               MOVW    R23:R22, R7:R6
   \   00000200   ........           CALL    ?LL_CMP_L12
   \   00000204   F6E9               BRNE    ??main_7
     68             {
     69               aux = softCount / 1000;
   \   00000206   ....               LDI     R30, LOW(softCount)
   \   00000208   ....               LDI     R31, (softCount) >> 8
   \   0000020A   8100               LD      R16, Z
   \   0000020C   8111               LDD     R17, Z+1
   \   0000020E   8122               LDD     R18, Z+2
   \   00000210   8133               LDD     R19, Z+3
   \   00000212   8144               LDD     R20, Z+4
   \   00000214   8155               LDD     R21, Z+5
   \   00000216   8166               LDD     R22, Z+6
   \   00000218   8177               LDD     R23, Z+7
   \   0000021A   0108               MOVW    R1:R0, R17:R16
   \   0000021C   0119               MOVW    R3:R2, R19:R18
   \   0000021E   012A               MOVW    R5:R4, R21:R20
   \   00000220   013B               MOVW    R7:R6, R23:R22
   \   00000222   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   00000224   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   00000226   0180               MOVW    R17:R16, R1:R0
   \   00000228   0191               MOVW    R19:R18, R3:R2
   \   0000022A   01A2               MOVW    R21:R20, R5:R4
   \   0000022C   01B3               MOVW    R23:R22, R7:R6
   \   0000022E   ........           CALL    ?ULL_DIV_L12
   \   00000232   0148               MOVW    R9:R8, R17:R16
   \   00000234   0159               MOVW    R11:R10, R19:R18
   \   00000236   016A               MOVW    R13:R12, R21:R20
   \   00000238   017B               MOVW    R15:R14, R23:R22
     70               USART_transmit('<');
   \   0000023A   E30C               LDI     R16, 60
   \   0000023C   ........           CALL    USART_transmit
     71               if(aux > 0)
   \   00000240   0184               MOVW    R17:R16, R9:R8
   \   00000242   0195               MOVW    R19:R18, R11:R10
   \   00000244   01A6               MOVW    R21:R20, R13:R12
   \   00000246   01B7               MOVW    R23:R22, R15:R14
   \   00000248   0108               MOVW    R1:R0, R17:R16
   \   0000024A   0119               MOVW    R3:R2, R19:R18
   \   0000024C   012A               MOVW    R5:R4, R21:R20
   \   0000024E   013B               MOVW    R7:R6, R23:R22
   \   00000250   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000252   ....               LDI     R31, (__Constant_0_0) >> 8
   \   00000254   0180               MOVW    R17:R16, R1:R0
   \   00000256   0191               MOVW    R19:R18, R3:R2
   \   00000258   01A2               MOVW    R21:R20, R5:R4
   \   0000025A   01B3               MOVW    R23:R22, R7:R6
   \   0000025C   ........           CALL    ?LL_CMP_L12
   \   00000260   F039               BREQ    ??main_8
     72                 USART_transmit_ulonglong(aux);
   \   00000262   0184               MOVW    R17:R16, R9:R8
   \   00000264   0195               MOVW    R19:R18, R11:R10
   \   00000266   01A6               MOVW    R21:R20, R13:R12
   \   00000268   01B7               MOVW    R23:R22, R15:R14
   \   0000026A   ........           CALL    USART_transmit_ulonglong
   \   0000026E   C003               RJMP    ??main_9
     73               else
     74                 USART_transmit('0');
   \                     ??main_8:
   \   00000270   E300               LDI     R16, 48
   \   00000272   ........           CALL    USART_transmit
     75               aux = softCount % 1000;
   \                     ??main_9:
   \   00000276   ....               LDI     R30, LOW(softCount)
   \   00000278   ....               LDI     R31, (softCount) >> 8
   \   0000027A   8100               LD      R16, Z
   \   0000027C   8111               LDD     R17, Z+1
   \   0000027E   8122               LDD     R18, Z+2
   \   00000280   8133               LDD     R19, Z+3
   \   00000282   8144               LDD     R20, Z+4
   \   00000284   8155               LDD     R21, Z+5
   \   00000286   8166               LDD     R22, Z+6
   \   00000288   8177               LDD     R23, Z+7
   \   0000028A   0108               MOVW    R1:R0, R17:R16
   \   0000028C   0119               MOVW    R3:R2, R19:R18
   \   0000028E   012A               MOVW    R5:R4, R21:R20
   \   00000290   013B               MOVW    R7:R6, R23:R22
   \   00000292   ....               LDI     R26, LOW(__Constant_3e8_0)
   \   00000294   ....               LDI     R27, (__Constant_3e8_0) >> 8
   \   00000296   0180               MOVW    R17:R16, R1:R0
   \   00000298   0191               MOVW    R19:R18, R3:R2
   \   0000029A   01A2               MOVW    R21:R20, R5:R4
   \   0000029C   01B3               MOVW    R23:R22, R7:R6
   \   0000029E   ........           CALL    ?ULL_MOD_L12
   \   000002A2   0148               MOVW    R9:R8, R17:R16
   \   000002A4   0159               MOVW    R11:R10, R19:R18
   \   000002A6   016A               MOVW    R13:R12, R21:R20
   \   000002A8   017B               MOVW    R15:R14, R23:R22
     76               USART_transmit('.');
   \   000002AA   E20E               LDI     R16, 46
   \   000002AC   ........           CALL    USART_transmit
     77               if(aux / 100 > 0)
   \   000002B0   0184               MOVW    R17:R16, R9:R8
   \   000002B2   0195               MOVW    R19:R18, R11:R10
   \   000002B4   01A6               MOVW    R21:R20, R13:R12
   \   000002B6   01B7               MOVW    R23:R22, R15:R14
   \   000002B8   0108               MOVW    R1:R0, R17:R16
   \   000002BA   0119               MOVW    R3:R2, R19:R18
   \   000002BC   012A               MOVW    R5:R4, R21:R20
   \   000002BE   013B               MOVW    R7:R6, R23:R22
   \   000002C0   ....               LDI     R26, LOW(__Constant_64_0)
   \   000002C2   ....               LDI     R27, (__Constant_64_0) >> 8
   \   000002C4   0180               MOVW    R17:R16, R1:R0
   \   000002C6   0191               MOVW    R19:R18, R3:R2
   \   000002C8   01A2               MOVW    R21:R20, R5:R4
   \   000002CA   01B3               MOVW    R23:R22, R7:R6
   \   000002CC   ........           CALL    ?ULL_DIV_L12
   \   000002D0   0108               MOVW    R1:R0, R17:R16
   \   000002D2   0119               MOVW    R3:R2, R19:R18
   \   000002D4   012A               MOVW    R5:R4, R21:R20
   \   000002D6   013B               MOVW    R7:R6, R23:R22
   \   000002D8   ....               LDI     R30, LOW(__Constant_0_0)
   \   000002DA   ....               LDI     R31, (__Constant_0_0) >> 8
   \   000002DC   0180               MOVW    R17:R16, R1:R0
   \   000002DE   0191               MOVW    R19:R18, R3:R2
   \   000002E0   01A2               MOVW    R21:R20, R5:R4
   \   000002E2   01B3               MOVW    R23:R22, R7:R6
   \   000002E4   ........           CALL    ?LL_CMP_L12
   \   000002E8   F039               BREQ    ??main_10
     78                 USART_transmit_ulonglong(aux);
   \   000002EA   0184               MOVW    R17:R16, R9:R8
   \   000002EC   0195               MOVW    R19:R18, R11:R10
   \   000002EE   01A6               MOVW    R21:R20, R13:R12
   \   000002F0   01B7               MOVW    R23:R22, R15:R14
   \   000002F2   ........           CALL    USART_transmit_ulonglong
   \   000002F6   C030               RJMP    ??main_11
     79               else
     80               {
     81                 USART_transmit('0');
   \                     ??main_10:
   \   000002F8   E300               LDI     R16, 48
   \   000002FA   ........           CALL    USART_transmit
     82                 if(aux / 10 > 0)
   \   000002FE   0184               MOVW    R17:R16, R9:R8
   \   00000300   0195               MOVW    R19:R18, R11:R10
   \   00000302   01A6               MOVW    R21:R20, R13:R12
   \   00000304   01B7               MOVW    R23:R22, R15:R14
   \   00000306   0108               MOVW    R1:R0, R17:R16
   \   00000308   0119               MOVW    R3:R2, R19:R18
   \   0000030A   012A               MOVW    R5:R4, R21:R20
   \   0000030C   013B               MOVW    R7:R6, R23:R22
   \   0000030E   ....               LDI     R26, LOW(__Constant_a_0)
   \   00000310   ....               LDI     R27, (__Constant_a_0) >> 8
   \   00000312   0180               MOVW    R17:R16, R1:R0
   \   00000314   0191               MOVW    R19:R18, R3:R2
   \   00000316   01A2               MOVW    R21:R20, R5:R4
   \   00000318   01B3               MOVW    R23:R22, R7:R6
   \   0000031A   ........           CALL    ?ULL_DIV_L12
   \   0000031E   0108               MOVW    R1:R0, R17:R16
   \   00000320   0119               MOVW    R3:R2, R19:R18
   \   00000322   012A               MOVW    R5:R4, R21:R20
   \   00000324   013B               MOVW    R7:R6, R23:R22
   \   00000326   ....               LDI     R30, LOW(__Constant_0_0)
   \   00000328   ....               LDI     R31, (__Constant_0_0) >> 8
   \   0000032A   0180               MOVW    R17:R16, R1:R0
   \   0000032C   0191               MOVW    R19:R18, R3:R2
   \   0000032E   01A2               MOVW    R21:R20, R5:R4
   \   00000330   01B3               MOVW    R23:R22, R7:R6
   \   00000332   ........           CALL    ?LL_CMP_L12
   \   00000336   F039               BREQ    ??main_12
     83                   USART_transmit_ulonglong(aux);
   \   00000338   0184               MOVW    R17:R16, R9:R8
   \   0000033A   0195               MOVW    R19:R18, R11:R10
   \   0000033C   01A6               MOVW    R21:R20, R13:R12
   \   0000033E   01B7               MOVW    R23:R22, R15:R14
   \   00000340   ........           CALL    USART_transmit_ulonglong
   \   00000344   C009               RJMP    ??main_11
     84                 else
     85                 {
     86                   USART_transmit('0');
   \                     ??main_12:
   \   00000346   E300               LDI     R16, 48
   \   00000348   ........           CALL    USART_transmit
     87                   USART_transmit_ulonglong(aux);
   \   0000034C   0184               MOVW    R17:R16, R9:R8
   \   0000034E   0195               MOVW    R19:R18, R11:R10
   \   00000350   01A6               MOVW    R21:R20, R13:R12
   \   00000352   01B7               MOVW    R23:R22, R15:R14
   \   00000354   ........           CALL    USART_transmit_ulonglong
     88                 }
     89               }
     90               USART_transmit('>');
   \                     ??main_11:
   \   00000358   E30E               LDI     R16, 62
   \   0000035A   ........           CALL    USART_transmit
     91               USART_transmit('\r');
   \   0000035E   E00D               LDI     R16, 13
   \   00000360   ........           CALL    USART_transmit
     92               USART_transmit('\n');
   \   00000364   E00A               LDI     R16, 10
   \   00000366   ........           CALL    USART_transmit
   \   0000036A   CF2A               RJMP    ??main_7
   \   0000036C                      REQUIRE _A_DDRB
   \   0000036C                      REQUIRE _A_PORTB
   \   0000036C                      REQUIRE _A_DDRD
   \   0000036C                      REQUIRE _A_TCCR0
   \   0000036C                      REQUIRE _A_OCR0
   \   0000036C                      REQUIRE _A_TIMSK
     93             }
     94            }
     95          }

   \                                 In  segment INTVEC, offset 0x4c, root
   \                     `??isr_TIMER0_COMP_vect??INTVEC 76`:
   \   0000004C   ........           JMP     isr_TIMER0_COMP_vect

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   03E800000000       DD 1000, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_3e8_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_1`:
   \   00000000   000000000000       DD 0, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_0_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_1`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_2`:
   \   00000000   006400000000       DD 100, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_64_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_2`

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_3`:
   \   00000000   000A00000000       DD 10, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_a_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_3`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      11      2  isr_TIMER0_COMP_vect
      16      4  main
                   16 2 -> USART_init
                   16 2 -> USART_transmit
                   16 2 -> USART_transmit_ulonglong


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for 64 Bit Constant>_0
       8  ?<Initializer for 64 Bit Constant>_1
       8  ?<Initializer for 64 Bit Constant>_2
       8  ?<Initializer for 64 Bit Constant>_3
       4  ??isr_TIMER0_COMP_vect??INTVEC 76
       1  _A_DDRB
       1  _A_DDRD
       1  _A_OCR0
       1  _A_PORTB
       1  _A_TCCR0
       1  _A_TIMSK
       8  __Constant_0_0
       8  __Constant_3e8_0
       8  __Constant_64_0
       8  __Constant_a_0
     106  isr_TIMER0_COMP_vect
     876  main
       1  pinVal
       8  softCount
       6  -- Other

 
   6 bytes in segment ABSOLUTE
 982 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
  32 bytes in segment NEAR_I
  32 bytes in segment NEAR_ID
   9 bytes in segment NEAR_N
 
 982 bytes of CODE memory (+ 42 bytes shared)
   9 bytes of DATA memory (+ 38 bytes shared)

Errors: none
Warnings: none

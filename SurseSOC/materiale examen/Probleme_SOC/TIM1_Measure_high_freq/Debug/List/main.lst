###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        22/Dec/2015  18:41:58 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\LucruExtra\Measure_high_freq\main.c     #
#    Command line =  D:\soc2015\1305B\LucruExtra\Measure_high_freq\main.c     #
#                    --cpu=m16 -ms -o D:\soc2015\1305B\LucruExtra\Measure_hig #
#                    h_freq\Debug\Obj\ -lC D:\soc2015\1305B\LucruExtra\Measur #
#                    e_high_freq\Debug\List\ -lA                              #
#                    D:\soc2015\1305B\LucruExtra\Measure_high_freq\Debug\List #
#                    \ --initializers_in_flash --no_cse --no_inline           #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\soc2015\1305B\LucruExtra\Measure_high_freq\Debug\List #
#                    \main.lst                                                #
#    Object file  =  D:\soc2015\1305B\LucruExtra\Measure_high_freq\Debug\Obj\ #
#                    main.r90                                                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\LucruExtra\Measure_high_freq\main.c
      1          #include"timer1.h"

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include"timer0.h"
      3          #include"usart.h"
      4          
      5          extern unsigned int tim0softCount;
      6          
      7          extern unsigned int tim1_ovf;
      8          extern unsigned int tim1_val;
      9          

   \                                 In  segment CODE, align 2, keep-with-next
     10          void main( void )
   \                     main:
     11          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   9728               SBIW    R29:R28, 8
     12            USART_init(BAUD_RATE);
   \   00000006   E00C               LDI     R16, 12
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    USART_init
     13            TIMER0_init();
   \   0000000E   ........           CALL    TIMER0_init
     14            TIMER1_init();
   \   00000012   ........           CALL    TIMER1_init
     15            DDRD = (1 << PD1);
   \   00000016   E002               LDI     R16, 2
   \   00000018   BB01               OUT     0x11, R16
     16            __enable_interrupt();
   \   0000001A   9478               SEI
     17            
     18            unsigned long long aux;
     19            while(1)
     20            {
     21              tim1_val = TCNT1;
   \                     ??main_0:
   \   0000001C   B50C               IN      R16, 0x2C
   \   0000001E   B51D               IN      R17, 0x2D
   \   00000020   9300....           STS     tim1_val, R16
   \   00000024   9310....           STS     (tim1_val + 1), R17
     22              if(tim0softCount == 0)
   \   00000028   9100....           LDS     R16, tim0softCount
   \   0000002C   9110....           LDS     R17, (tim0softCount + 1)
   \   00000030   2B01               OR      R16, R17
   \   00000032   F7A1               BRNE    ??main_0
     23              {
     24                tim0softCount++;
   \   00000034   ....               LDI     R30, LOW(tim0softCount)
   \   00000036   ....               LDI     R31, (tim0softCount) >> 8
   \   00000038   8100               LD      R16, Z
   \   0000003A   8111               LDD     R17, Z+1
   \   0000003C   5F0F               SUBI    R16, 255
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   8300               ST      Z, R16
   \   00000042   8311               STD     Z+1, R17
     25                aux = tim1_ovf;
   \   00000044   9100....           LDS     R16, tim1_ovf
   \   00000048   9110....           LDS     R17, (tim1_ovf + 1)
   \   0000004C   E020               LDI     R18, 0
   \   0000004E   E030               LDI     R19, 0
   \   00000050   E040               LDI     R20, 0
   \   00000052   E050               LDI     R21, 0
   \   00000054   E060               LDI     R22, 0
   \   00000056   E070               LDI     R23, 0
   \   00000058   0148               MOVW    R9:R8, R17:R16
   \   0000005A   0159               MOVW    R11:R10, R19:R18
   \   0000005C   016A               MOVW    R13:R12, R21:R20
   \   0000005E   017B               MOVW    R15:R14, R23:R22
     26                aux = aux * 65535 + tim1_val;
   \   00000060   9100....           LDS     R16, tim1_val
   \   00000064   9110....           LDS     R17, (tim1_val + 1)
   \   00000068   E020               LDI     R18, 0
   \   0000006A   E030               LDI     R19, 0
   \   0000006C   E040               LDI     R20, 0
   \   0000006E   E050               LDI     R21, 0
   \   00000070   E060               LDI     R22, 0
   \   00000072   E070               LDI     R23, 0
   \   00000074   8308               ST      Y, R16
   \   00000076   8319               STD     Y+1, R17
   \   00000078   832A               STD     Y+2, R18
   \   0000007A   833B               STD     Y+3, R19
   \   0000007C   834C               STD     Y+4, R20
   \   0000007E   835D               STD     Y+5, R21
   \   00000080   836E               STD     Y+6, R22
   \   00000082   837F               STD     Y+7, R23
   \   00000084   0184               MOVW    R17:R16, R9:R8
   \   00000086   0195               MOVW    R19:R18, R11:R10
   \   00000088   01A6               MOVW    R21:R20, R13:R12
   \   0000008A   01B7               MOVW    R23:R22, R15:R14
   \   0000008C   ....               LDI     R26, LOW(__Constant_ffff_0)
   \   0000008E   ....               LDI     R27, (__Constant_ffff_0) >> 8
   \   00000090   ........           CALL    ?LL_MUL_L12
   \   00000094   01FE               MOVW    R31:R30, R29:R28
   \   00000096   ........           CALL    ?LL_ADD_L12
   \   0000009A   0148               MOVW    R9:R8, R17:R16
   \   0000009C   0159               MOVW    R11:R10, R19:R18
   \   0000009E   016A               MOVW    R13:R12, R21:R20
   \   000000A0   017B               MOVW    R15:R14, R23:R22
     27                tim1_ovf = 0;
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   9300....           STS     tim1_ovf, R16
   \   000000AA   9310....           STS     (tim1_ovf + 1), R17
     28                USART_transmit('<');
   \   000000AE   E30C               LDI     R16, 60
   \   000000B0   ........           CALL    USART_transmit
     29                USART_transmit_ulonglong(aux);
   \   000000B4   0184               MOVW    R17:R16, R9:R8
   \   000000B6   0195               MOVW    R19:R18, R11:R10
   \   000000B8   01A6               MOVW    R21:R20, R13:R12
   \   000000BA   01B7               MOVW    R23:R22, R15:R14
   \   000000BC   ........           CALL    USART_transmit_ulonglong
     30                USART_transmit('>');
   \   000000C0   E30E               LDI     R16, 62
   \   000000C2   ........           CALL    USART_transmit
     31                TCNT1 = 0;
   \   000000C6   E000               LDI     R16, 0
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   BD1D               OUT     0x2D, R17
   \   000000CC   BD0C               OUT     0x2C, R16
   \   000000CE   CFA6               RJMP    ??main_0
   \   000000D0                      REQUIRE _A_DDRD
   \   000000D0                      REQUIRE _A_TCNT1
     32              }
     33            }
     34          }

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for 64 Bit Constant>_0`:
   \   00000000   FFFF00000000       DD 65535, 0
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     __Constant_ffff_0:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for 64 Bit Constant>_0`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      24      4  main
                   24 2 -> TIMER0_init
                   24 2 -> TIMER1_init
                   24 2 -> USART_init
                   24 2 -> USART_transmit
                   24 2 -> USART_transmit_ulonglong


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for 64 Bit Constant>_0
       1  _A_DDRD
       2  _A_TCNT1
       8  __Constant_ffff_0
     208  main
       6  -- Other

 
   3 bytes in segment ABSOLUTE
 208 bytes in segment CODE
   6 bytes in segment INITTAB
   8 bytes in segment NEAR_I
   8 bytes in segment NEAR_ID
 
 208 bytes of CODE memory (+ 14 bytes shared)
   0 bytes of DATA memory (+ 11 bytes shared)

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        30/Dec/2015  19:42:24 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\Uleru George                            #
#                    Iulian\George;;)\Problema25_CRC_USART\main.c             #
#    Command line =  "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\Problema25_CRC_USART\main.c" --cpu=m16  #
#                    -ms -o "D:\soc2015\1305B\Uleru George                    #
#                    Iulian\George;;)\Problema25_CRC_USART\Debug\Obj\" -lC    #
#                    "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\Problema25_CRC_USART\Debug\List\" -lA   #
#                    "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\Problema25_CRC_USART\Debug\List\"       #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\soc2015\1305B\Uleru George                            #
#                    Iulian\George;;)\Problema25_CRC_USART\Debug\List\main.ls #
#                    t                                                        #
#    Object file  =  D:\soc2015\1305B\Uleru George                            #
#                    Iulian\George;;)\Problema25_CRC_USART\Debug\Obj\main.r90 #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\Uleru George Iulian\George;;)\Problema25_CRC_USART\main.c
      1          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1
      2          #include<inavr.h>
      3          #include"usart.h"
      4          #include"crc.h"
      5          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          unsigned char rxFlag;
   \                     rxFlag:
   \   00000000                      DS8 1
      7          
      8          #pragma vector = USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
      9          __interrupt void isr_USART_RXC_vect()
   \                     isr_USART_RXC_vect:
     10          {
   \   00000000   932A               ST      -Y, R18
   \   00000002   931A               ST      -Y, R17
   \   00000004   930A               ST      -Y, R16
   \   00000006   B72F               IN      R18, 0x3F
     11            rxFlag = 1;
   \   00000008   E001               LDI     R16, 1
   \   0000000A   9300....           STS     rxFlag, R16
     12            UCSRB = UCSRB ^ (1 << RXCIE);
   \   0000000E   E800               LDI     R16, 128
   \   00000010   B11A               IN      R17, 0x0A
   \   00000012   2710               EOR     R17, R16
   \   00000014   B91A               OUT     0x0A, R17
     13          }
   \   00000016   BF2F               OUT     0x3F, R18
   \   00000018   9109               LD      R16, Y+
   \   0000001A   9119               LD      R17, Y+
   \   0000001C   9129               LD      R18, Y+
   \   0000001E   9518               RETI
   \   00000020                      REQUIRE _A_UCSRB
     14          

   \                                 In  segment CODE, align 2, keep-with-next
     15          void main( void )
   \                     main:
     16          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   97A0               SBIW    R29:R28, 32
     17            USART_init(BAUD_RATE);
   \   00000006   E00C               LDI     R16, 12
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    USART_init
     18            DDRD |= (1 << PD1) | (0 << PD0);
   \   0000000E   9A89               SBI     0x11, 0x01
     19            UCSRB |= (1 << RXCIE);
   \   00000010   9A57               SBI     0x0A, 0x07
     20            __enable_interrupt();
   \   00000012   9478               SEI
     21            
     22            unsigned char rec[32];
     23            unsigned int index = 0;
   \   00000014   E0A0               LDI     R26, 0
   \   00000016   E0B0               LDI     R27, 0
     24            while(1)
     25            {
     26             if(rxFlag == 1)
   \                     ??main_0:
   \   00000018   9100....           LDS     R16, rxFlag
   \   0000001C   3001               CPI     R16, 1
   \   0000001E   F7E1               BRNE    ??main_0
     27             {
     28               rxFlag = 0;
   \   00000020   E000               LDI     R16, 0
   \   00000022   9300....           STS     rxFlag, R16
     29               rec[index] = USART_receive();
   \   00000026   ........           CALL    USART_receive
   \   0000002A   01FE               MOVW    R31:R30, R29:R28
   \   0000002C   0FEA               ADD     R30, R26
   \   0000002E   1FFB               ADC     R31, R27
   \   00000030   8300               ST      Z, R16
     30               while(rec[index] != '@')
   \                     ??main_1:
   \   00000032   01FE               MOVW    R31:R30, R29:R28
   \   00000034   0FEA               ADD     R30, R26
   \   00000036   1FFB               ADC     R31, R27
   \   00000038   8100               LD      R16, Z
   \   0000003A   3400               CPI     R16, 64
   \   0000003C   F041               BREQ    ??main_2
     31               {
     32                 index++;
   \   0000003E   9611               ADIW    R27:R26, 1
     33                 rec[index] = USART_receive();
   \   00000040   ........           CALL    USART_receive
   \   00000044   01FE               MOVW    R31:R30, R29:R28
   \   00000046   0FEA               ADD     R30, R26
   \   00000048   1FFB               ADC     R31, R27
   \   0000004A   8300               ST      Z, R16
   \   0000004C   CFF2               RJMP    ??main_1
     34               }
     35               unsigned int myCrc = crc16(CRC16_CCITT, 0, (unsigned int)(&rec[0]), index, MSBF);
   \                     ??main_2:
   \   0000004E   E001               LDI     R16, 1
   \   00000050   930A               ST      -Y, R16
   \   00000052   01BD               MOVW    R23:R22, R27:R26
   \   00000054   01AE               MOVW    R21:R20, R29:R28
   \   00000056   5F4F               SUBI    R20, 255
   \   00000058   4F5F               SBCI    R21, 255
   \   0000005A   E020               LDI     R18, 0
   \   0000005C   E030               LDI     R19, 0
   \   0000005E   E201               LDI     R16, 33
   \   00000060   E110               LDI     R17, 16
   \   00000062   ........           CALL    crc16
   \   00000066   01C8               MOVW    R25:R24, R17:R16
     36              
     37               USART_transmit('<');
   \   00000068   E30C               LDI     R16, 60
   \   0000006A   ........           CALL    USART_transmit
     38               int i;
     39               for(i = 0; i <= index; i++)
   \   0000006E   2444               CLR     R4
   \   00000070   2455               CLR     R5
   \                     ??main_3:
   \   00000072   15A4               CP      R26, R4
   \   00000074   05B5               CPC     R27, R5
   \   00000076   F058               BRCS    ??main_4
     40                 USART_transmit(rec[i]);
   \   00000078   01FE               MOVW    R31:R30, R29:R28
   \   0000007A   0DE4               ADD     R30, R4
   \   0000007C   1DF5               ADC     R31, R5
   \   0000007E   8100               LD      R16, Z
   \   00000080   ........           CALL    USART_transmit
   \   00000084   E001               LDI     R16, 1
   \   00000086   0E40               ADD     R4, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   1E50               ADC     R5, R16
   \   0000008C   CFF2               RJMP    ??main_3
     41               USART_transmit(' ');
   \                     ??main_4:
   \   0000008E   E200               LDI     R16, 32
   \   00000090   ........           CALL    USART_transmit
     42               USART_transmit('C');
   \   00000094   E403               LDI     R16, 67
   \   00000096   ........           CALL    USART_transmit
     43               USART_transmit('R');
   \   0000009A   E502               LDI     R16, 82
   \   0000009C   ........           CALL    USART_transmit
     44               USART_transmit('C');
   \   000000A0   E403               LDI     R16, 67
   \   000000A2   ........           CALL    USART_transmit
     45               USART_transmit('1');
   \   000000A6   E301               LDI     R16, 49
   \   000000A8   ........           CALL    USART_transmit
     46               USART_transmit('6');
   \   000000AC   E306               LDI     R16, 54
   \   000000AE   ........           CALL    USART_transmit
     47               USART_transmit(' ');
   \   000000B2   E200               LDI     R16, 32
   \   000000B4   ........           CALL    USART_transmit
     48               hexadecimalTransmit(myCrc);
   \   000000B8   018C               MOVW    R17:R16, R25:R24
   \   000000BA   ........           CALL    hexadecimalTransmit
     49               USART_transmit('>');
   \   000000BE   E30E               LDI     R16, 62
   \   000000C0   ........           CALL    USART_transmit
     50               USART_transmit('\r');
   \   000000C4   E00D               LDI     R16, 13
   \   000000C6   ........           CALL    USART_transmit
     51               USART_transmit('\n');
   \   000000CA   E00A               LDI     R16, 10
   \   000000CC   ........           CALL    USART_transmit
     52               index = 0;
   \   000000D0   E0A0               LDI     R26, 0
   \   000000D2   E0B0               LDI     R27, 0
     53               UCSRB |= (1 << RXCIE);
   \   000000D4   9A57               SBI     0x0A, 0x07
   \   000000D6   CFA0               RJMP    ??main_0
   \   000000D8                      REQUIRE _A_DDRD
   \   000000D8                      REQUIRE _A_UCSRB
     54             }
     55            }
     56          }

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??isr_USART_RXC_vect??INTVEC 44`:
   \   0000002C   ........           JMP     isr_USART_RXC_vect

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       3      2  isr_USART_RXC_vect
      39      2  main
                   38 2 -> USART_init
                   38 2 -> USART_receive
                   38 2 -> USART_transmit
                   39 2 -> crc16
                   38 2 -> hexadecimalTransmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??isr_USART_RXC_vect??INTVEC 44
       1  _A_DDRD
       1  _A_UCSRB
      32  isr_USART_RXC_vect
     216  main
       1  rxFlag
       6  -- Other

 
   2 bytes in segment ABSOLUTE
 248 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
   1 byte  in segment NEAR_Z
 
 248 bytes of CODE memory (+ 10 bytes shared)
   1 byte  of DATA memory (+  2 bytes shared)

Errors: none
Warnings: none

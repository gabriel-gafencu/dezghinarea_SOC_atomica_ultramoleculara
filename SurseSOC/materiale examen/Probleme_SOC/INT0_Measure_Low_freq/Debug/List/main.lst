###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        23/Dec/2015  14:45:16 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\LucruExtra\INT0_Measure_Low_freq\main.c #
#    Command line =  D:\soc2015\1305B\LucruExtra\INT0_Measure_Low_freq\main.c #
#                     --cpu=m16 -ms -o D:\soc2015\1305B\LucruExtra\INT0_Measu #
#                    re_Low_freq\Debug\Obj\ -lC D:\soc2015\1305B\LucruExtra\I #
#                    NT0_Measure_Low_freq\Debug\List\ -lA                     #
#                    D:\soc2015\1305B\LucruExtra\INT0_Measure_Low_freq\Debug\ #
#                    List\ --initializers_in_flash --no_cse --no_inline       #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\soc2015\1305B\LucruExtra\INT0_Measure_Low_freq\Debug\ #
#                    List\main.lst                                            #
#    Object file  =  D:\soc2015\1305B\LucruExtra\INT0_Measure_Low_freq\Debug\ #
#                    Obj\main.r90                                             #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\LucruExtra\INT0_Measure_Low_freq\main.c
      1          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5b
   \   union <unnamed> volatile __io _A_GICR
   \                     _A_GICR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      2          #include<inavr.h>
      3          #include"usart.h"
      4          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      5          unsigned int softCount;
   \                     softCount:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          unsigned int events;
   \                     events:
   \   00000000                      DS8 2
      7          
      8          #pragma vector = TIMER0_COMP_vect

   \                                 In  segment CODE, align 2, keep-with-next
      9          __interrupt void isr_TIMER0_COMP_vect()
   \                     isr_TIMER0_COMP_vect:
     10          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
     11            softCount++;
   \   0000000C   ....               LDI     R30, LOW(softCount)
   \   0000000E   ....               LDI     R31, (softCount) >> 8
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
     12            if(softCount > 20)
   \   0000001C   91E0....           LDS     R30, softCount
   \   00000020   91F0....           LDS     R31, (softCount + 1)
   \   00000024   9775               SBIW    R31:R30, 21
   \   00000026   F030               BRCS    ??isr_TIMER0_COMP_vect_0
     13              softCount = 0;
   \   00000028   E000               LDI     R16, 0
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   9300....           STS     softCount, R16
   \   00000030   9310....           STS     (softCount + 1), R17
     14          }
   \                     ??isr_TIMER0_COMP_vect_0:
   \   00000034   BF2F               OUT     0x3F, R18
   \   00000036   9109               LD      R16, Y+
   \   00000038   9119               LD      R17, Y+
   \   0000003A   9129               LD      R18, Y+
   \   0000003C   91E9               LD      R30, Y+
   \   0000003E   91F9               LD      R31, Y+
   \   00000040   9518               RETI
     15          
     16          #pragma vector = INT0_vect

   \                                 In  segment CODE, align 2, keep-with-next
     17          __interrupt void isr_INT0_vect()
   \                     isr_INT0_vect:
     18          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
     19            events++; 
   \   0000000C   ....               LDI     R30, LOW(events)
   \   0000000E   ....               LDI     R31, (events) >> 8
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
     20          }
   \   0000001C   BF2F               OUT     0x3F, R18
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   91E9               LD      R30, Y+
   \   00000026   91F9               LD      R31, Y+
   \   00000028   9518               RETI
     21          

   \                                 In  segment CODE, align 2, keep-with-next
     22          void main( void )
   \                     main:
     23          {
     24            GICR |= (1 << INT0);
   \   00000000   B70B               IN      R16, 0x3B
   \   00000002   6400               ORI     R16, 0x40
   \   00000004   BF0B               OUT     0x3B, R16
     25            MCUCR |= (1 << ISC01) | (1 << ISC00);
   \   00000006   B705               IN      R16, 0x35
   \   00000008   6003               ORI     R16, 0x03
   \   0000000A   BF05               OUT     0x35, R16
     26            DDRD |= (0 << PD2);
   \   0000000C   B301               IN      R16, 0x11
   \   0000000E   BB01               OUT     0x11, R16
     27            
     28            USART_init(BAUD_RATE);
   \   00000010   E00C               LDI     R16, 12
   \   00000012   E010               LDI     R17, 0
   \   00000014   ........           CALL    USART_init
     29            DDRD |= (1 << PD1) | (0 << PD0);
   \   00000018   9A89               SBI     0x11, 0x01
     30            
     31            TCCR0 |= (1 << WGM01) | (0 << WGM00) | (1 << CS02) | (0 << CS01) | (1 << CS00);
   \   0000001A   B703               IN      R16, 0x33
   \   0000001C   600D               ORI     R16, 0x0D
   \   0000001E   BF03               OUT     0x33, R16
     32            OCR0 = 196;
   \   00000020   EC04               LDI     R16, 196
   \   00000022   BF0C               OUT     0x3C, R16
     33            TIMSK |= (1 << OCIE0);
   \   00000024   B709               IN      R16, 0x39
   \   00000026   6002               ORI     R16, 0x02
   \   00000028   BF09               OUT     0x39, R16
     34            __enable_interrupt();
   \   0000002A   9478               SEI
     35            
     36            while(1)
     37            {
     38              if(softCount == 0)
   \                     ??main_0:
   \   0000002C   9100....           LDS     R16, softCount
   \   00000030   9110....           LDS     R17, (softCount + 1)
   \   00000034   2B01               OR      R16, R17
   \   00000036   F7D1               BRNE    ??main_0
     39              {
     40                softCount++;
   \   00000038   ....               LDI     R30, LOW(softCount)
   \   0000003A   ....               LDI     R31, (softCount) >> 8
   \   0000003C   8100               LD      R16, Z
   \   0000003E   8111               LDD     R17, Z+1
   \   00000040   5F0F               SUBI    R16, 255
   \   00000042   4F1F               SBCI    R17, 255
   \   00000044   8300               ST      Z, R16
   \   00000046   8311               STD     Z+1, R17
     41                USART_transmit_uint(events);
   \   00000048   9100....           LDS     R16, events
   \   0000004C   9110....           LDS     R17, (events + 1)
   \   00000050   ........           CALL    USART_transmit_uint
     42                USART_transmit('H');
   \   00000054   E408               LDI     R16, 72
   \   00000056   ........           CALL    USART_transmit
     43                USART_transmit('z');
   \   0000005A   E70A               LDI     R16, 122
   \   0000005C   ........           CALL    USART_transmit
     44                USART_transmit('\r');
   \   00000060   E00D               LDI     R16, 13
   \   00000062   ........           CALL    USART_transmit
     45                USART_transmit('\n');
   \   00000066   E00A               LDI     R16, 10
   \   00000068   ........           CALL    USART_transmit
     46                events = 0;
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   E010               LDI     R17, 0
   \   00000070   9300....           STS     events, R16
   \   00000074   9310....           STS     (events + 1), R17
   \   00000078   CFD9               RJMP    ??main_0
   \   0000007A                      REQUIRE _A_GICR
   \   0000007A                      REQUIRE _A_MCUCR
   \   0000007A                      REQUIRE _A_DDRD
   \   0000007A                      REQUIRE _A_TCCR0
   \   0000007A                      REQUIRE _A_OCR0
   \   0000007A                      REQUIRE _A_TIMSK
     47              }
     48            }
     49          }

   \                                 In  segment INTVEC, offset 0x4, root
   \                     `??isr_INT0_vect??INTVEC 4`:
   \   00000004   ........           JMP     isr_INT0_vect

   \                                 In  segment INTVEC, offset 0x4c, root
   \                     `??isr_TIMER0_COMP_vect??INTVEC 76`:
   \   0000004C   ........           JMP     isr_TIMER0_COMP_vect

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       5      2  isr_INT0_vect
       5      2  isr_TIMER0_COMP_vect
       0      2  main
                   0 2 -> USART_init
                   0 2 -> USART_transmit
                   0 2 -> USART_transmit_uint


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??isr_INT0_vect??INTVEC 4
       4  ??isr_TIMER0_COMP_vect??INTVEC 76
       1  _A_DDRD
       1  _A_GICR
       1  _A_MCUCR
       1  _A_OCR0
       1  _A_TCCR0
       1  _A_TIMSK
       2  events
      42  isr_INT0_vect
      66  isr_TIMER0_COMP_vect
     122  main
       2  softCount
       6  -- Other

 
   6 bytes in segment ABSOLUTE
 230 bytes in segment CODE
   6 bytes in segment INITTAB
   8 bytes in segment INTVEC
   4 bytes in segment NEAR_Z
 
 230 bytes of CODE memory (+ 14 bytes shared)
   4 bytes of DATA memory (+  6 bytes shared)

Errors: none
Warnings: none

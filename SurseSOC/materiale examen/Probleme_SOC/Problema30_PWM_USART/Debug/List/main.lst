###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        30/Dec/2015  18:15:41 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\soc2015\1305B\Uleru George                            #
#                    Iulian\George;;)\Problema30\main.c                       #
#    Command line =  "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\Problema30\main.c" --cpu=m16 -ms -o     #
#                    "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\Problema30\Debug\Obj\" -lC              #
#                    "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\Problema30\Debug\List\" -lA             #
#                    "D:\soc2015\1305B\Uleru George                           #
#                    Iulian\George;;)\Problema30\Debug\List\"                 #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\soc2015\1305B\Uleru George                            #
#                    Iulian\George;;)\Problema30\Debug\List\main.lst          #
#    Object file  =  D:\soc2015\1305B\Uleru George                            #
#                    Iulian\George;;)\Problema30\Debug\Obj\main.r90           #
#                                                                             #
#                                                                             #
###############################################################################

D:\soc2015\1305B\Uleru George Iulian\George;;)\Problema30\main.c
      1          #include<iom16.h>

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1
      2          #include<inavr.h>
      3          #include"usart.h"
      4          
      5          #pragma vector = USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
      6          __interrupt void isr_USART_RXC_vect()
   \                     isr_USART_RXC_vect:
      7          {
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C   93FA               ST      -Y, R31
   \   0000000E   93EA               ST      -Y, R30
   \   00000010   923A               ST      -Y, R3
   \   00000012   922A               ST      -Y, R2
   \   00000014   921A               ST      -Y, R1
   \   00000016   920A               ST      -Y, R0
   \   00000018   937A               ST      -Y, R23
   \   0000001A   936A               ST      -Y, R22
   \   0000001C   935A               ST      -Y, R21
   \   0000001E   934A               ST      -Y, R20
   \   00000020   933A               ST      -Y, R19
   \   00000022   932A               ST      -Y, R18
   \   00000024   931A               ST      -Y, R17
   \   00000026   930A               ST      -Y, R16
   \   00000028   B65F               IN      R5, 0x3F
   \   0000002A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000002A                      REQUIRE ?Register_R5_is_cg_reg
      8            UCSRB = UCSRB ^ (1 << RXCIE);     //opresc intreruperea
   \   0000002A   E800               LDI     R16, 128
   \   0000002C   B11A               IN      R17, 0x0A
   \   0000002E   2710               EOR     R17, R16
   \   00000030   B91A               OUT     0x0A, R17
      9            unsigned long duty = 0;
   \   00000032   E080               LDI     R24, 0
   \   00000034   E090               LDI     R25, 0
   \   00000036   E0A0               LDI     R26, 0
   \   00000038   E0B0               LDI     R27, 0
     10            unsigned char rec = USART_receive();
   \   0000003A   ........           CALL    USART_receive
   \   0000003E   2E40               MOV     R4, R16
     11            while(rec != '%')
   \                     ??isr_USART_RXC_vect_0:
   \   00000040   E205               LDI     R16, 37
   \   00000042   1640               CP      R4, R16
   \   00000044   F0C1               BREQ    ??isr_USART_RXC_vect_1
     12            {
     13              duty = duty * 10 + (unsigned int)(rec - '0');
   \   00000046   E00A               LDI     R16, 10
   \   00000048   E010               LDI     R17, 0
   \   0000004A   E020               LDI     R18, 0
   \   0000004C   E030               LDI     R19, 0
   \   0000004E   01AC               MOVW    R21:R20, R25:R24
   \   00000050   01BD               MOVW    R23:R22, R27:R26
   \   00000052   ........           CALL    ?L_EC_MUL_L03
   \   00000056   2D84               MOV     R24, R4
   \   00000058   E090               LDI     R25, 0
   \   0000005A   97C0               SBIW    R25:R24, 48
   \   0000005C   01AC               MOVW    R21:R20, R25:R24
   \   0000005E   E060               LDI     R22, 0
   \   00000060   E070               LDI     R23, 0
   \   00000062   01C8               MOVW    R25:R24, R17:R16
   \   00000064   01D9               MOVW    R27:R26, R19:R18
   \   00000066   0F84               ADD     R24, R20
   \   00000068   1F95               ADC     R25, R21
   \   0000006A   1FA6               ADC     R26, R22
   \   0000006C   1FB7               ADC     R27, R23
     14              rec = USART_receive();
   \   0000006E   ........           CALL    USART_receive
   \   00000072   2E40               MOV     R4, R16
   \   00000074   CFE5               RJMP    ??isr_USART_RXC_vect_0
     15            }
     16            OCR1A = duty * ICR1 / 100;
   \                     ??isr_USART_RXC_vect_1:
   \   00000076   B546               IN      R20, 0x26
   \   00000078   B557               IN      R21, 0x27
   \   0000007A   E060               LDI     R22, 0
   \   0000007C   E070               LDI     R23, 0
   \   0000007E   018C               MOVW    R17:R16, R25:R24
   \   00000080   019D               MOVW    R19:R18, R27:R26
   \   00000082   ........           CALL    ?L_EC_MUL_L03
   \   00000086   E644               LDI     R20, 100
   \   00000088   E050               LDI     R21, 0
   \   0000008A   E060               LDI     R22, 0
   \   0000008C   E070               LDI     R23, 0
   \   0000008E   ........           CALL    ?UL_DIVMOD_L03
   \   00000092   BD1B               OUT     0x2B, R17
   \   00000094   BD0A               OUT     0x2A, R16
     17            UCSRB |= (1 << RXCIE);    //repornesc intreruperea
   \   00000096   9A57               SBI     0x0A, 0x07
     18          }
   \   00000098   BE5F               OUT     0x3F, R5
   \   0000009A   9109               LD      R16, Y+
   \   0000009C   9119               LD      R17, Y+
   \   0000009E   9129               LD      R18, Y+
   \   000000A0   9139               LD      R19, Y+
   \   000000A2   9149               LD      R20, Y+
   \   000000A4   9159               LD      R21, Y+
   \   000000A6   9169               LD      R22, Y+
   \   000000A8   9179               LD      R23, Y+
   \   000000AA   9009               LD      R0, Y+
   \   000000AC   9019               LD      R1, Y+
   \   000000AE   9029               LD      R2, Y+
   \   000000B0   9039               LD      R3, Y+
   \   000000B2   91E9               LD      R30, Y+
   \   000000B4   91F9               LD      R31, Y+
   \   000000B6   9189               LD      R24, Y+
   \   000000B8   9199               LD      R25, Y+
   \   000000BA   91A9               LD      R26, Y+
   \   000000BC   91B9               LD      R27, Y+
   \   000000BE   9049               LD      R4, Y+
   \   000000C0   9059               LD      R5, Y+
   \   000000C2   9518               RETI
   \   000000C4                      REQUIRE _A_UCSRB
   \   000000C4                      REQUIRE _A_OCR1A
   \   000000C4                      REQUIRE _A_ICR1
     19          

   \                                 In  segment CODE, align 2, keep-with-next
     20          void main( void )
   \                     main:
     21          {
     22            USART_init(BAUD_RATE);
   \   00000000   E00C               LDI     R16, 12
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    USART_init
     23            DDRD |= (1 << PD1) | (0 << PD0);
   \   00000008   9A89               SBI     0x11, 0x01
     24            UCSRB |= (1 << RXCIE);
   \   0000000A   9A57               SBI     0x0A, 0x07
     25            __enable_interrupt(); 
   \   0000000C   9478               SEI
     26            
     27            TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << WGM11) | (0 << WGM10);
   \   0000000E   E802               LDI     R16, 130
   \   00000010   BD0F               OUT     0x2F, R16
     28            TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (0 << CS11) | (1 << CS10);
   \   00000012   E109               LDI     R16, 25
   \   00000014   BD0E               OUT     0x2E, R16
     29            ICR1 = 785;
   \   00000016   E101               LDI     R16, 17
   \   00000018   E013               LDI     R17, 3
   \   0000001A   BD17               OUT     0x27, R17
   \   0000001C   BD06               OUT     0x26, R16
     30            OCR1A = ICR1 * 5 / 10;
   \   0000001E   E005               LDI     R16, 5
   \   00000020   E010               LDI     R17, 0
   \   00000022   B546               IN      R20, 0x26
   \   00000024   B557               IN      R21, 0x27
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   E04A               LDI     R20, 10
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   ........           CALL    ?US_DIVMOD_L02
   \   00000032   BD1B               OUT     0x2B, R17
   \   00000034   BD0A               OUT     0x2A, R16
     31            DDRD |= (1 << PD5);
   \   00000036   9A8D               SBI     0x11, 0x05
     32            
     33            while(1)
   \                     ??main_0:
   \   00000038   CFFF               RJMP    ??main_0
   \   0000003A                      REQUIRE _A_DDRD
   \   0000003A                      REQUIRE _A_UCSRB
   \   0000003A                      REQUIRE _A_TCCR1A
   \   0000003A                      REQUIRE _A_TCCR1B
   \   0000003A                      REQUIRE _A_ICR1
   \   0000003A                      REQUIRE _A_OCR1A
     34              ;
     35          }

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??isr_USART_RXC_vect??INTVEC 44`:
   \   0000002C   ........           JMP     isr_USART_RXC_vect

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      20      4  isr_USART_RXC_vect
                   20 2 -> USART_receive
       0      4  main
                    0 2 -> USART_init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??isr_USART_RXC_vect??INTVEC 44
       1  _A_DDRD
       2  _A_ICR1
       2  _A_OCR1A
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_UCSRB
     196  isr_USART_RXC_vect
      58  main

 
   8 bytes in segment ABSOLUTE
 254 bytes in segment CODE
   4 bytes in segment INTVEC
 
 254 bytes of CODE memory (+ 4 bytes shared)
   0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none

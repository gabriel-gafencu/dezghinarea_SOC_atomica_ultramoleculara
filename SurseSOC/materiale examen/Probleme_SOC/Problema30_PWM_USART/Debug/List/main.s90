///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR       30/Dec/2015  18:15:41 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\soc2015\1305B\Uleru George                           /
//                    Iulian\George;;)\Problema30\main.c                      /
//    Command line =  "D:\soc2015\1305B\Uleru George                          /
//                    Iulian\George;;)\Problema30\main.c" --cpu=m16 -ms -o    /
//                    "D:\soc2015\1305B\Uleru George                          /
//                    Iulian\George;;)\Problema30\Debug\Obj\" -lC             /
//                    "D:\soc2015\1305B\Uleru George                          /
//                    Iulian\George;;)\Problema30\Debug\List\" -lA            /
//                    "D:\soc2015\1305B\Uleru George                          /
//                    Iulian\George;;)\Problema30\Debug\List\"                /
//                    --initializers_in_flash --no_cse --no_inline            /
//                    --no_code_motion --no_cross_call --no_clustering        /
//                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e           /
//                    --eeprom_size 512 --clib -On                            /
//    List file    =  D:\soc2015\1305B\Uleru George                           /
//                    Iulian\George;;)\Problema30\Debug\List\main.s90         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega16"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?L_EC_MUL_L03
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?S_EC_MUL_L02
        EXTERN ?UL_DIVMOD_L03
        EXTERN ?US_DIVMOD_L02

        PUBWEAK `??isr_USART_RXC_vect??INTVEC 44`
        PUBWEAK _A_DDRD
        PUBWEAK _A_ICR1
        PUBWEAK _A_OCR1A
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_UCSRB
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC isr_USART_RXC_vect
        FUNCTION isr_USART_RXC_vect,021231H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC main
        FUNCTION main,021a03H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 4, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
isr_USART_RXC_vect  SYMBOL "isr_USART_RXC_vect"
`??isr_USART_RXC_vect??INTVEC 44` SYMBOL "??INTVEC 44", isr_USART_RXC_vect

        EXTERN USART_init
        FUNCTION USART_init,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN USART_receive
        FUNCTION USART_receive,0202H
        ARGFRAME RSTACK, 0, STACK

// D:\soc2015\1305B\Uleru George Iulian\George;;)\Problema30\main.c
//    1 #include<iom16.h>

        ASEGN ABSOLUTE:DATA:NOROOT,04fH
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04aH
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,046H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02aH
// union <unnamed> volatile __io _A_UCSRB
_A_UCSRB:
        DS8 1
//    2 #include<inavr.h>
//    3 #include"usart.h"
//    4 
//    5 #pragma vector = USART_RXC_vect

        RSEG CODE:CODE:NOROOT(1)
//    6 __interrupt void isr_USART_RXC_vect()
isr_USART_RXC_vect:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function isr_USART_RXC_vect
//    7 {
        FUNCALL isr_USART_RXC_vect, USART_receive
        LOCFRAME CSTACK, 20, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL isr_USART_RXC_vect, USART_receive
        LOCFRAME CSTACK, 20, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R5
          CFI R5 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R4
          CFI R4 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R3
          CFI R3 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R2
          CFI R2 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -17)
          CFI CFA_Y Y+17
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -18)
          CFI CFA_Y Y+18
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -19)
          CFI CFA_Y Y+19
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -20)
          CFI CFA_Y Y+20
        IN      R5, 0x3F
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
//    8   UCSRB = UCSRB ^ (1 << RXCIE);     //opresc intreruperea
        LDI     R16, 128
        IN      R17, 0x0A
        EOR     R17, R16
        OUT     0x0A, R17
//    9   unsigned long duty = 0;
        LDI     R24, 0
        LDI     R25, 0
        LDI     R26, 0
        LDI     R27, 0
//   10   unsigned char rec = USART_receive();
        CALL    USART_receive
        MOV     R4, R16
//   11   while(rec != '%')
??isr_USART_RXC_vect_0:
        LDI     R16, 37
        CP      R4, R16
        BREQ    ??isr_USART_RXC_vect_1
//   12   {
//   13     duty = duty * 10 + (unsigned int)(rec - '0');
        LDI     R16, 10
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        CALL    ?L_EC_MUL_L03
        MOV     R24, R4
        LDI     R25, 0
        SBIW    R25:R24, 48
        MOVW    R21:R20, R25:R24
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
        ADD     R24, R20
        ADC     R25, R21
        ADC     R26, R22
        ADC     R27, R23
//   14     rec = USART_receive();
        CALL    USART_receive
        MOV     R4, R16
        RJMP    ??isr_USART_RXC_vect_0
//   15   }
//   16   OCR1A = duty * ICR1 / 100;
??isr_USART_RXC_vect_1:
        IN      R20, 0x26
        IN      R21, 0x27
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?L_EC_MUL_L03
        LDI     R20, 100
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        CALL    ?UL_DIVMOD_L03
        OUT     0x2B, R17
        OUT     0x2A, R16
//   17   UCSRB |= (1 << RXCIE);    //repornesc intreruperea
        SBI     0x0A, 0x07
//   18 }
        OUT     0x3F, R5
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+19
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+18
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+17
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+16
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+15
        LD      R21, Y+
          CFI R21 SameValue
          CFI CFA_Y Y+14
        LD      R22, Y+
          CFI R22 SameValue
          CFI CFA_Y Y+13
        LD      R23, Y+
          CFI R23 SameValue
          CFI CFA_Y Y+12
        LD      R0, Y+
          CFI R0 SameValue
          CFI CFA_Y Y+11
        LD      R1, Y+
          CFI R1 SameValue
          CFI CFA_Y Y+10
        LD      R2, Y+
          CFI R2 SameValue
          CFI CFA_Y Y+9
        LD      R3, Y+
          CFI R3 SameValue
          CFI CFA_Y Y+8
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+7
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+6
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+5
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+4
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+3
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+2
        LD      R4, Y+
          CFI R4 SameValue
          CFI CFA_Y Y+1
        LD      R5, Y+
          CFI R5 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock0
        REQUIRE _A_UCSRB
        REQUIRE _A_OCR1A
        REQUIRE _A_ICR1
//   19 

        RSEG CODE:CODE:NOROOT(1)
//   20 void main( void )
main:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function main
//   21 {
//   22   USART_init(BAUD_RATE);
        FUNCALL main, USART_init
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R16, 12
        LDI     R17, 0
        CALL    USART_init
//   23   DDRD |= (1 << PD1) | (0 << PD0);
        SBI     0x11, 0x01
//   24   UCSRB |= (1 << RXCIE);
        SBI     0x0A, 0x07
//   25   __enable_interrupt(); 
        SEI
//   26   
//   27   TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << WGM11) | (0 << WGM10);
        LDI     R16, 130
        OUT     0x2F, R16
//   28   TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (0 << CS11) | (1 << CS10);
        LDI     R16, 25
        OUT     0x2E, R16
//   29   ICR1 = 785;
        LDI     R16, 17
        LDI     R17, 3
        OUT     0x27, R17
        OUT     0x26, R16
//   30   OCR1A = ICR1 * 5 / 10;
        LDI     R16, 5
        LDI     R17, 0
        IN      R20, 0x26
        IN      R21, 0x27
        CALL    ?S_EC_MUL_L02
        LDI     R20, 10
        LDI     R21, 0
        CALL    ?US_DIVMOD_L02
        OUT     0x2B, R17
        OUT     0x2A, R16
//   31   DDRD |= (1 << PD5);
        SBI     0x11, 0x05
//   32   
//   33   while(1)
??main_0:
        RJMP    ??main_0
          CFI EndBlock cfiBlock1
        REQUIRE _A_DDRD
        REQUIRE _A_UCSRB
        REQUIRE _A_TCCR1A
        REQUIRE _A_TCCR1B
        REQUIRE _A_ICR1
        REQUIRE _A_OCR1A
//   34     ;
//   35 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 44
`??isr_USART_RXC_vect??INTVEC 44`:
        JMP     isr_USART_RXC_vect

        END
// 
//   8 bytes in segment ABSOLUTE
// 254 bytes in segment CODE
//   4 bytes in segment INTVEC
// 
// 254 bytes of CODE memory (+ 4 bytes shared)
//   0 bytes of DATA memory (+ 8 bytes shared)
//
//Errors: none
//Warnings: none
